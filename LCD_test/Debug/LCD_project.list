
LCD_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b34  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0ac  0800a0ac  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b4  0800a0b4  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b8  0800a0b8  0001a0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800a0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200000cc  0800a188  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800a188  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c03d  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399b  00000000  00000000  0003c139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0003fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00040f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b2c  00000000  00000000  000421c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191b6  00000000  00000000  0006acf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3acf  00000000  00000000  00083eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00177979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005570  00000000  00000000  001779cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000cc 	.word	0x200000cc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008560 	.word	0x08008560

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000d0 	.word	0x200000d0
 8000204:	08008560 	.word	0x08008560

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <SendData>:
char rcv_line[RCV_SIZE];
int count  = 0, rcv_flag = 0;

const char *nums_str[]  = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" };

void SendData ( char *TRS_line, int *cnt_t ) {
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	466b      	mov	r3, sp
 80005e0:	461d      	mov	r5, r3
	int buff_size = (*cnt_t) + 2;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3302      	adds	r3, #2
 80005e8:	617b      	str	r3, [r7, #20]
	char buff[buff_size];
 80005ea:	697c      	ldr	r4, [r7, #20]
 80005ec:	1e63      	subs	r3, r4, #1
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	4623      	mov	r3, r4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f04f 0100 	mov.w	r1, #0
 80005f8:	f04f 0200 	mov.w	r2, #0
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	00cb      	lsls	r3, r1, #3
 8000602:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000606:	00c2      	lsls	r2, r0, #3
 8000608:	4623      	mov	r3, r4
 800060a:	4618      	mov	r0, r3
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	f04f 0200 	mov.w	r2, #0
 8000614:	f04f 0300 	mov.w	r3, #0
 8000618:	00cb      	lsls	r3, r1, #3
 800061a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800061e:	00c2      	lsls	r2, r0, #3
 8000620:	4623      	mov	r3, r4
 8000622:	3307      	adds	r3, #7
 8000624:	08db      	lsrs	r3, r3, #3
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	ebad 0d03 	sub.w	sp, sp, r3
 800062c:	466b      	mov	r3, sp
 800062e:	3300      	adds	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]

	My_strcpy ( buff, TRS_line, 0, buff_size - 2 );
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3b02      	subs	r3, #2
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f000 fc23 	bl	8000e86 <My_strcpy>

	buff[buff_size - 2] = '\n';
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3b02      	subs	r3, #2
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	210a      	movs	r1, #10
 8000648:	54d1      	strb	r1, [r2, r3]
	buff[buff_size - 1] = '\r';
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	3b01      	subs	r3, #1
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	210d      	movs	r1, #13
 8000652:	54d1      	strb	r1, [r2, r3]
	TRS_line[0] = '\0';
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
	(*cnt_t) = 0;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *) buff, buff_size, 200);
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	b29a      	uxth	r2, r3
 8000666:	23c8      	movs	r3, #200	; 0xc8
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <SendData+0xa4>)
 800066a:	f004 fc32 	bl	8004ed2 <HAL_UART_Transmit>

	return;
 800066e:	bf00      	nop
 8000670:	46ad      	mov	sp, r5
}
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bdb0      	pop	{r4, r5, r7, pc}
 8000678:	20000318 	.word	0x20000318

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b0c9      	sub	sp, #292	; 0x124
 8000680:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000682:	f7ff ff3d 	bl	8000500 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000686:	f7ff ff61 	bl	800054c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f001 f811 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f9ef 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 faff 	bl	8000c94 <MX_GPIO_Init>
  MX_CRC_Init();
 8000696:	f000 fa79 	bl	8000b8c <MX_CRC_Init>
  MX_DMA2D_Init();
 800069a:	f000 fa99 	bl	8000bd0 <MX_DMA2D_Init>
  MX_USART1_UART_Init();
 800069e:	f000 fac9 	bl	8000c34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 80006a2:	f007 fa4d 	bl	8007b40 <BSP_SDRAM_Init>
    __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80006a6:	4bcc      	ldr	r3, [pc, #816]	; (80009d8 <main+0x35c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4acb      	ldr	r2, [pc, #812]	; (80009d8 <main+0x35c>)
 80006ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4bc9      	ldr	r3, [pc, #804]	; (80009d8 <main+0x35c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

    BSP_TS_Init(480, 272);
 80006be:	f44f 7188 	mov.w	r1, #272	; 0x110
 80006c2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80006c6:	f007 fbf1 	bl	8007eac <BSP_TS_Init>

    BSP_LCD_Init();
 80006ca:	f006 fbff 	bl	8006ecc <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80006ce:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80006d2:	2000      	movs	r0, #0
 80006d4:	f006 fc92 	bl	8006ffc <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 80006d8:	f007 f81a 	bl	8007710 <BSP_LCD_DisplayOn>

    BSP_LCD_SelectLayer(0);
 80006dc:	2000      	movs	r0, #0
 80006de:	f006 fced 	bl	80070bc <BSP_LCD_SelectLayer>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80006e2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80006e6:	f006 fcf9 	bl	80070dc <BSP_LCD_SetTextColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80006ea:	f04f 30ff 	mov.w	r0, #4294967295
 80006ee:	f006 fd27 	bl	8007140 <BSP_LCD_Clear>
	char xTouchStr[10];


    BUTTON_st *num_but[10];

    for( int i = 0; i < 5; ++i ) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80006f8:	e027      	b.n	800074a <main+0xce>
    	num_but[i] = CreateButton (20 + 90 * i      , 165, 80, 40, nums_str[i], 1);
 80006fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80006fe:	b29b      	uxth	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	4413      	add	r3, r2
 8000706:	461a      	mov	r2, r3
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	b29b      	uxth	r3, r3
 8000710:	3314      	adds	r3, #20
 8000712:	b298      	uxth	r0, r3
 8000714:	4ab1      	ldr	r2, [pc, #708]	; (80009dc <main+0x360>)
 8000716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	2201      	movs	r2, #1
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2328      	movs	r3, #40	; 0x28
 8000726:	2250      	movs	r2, #80	; 0x50
 8000728:	21a5      	movs	r1, #165	; 0xa5
 800072a:	f000 fb0e 	bl	8000d4a <CreateButton>
 800072e:	4602      	mov	r2, r0
 8000730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800073a:	440b      	add	r3, r1
 800073c:	f843 2c84 	str.w	r2, [r3, #-132]
    for( int i = 0; i < 5; ++i ) {
 8000740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000744:	3301      	adds	r3, #1
 8000746:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800074a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800074e:	2b04      	cmp	r3, #4
 8000750:	ddd3      	ble.n	80006fa <main+0x7e>
    }
    for( int i = 5; i < 10; ++i ) {
 8000752:	2305      	movs	r3, #5
 8000754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000758:	e028      	b.n	80007ac <main+0x130>
    	num_but[i] = CreateButton (20 + 90 * (i - 5), 215, 80, 40, nums_str[i], 1);
 800075a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800075e:	3b05      	subs	r3, #5
 8000760:	b29b      	uxth	r3, r3
 8000762:	461a      	mov	r2, r3
 8000764:	0052      	lsls	r2, r2, #1
 8000766:	4413      	add	r3, r2
 8000768:	461a      	mov	r2, r3
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	3314      	adds	r3, #20
 8000774:	b298      	uxth	r0, r3
 8000776:	4a99      	ldr	r2, [pc, #612]	; (80009dc <main+0x360>)
 8000778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800077c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000780:	2201      	movs	r2, #1
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2328      	movs	r3, #40	; 0x28
 8000788:	2250      	movs	r2, #80	; 0x50
 800078a:	21d7      	movs	r1, #215	; 0xd7
 800078c:	f000 fadd 	bl	8000d4a <CreateButton>
 8000790:	4602      	mov	r2, r0
 8000792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800079c:	440b      	add	r3, r1
 800079e:	f843 2c84 	str.w	r2, [r3, #-132]
    for( int i = 5; i < 10; ++i ) {
 80007a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80007a6:	3301      	adds	r3, #1
 80007a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80007ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80007b0:	2b09      	cmp	r3, #9
 80007b2:	ddd2      	ble.n	800075a <main+0xde>
    }


    BUTTON_st *ASCII = CreateButton(10 , 20 , 110, 40, "ASCII", 5);
 80007b4:	2305      	movs	r3, #5
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	4b89      	ldr	r3, [pc, #548]	; (80009e0 <main+0x364>)
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2328      	movs	r3, #40	; 0x28
 80007be:	226e      	movs	r2, #110	; 0x6e
 80007c0:	2114      	movs	r1, #20
 80007c2:	200a      	movs	r0, #10
 80007c4:	f000 fac1 	bl	8000d4a <CreateButton>
 80007c8:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    BUTTON_st *TRS   = CreateButton(10 , 70 , 70 , 40, "TRS"  , 3);
 80007cc:	2303      	movs	r3, #3
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	4b84      	ldr	r3, [pc, #528]	; (80009e4 <main+0x368>)
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2328      	movs	r3, #40	; 0x28
 80007d6:	2246      	movs	r2, #70	; 0x46
 80007d8:	2146      	movs	r1, #70	; 0x46
 80007da:	200a      	movs	r0, #10
 80007dc:	f000 fab5 	bl	8000d4a <CreateButton>
 80007e0:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    BUTTON_st *RCV   = CreateButton(10 , 120, 70 , 40, "RCV"  , 3);
 80007e4:	2303      	movs	r3, #3
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	4b7f      	ldr	r3, [pc, #508]	; (80009e8 <main+0x36c>)
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2328      	movs	r3, #40	; 0x28
 80007ee:	2246      	movs	r2, #70	; 0x46
 80007f0:	2178      	movs	r1, #120	; 0x78
 80007f2:	200a      	movs	r0, #10
 80007f4:	f000 faa9 	bl	8000d4a <CreateButton>
 80007f8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
    BUTTON_st *PRINT = CreateButton(360, 20 , 110, 40, "PRINT", 5);
 80007fc:	2305      	movs	r3, #5
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	4b7a      	ldr	r3, [pc, #488]	; (80009ec <main+0x370>)
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2328      	movs	r3, #40	; 0x28
 8000806:	226e      	movs	r2, #110	; 0x6e
 8000808:	2114      	movs	r1, #20
 800080a:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800080e:	f000 fa9c 	bl	8000d4a <CreateButton>
 8000812:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
    BUTTON_st *SEND  = CreateButton(380, 70 , 90 , 40, "SEND" , 4);
 8000816:	2304      	movs	r3, #4
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	4b75      	ldr	r3, [pc, #468]	; (80009f0 <main+0x374>)
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2328      	movs	r3, #40	; 0x28
 8000820:	225a      	movs	r2, #90	; 0x5a
 8000822:	2146      	movs	r1, #70	; 0x46
 8000824:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8000828:	f000 fa8f 	bl	8000d4a <CreateButton>
 800082c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

    BUTTON_st *all_buttons[15];
    for( int i = 0; i < 10; ++i ) {
 8000830:	2300      	movs	r3, #0
 8000832:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000836:	e01f      	b.n	8000878 <main+0x1fc>
    	all_buttons[i] = num_but[i];
 8000838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000842:	4413      	add	r3, r2
 8000844:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8000848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000852:	440b      	add	r3, r1
 8000854:	f843 2cc0 	str.w	r2, [r3, #-192]
    	DrawButton(all_buttons[i]);
 8000858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000862:	4413      	add	r3, r2
 8000864:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 faa5 	bl	8000db8 <DrawButton>
    for( int i = 0; i < 10; ++i ) {
 800086e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000872:	3301      	adds	r3, #1
 8000874:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800087c:	2b09      	cmp	r3, #9
 800087e:	dddb      	ble.n	8000838 <main+0x1bc>
    }


    	all_buttons[10] = ASCII;
 8000880:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000884:	66bb      	str	r3, [r7, #104]	; 0x68
    	DrawButton(all_buttons[10]);
 8000886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa95 	bl	8000db8 <DrawButton>

    	all_buttons[11] = TRS;
 800088e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000892:	66fb      	str	r3, [r7, #108]	; 0x6c
    	DrawButton(all_buttons[11]);
 8000894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa8e 	bl	8000db8 <DrawButton>

    	all_buttons[12] = RCV;
 800089c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80008a0:	673b      	str	r3, [r7, #112]	; 0x70
    	DrawButton(all_buttons[12]);
 80008a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fa87 	bl	8000db8 <DrawButton>

    	all_buttons[13] = PRINT;
 80008aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80008ae:	677b      	str	r3, [r7, #116]	; 0x74
    	DrawButton(all_buttons[13]);
 80008b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fa80 	bl	8000db8 <DrawButton>

    	all_buttons[14] = SEND;
 80008b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80008bc:	67bb      	str	r3, [r7, #120]	; 0x78
    	DrawButton(all_buttons[14]);
 80008be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fa79 	bl	8000db8 <DrawButton>


    	BSP_LCD_DrawRect(190, 20, 160, 40);
 80008c6:	2328      	movs	r3, #40	; 0x28
 80008c8:	22a0      	movs	r2, #160	; 0xa0
 80008ca:	2114      	movs	r1, #20
 80008cc:	20be      	movs	r0, #190	; 0xbe
 80008ce:	f006 fe2b 	bl	8007528 <BSP_LCD_DrawRect>
    	BSP_LCD_DisplayStringAt(195, 30, (uint8_t *) "CHAR:", LEFT_MODE);
 80008d2:	2303      	movs	r3, #3
 80008d4:	4a47      	ldr	r2, [pc, #284]	; (80009f4 <main+0x378>)
 80008d6:	211e      	movs	r1, #30
 80008d8:	20c3      	movs	r0, #195	; 0xc3
 80008da:	f006 fc9d 	bl	8007218 <BSP_LCD_DisplayStringAt>
    	char ASCII_line[ASCII_SIZE];
    	char TRS_line  [TRS_SIZE  ];
    	char RCV_line  [RCV_SIZE  ];
    	char CHAR_line [CHAR_SIZE ];

    	int cnt_a = 0, cnt_t = 0, cnt_r = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
    	int char_flag = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]

    	ASCII_line[0] = TRS_line[0] = RCV_line[0] = CHAR_line[0] = '\0';
 80008ee:	2300      	movs	r3, #0
 80008f0:	763b      	strb	r3, [r7, #24]
 80008f2:	7e3b      	ldrb	r3, [r7, #24]
 80008f4:	773b      	strb	r3, [r7, #28]
 80008f6:	7f3b      	ldrb	r3, [r7, #28]
 80008f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80008fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000900:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart1,  &rcv_buff, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	493c      	ldr	r1, [pc, #240]	; (80009f8 <main+0x37c>)
 8000908:	483c      	ldr	r0, [pc, #240]	; (80009fc <main+0x380>)
 800090a:	f004 fb75 	bl	8004ff8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ScanScreen
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <main+0x384>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d019      	beq.n	800094a <main+0x2ce>
 8000916:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <main+0x384>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f107 001c 	add.w	r0, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	4938      	ldr	r1, [pc, #224]	; (8000a04 <main+0x388>)
 8000922:	f000 fab0 	bl	8000e86 <My_strcpy>
 8000926:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <main+0x384>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <main+0x384>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000938:	4413      	add	r3, r2
 800093a:	2200      	movs	r2, #0
 800093c:	f803 2ce4 	strb.w	r2, [r3, #-228]
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fd12 	bl	800136e <UpdateRCV>
 800094a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800094e:	4618      	mov	r0, r3
 8000950:	f007 faec 	bl	8007f2c <BSP_TS_GetState>
 8000954:	2032      	movs	r0, #50	; 0x32
 8000956:	f000 ff17 	bl	8001788 <HAL_Delay>
 800095a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0d5      	beq.n	800090e <main+0x292>

	uint16_t X = ts.touchX[0];
 8000962:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8000966:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	uint16_t Y = ts.touchY[0];
 800096a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800096e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc


	ButtonResponse( X, Y, all_buttons, ASCII_line, TRS_line, RCV_line, CHAR_line, &cnt_a, &cnt_t, &cnt_r, &char_flag );
 8000972:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000976:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800097a:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 800097e:	f8b7 00de 	ldrh.w	r0, [r7, #222]	; 0xde
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	9306      	str	r3, [sp, #24]
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	9305      	str	r3, [sp, #20]
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	9304      	str	r3, [sp, #16]
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	9303      	str	r3, [sp, #12]
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	4623      	mov	r3, r4
 80009ae:	f000 fb9b 	bl	80010e8 <ButtonResponse>

	UpdateScreen( all_buttons, ASCII_line, TRS_line, RCV_line, CHAR_line );
 80009b2:	f107 041c 	add.w	r4, r7, #28
 80009b6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80009ba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80009be:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4623      	mov	r3, r4
 80009ca:	f000 fc31 	bl	8001230 <UpdateScreen>

	HAL_Delay(150);
 80009ce:	2096      	movs	r0, #150	; 0x96
 80009d0:	f000 feda 	bl	8001788 <HAL_Delay>
  {
 80009d4:	e79b      	b.n	800090e <main+0x292>
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	20000000 	.word	0x20000000
 80009e0:	080085a0 	.word	0x080085a0
 80009e4:	080085a8 	.word	0x080085a8
 80009e8:	080085ac 	.word	0x080085ac
 80009ec:	080085b0 	.word	0x080085b0
 80009f0:	080085b8 	.word	0x080085b8
 80009f4:	080085c0 	.word	0x080085c0
 80009f8:	20000314 	.word	0x20000314
 80009fc:	20000318 	.word	0x20000318
 8000a00:	200000ec 	.word	0x200000ec
 8000a04:	2000039c 	.word	0x2000039c

08000a08 <HAL_UART_RxCpltCallback>:
  }

  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
		if(rcv_buff == '\r')
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_UART_RxCpltCallback+0x54>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b0d      	cmp	r3, #13
 8000a16:	d10c      	bne.n	8000a32 <HAL_UART_RxCpltCallback+0x2a>
		 {
			rcv_line[count] = '\0';
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_UART_RxCpltCallback+0x58>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <HAL_UART_RxCpltCallback+0x5c>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	54d1      	strb	r1, [r2, r3]

			rcv_flag = count;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_UART_RxCpltCallback+0x58>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_RxCpltCallback+0x60>)
 8000a28:	6013      	str	r3, [r2, #0]

			count = 0;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_UART_RxCpltCallback+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	e00a      	b.n	8000a48 <HAL_UART_RxCpltCallback+0x40>
		 }
		 else
		 {
			 rcv_line[count] = rcv_buff;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_UART_RxCpltCallback+0x58>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <HAL_UART_RxCpltCallback+0x54>)
 8000a38:	7811      	ldrb	r1, [r2, #0]
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_UART_RxCpltCallback+0x5c>)
 8000a3c:	54d1      	strb	r1, [r2, r3]
			 ++count;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_UART_RxCpltCallback+0x58>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_UART_RxCpltCallback+0x58>)
 8000a46:	6013      	str	r3, [r2, #0]
		 }
		 HAL_UART_Receive_IT(&huart1, &rcv_buff, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4904      	ldr	r1, [pc, #16]	; (8000a5c <HAL_UART_RxCpltCallback+0x54>)
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <HAL_UART_RxCpltCallback+0x64>)
 8000a4e:	f004 fad3 	bl	8004ff8 <HAL_UART_Receive_IT>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000314 	.word	0x20000314
 8000a60:	200000e8 	.word	0x200000e8
 8000a64:	2000039c 	.word	0x2000039c
 8000a68:	200000ec 	.word	0x200000ec
 8000a6c:	20000318 	.word	0x20000318

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b4      	sub	sp, #208	; 0xd0
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fcde 	bl	8008440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2284      	movs	r2, #132	; 0x84
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f007 fccf 	bl	8008440 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <SystemClock_Config+0x114>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a37      	ldr	r2, [pc, #220]	; (8000b84 <SystemClock_Config+0x114>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <SystemClock_Config+0x114>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aba:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <SystemClock_Config+0x118>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <SystemClock_Config+0x118>)
 8000ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <SystemClock_Config+0x118>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000aee:	230c      	movs	r3, #12
 8000af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000af4:	23c0      	movs	r3, #192	; 0xc0
 8000af6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 f8a0 	bl	8003c50 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b16:	f000 f913 	bl	8000d40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b1a:	f003 f849 	bl	8003bb0 <HAL_PWREx_EnableOverDrive>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b24:	f000 f90c 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	230f      	movs	r3, #15
 8000b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b4e:	2106      	movs	r1, #6
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fb21 	bl	8004198 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000b5c:	f000 f8f0 	bl	8000d40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fce9 	bl	8004544 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000b78:	f000 f8e2 	bl	8000d40 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	37d0      	adds	r7, #208	; 0xd0
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_CRC_Init+0x3c>)
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <MX_CRC_Init+0x40>)
 8000b94:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_CRC_Init+0x3c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_CRC_Init+0x3c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_CRC_Init+0x3c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_CRC_Init+0x3c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_CRC_Init+0x3c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_CRC_Init+0x3c>)
 8000bb6:	f000 ff1d 	bl	80019f4 <HAL_CRC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000bc0:	f000 f8be 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200002f0 	.word	0x200002f0
 8000bcc:	40023000 	.word	0x40023000

08000bd0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <MX_DMA2D_Init+0x60>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000c06:	f001 fa2f 	bl	8002068 <HAL_DMA2D_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000c10:	f000 f896 	bl	8000d40 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c14:	2101      	movs	r1, #1
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_DMA2D_Init+0x5c>)
 8000c18:	f001 fb84 	bl	8002324 <HAL_DMA2D_ConfigLayer>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000c22:	f000 f88d 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200003ac 	.word	0x200003ac
 8000c30:	4002b000 	.word	0x4002b000

08000c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_USART1_UART_Init+0x5c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c78:	f004 f8dd 	bl	8004e36 <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c82:	f000 f85d 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000318 	.word	0x20000318
 8000c90:	40011000 	.word	0x40011000

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_GPIO_Init+0xa4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	480b      	ldr	r0, [pc, #44]	; (8000d3c <MX_GPIO_Init+0xa8>)
 8000d10:	f001 fde2 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d14:	2301      	movs	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_GPIO_Init+0xa8>)
 8000d2c:	f001 fc28 	bl	8002580 <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40022000 	.word	0x40022000

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>

08000d4a <CreateButton>:

const char  nums_sym[]  = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };



BUTTON_st* CreateButton ( uint16_t x, uint16_t y, uint16_t length, uint16_t height, char *name, unsigned char name_len ) {
 8000d4a:	b590      	push	{r4, r7, lr}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4604      	mov	r4, r0
 8000d52:	4608      	mov	r0, r1
 8000d54:	4611      	mov	r1, r2
 8000d56:	461a      	mov	r2, r3
 8000d58:	4623      	mov	r3, r4
 8000d5a:	80fb      	strh	r3, [r7, #6]
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	80bb      	strh	r3, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
 8000d64:	4613      	mov	r3, r2
 8000d66:	803b      	strh	r3, [r7, #0]
	if( name == NULL )
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <CreateButton+0x28>
		return NULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e01e      	b.n	8000db0 <CreateButton+0x66>

	BUTTON_st *res = (BUTTON_st *) calloc( sizeof(BUTTON_st), 1 );
 8000d72:	2101      	movs	r1, #1
 8000d74:	2010      	movs	r0, #16
 8000d76:	f007 fb31 	bl	80083dc <calloc>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	60fb      	str	r3, [r7, #12]
	if( res == NULL )
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <CreateButton+0x3e>
		return NULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e013      	b.n	8000db0 <CreateButton+0x66>

	res->X = x;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	88fa      	ldrh	r2, [r7, #6]
 8000d8c:	801a      	strh	r2, [r3, #0]
	res->Y = y;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	88ba      	ldrh	r2, [r7, #4]
 8000d92:	805a      	strh	r2, [r3, #2]
	res->length = length;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	809a      	strh	r2, [r3, #4]
	res->height = height;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	883a      	ldrh	r2, [r7, #0]
 8000d9e:	80da      	strh	r2, [r3, #6]
	res->name = name;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6a3a      	ldr	r2, [r7, #32]
 8000da4:	609a      	str	r2, [r3, #8]
	res->name_len = name_len;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000dac:	731a      	strb	r2, [r3, #12]

	return res;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd90      	pop	{r4, r7, pc}

08000db8 <DrawButton>:
		return;

	free(button);
}

void DrawButton ( BUTTON_st *button ) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	uint16_t indent_x =  (button->length - 17 * button->name_len) / 2;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	889b      	ldrh	r3, [r3, #4]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7b1b      	ldrb	r3, [r3, #12]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4613      	mov	r3, r2
 8000dce:	071b      	lsls	r3, r3, #28
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da00      	bge.n	8000dde <DrawButton+0x26>
 8000ddc:	3301      	adds	r3, #1
 8000dde:	105b      	asrs	r3, r3, #1
 8000de0:	81fb      	strh	r3, [r7, #14]
	uint16_t indent_y =  (button->height - 20) / 2;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	88db      	ldrh	r3, [r3, #6]
 8000de6:	3b14      	subs	r3, #20
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da00      	bge.n	8000dee <DrawButton+0x36>
 8000dec:	3301      	adds	r3, #1
 8000dee:	105b      	asrs	r3, r3, #1
 8000df0:	81bb      	strh	r3, [r7, #12]

	 BSP_LCD_DisplayStringAt(button->X + indent_x, button->Y + indent_y, (uint8_t *) button->name, LEFT_MODE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b298      	uxth	r0, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	885a      	ldrh	r2, [r3, #2]
 8000e00:	89bb      	ldrh	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	b299      	uxth	r1, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f006 fa04 	bl	8007218 <BSP_LCD_DisplayStringAt>
	 BSP_LCD_DrawRect(button->X, button->Y, button->length, button->height);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	8818      	ldrh	r0, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	8859      	ldrh	r1, [r3, #2]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	889a      	ldrh	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	88db      	ldrh	r3, [r3, #6]
 8000e20:	f006 fb82 	bl	8007528 <BSP_LCD_DrawRect>

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <CheckButton>:

int CheckButton ( BUTTON_st *button, uint16_t x, uint16_t y ) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	803b      	strh	r3, [r7, #0]


	if((x >= button->X && x <= (button->X + button->length)) && (y >= button->Y && y <= (button->Y + button->height)))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	887a      	ldrh	r2, [r7, #2]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d318      	bcc.n	8000e78 <CheckButton+0x4c>
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	889b      	ldrh	r3, [r3, #4]
 8000e52:	440b      	add	r3, r1
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dc0f      	bgt.n	8000e78 <CheckButton+0x4c>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	885b      	ldrh	r3, [r3, #2]
 8000e5c:	883a      	ldrh	r2, [r7, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d30a      	bcc.n	8000e78 <CheckButton+0x4c>
 8000e62:	883a      	ldrh	r2, [r7, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	885b      	ldrh	r3, [r3, #2]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	88db      	ldrh	r3, [r3, #6]
 8000e6e:	440b      	add	r3, r1
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dc01      	bgt.n	8000e78 <CheckButton+0x4c>
		return 1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <CheckButton+0x4e>
	else
		return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <My_strcpy>:

void My_strcpy (char *dst, char *src, int from, int to) {
 8000e86:	b480      	push	{r7}
 8000e88:	b087      	sub	sp, #28
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	603b      	str	r3, [r7, #0]
	if( dst == NULL || src == NULL || from < 0 || to < 0 || to < from)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d01f      	beq.n	8000eda <My_strcpy+0x54>
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01c      	beq.n	8000eda <My_strcpy+0x54>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db19      	blt.n	8000eda <My_strcpy+0x54>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db16      	blt.n	8000eda <My_strcpy+0x54>
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	db12      	blt.n	8000eda <My_strcpy+0x54>
		return;

	for( int i = from; i < to; ++i )
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e00a      	b.n	8000ed0 <My_strcpy+0x4a>
		dst[i] = src[i];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	441a      	add	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	68f9      	ldr	r1, [r7, #12]
 8000ec4:	440b      	add	r3, r1
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	701a      	strb	r2, [r3, #0]
	for( int i = from; i < to; ++i )
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf0      	blt.n	8000eba <My_strcpy+0x34>

	return;
 8000ed8:	e000      	b.n	8000edc <My_strcpy+0x56>
		return;
 8000eda:	bf00      	nop
}
 8000edc:	371c      	adds	r7, #28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <deg>:

int deg( int base, int deg ) {
 8000ee6:	b480      	push	{r7}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
	if( deg < 0 )
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	da01      	bge.n	8000efa <deg+0x14>
		return 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e011      	b.n	8000f1e <deg+0x38>

	int res = 1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
	for( int i = 0; i < deg; ++i )
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	e007      	b.n	8000f14 <deg+0x2e>
		res *= base;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	fb02 f303 	mul.w	r3, r2, r3
 8000f0c:	60fb      	str	r3, [r7, #12]
	for( int i = 0; i < deg; ++i )
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf3      	blt.n	8000f04 <deg+0x1e>

	return res;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <str2num>:

int str2num (char *string, int size) {
 8000f2a:	b590      	push	{r4, r7, lr}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
	if( string == NULL )
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <str2num+0x16>
		return -1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e021      	b.n	8000f84 <str2num+0x5a>

	unsigned int res = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
	for( int i = size - 1; i >= 0; --i )
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	e017      	b.n	8000f7c <str2num+0x52>
		res += ((string[i] - '0') * deg(10, size - i - 1));
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	4619      	mov	r1, r3
 8000f62:	200a      	movs	r0, #10
 8000f64:	f7ff ffbf 	bl	8000ee6 <deg>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	fb03 f304 	mul.w	r3, r3, r4
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
	for( int i = size - 1; i >= 0; --i )
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dae4      	bge.n	8000f4c <str2num+0x22>

	return res;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <DrawWhiteRect>:

void DrawWhiteRect (uint16_t x, uint16_t y, uint16_t length, uint16_t height) {
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4604      	mov	r4, r0
 8000f94:	4608      	mov	r0, r1
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	80fb      	strh	r3, [r7, #6]
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80bb      	strh	r3, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	807b      	strh	r3, [r7, #2]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	803b      	strh	r3, [r7, #0]

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000faa:	f04f 30ff 	mov.w	r0, #4294967295
 8000fae:	f006 f895 	bl	80070dc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, length, height);
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	88b9      	ldrh	r1, [r7, #4]
 8000fb8:	88f8      	ldrh	r0, [r7, #6]
 8000fba:	f006 fb2f 	bl	800761c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fbe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fc2:	f006 f88b 	bl	80070dc <BSP_LCD_SetTextColor>

	return;
 8000fc6:	bf00      	nop
}
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}

08000fce <PrintInTRS>:
void PrintInTRS( char *TRS_line, char *CHAR_line, int *cnt_t, int *char_flag ) {
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	603b      	str	r3, [r7, #0]
	if(TRS_line == NULL || CHAR_line == NULL)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d025      	beq.n	800102e <PrintInTRS+0x60>
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d022      	beq.n	800102e <PrintInTRS+0x60>
		return;

	if( (*char_flag) == 1 && (*cnt_t < TRS_SIZE - 1) ) {
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d120      	bne.n	8001032 <PrintInTRS+0x64>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b0c      	cmp	r3, #12
 8000ff6:	dc1c      	bgt.n	8001032 <PrintInTRS+0x64>
		TRS_line[(*cnt_t)] = CHAR_line[0];
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	701a      	strb	r2, [r3, #0]
		CHAR_line[0] = '\0';
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]

		++(*cnt_t);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]
		(*char_flag) = 0;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]

		TRS_line[(*cnt_t)] = '\0';
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
	}

	return;
 800102c:	e001      	b.n	8001032 <PrintInTRS+0x64>
		return;
 800102e:	bf00      	nop
 8001030:	e000      	b.n	8001034 <PrintInTRS+0x66>
	return;
 8001032:	bf00      	nop
}
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PreConvert>:


void PreConvert ( char *ASCII_line, char *CHAR_line, int *char_flag ) {
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
	char symbol = '\0';
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
	int intermed = str2num(ASCII_line, 3);
 800104e:	2103      	movs	r1, #3
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff ff6a 	bl	8000f2a <str2num>
 8001056:	6138      	str	r0, [r7, #16]

	if( intermed >= 0 && intermed <= 127 )
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db04      	blt.n	8001068 <PreConvert+0x2a>
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b7f      	cmp	r3, #127	; 0x7f
 8001062:	dc01      	bgt.n	8001068 <PreConvert+0x2a>
		symbol = intermed;
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	75fb      	strb	r3, [r7, #23]

	if( symbol >= 32 && symbol <= 126 ) {
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b1f      	cmp	r3, #31
 800106c:	d90d      	bls.n	800108a <PreConvert+0x4c>
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	2b7e      	cmp	r3, #126	; 0x7e
 8001072:	d80a      	bhi.n	800108a <PreConvert+0x4c>
		CHAR_line[0] = symbol;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	7dfa      	ldrb	r2, [r7, #23]
 8001078:	701a      	strb	r2, [r3, #0]
		CHAR_line[1] = '\0'  ;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]

		(*char_flag) = 1;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e00e      	b.n	80010a8 <PreConvert+0x6a>
	}

	else {
		CHAR_line[0] = 'E' ;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2245      	movs	r2, #69	; 0x45
 800108e:	701a      	strb	r2, [r3, #0]
		CHAR_line[1] = 'R' ;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	3301      	adds	r3, #1
 8001094:	2252      	movs	r2, #82	; 0x52
 8001096:	701a      	strb	r2, [r3, #0]
		CHAR_line[2] = 'R' ;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3302      	adds	r3, #2
 800109c:	2252      	movs	r2, #82	; 0x52
 800109e:	701a      	strb	r2, [r3, #0]
		CHAR_line[3] = '\0';
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3303      	adds	r3, #3
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	}

	return;
 80010a8:	bf00      	nop
}
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <DeleteSymbol>:

void DeleteSymbol ( char *line, int *line_iter ) {
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]

	int i = (*line_iter);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60fb      	str	r3, [r7, #12]
	if( i > 0 ) {
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dd07      	ble.n	80010d6 <DeleteSymbol+0x26>
		--i;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
		line[i] = '\0';
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	}

	(*line_iter) = i;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	601a      	str	r2, [r3, #0]

	return;
 80010dc:	bf00      	nop
}
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <ButtonResponse>:

void ButtonResponse ( uint16_t x, uint16_t y, BUTTON_st **but_array, char *ASCII_line, char *TRS_line, char *RCV_line, char *CHAR_line, int *cnt_a, int *cnt_t, int *cnt_r, int *char_flag ) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60ba      	str	r2, [r7, #8]
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4603      	mov	r3, r0
 80010f4:	81fb      	strh	r3, [r7, #14]
 80010f6:	460b      	mov	r3, r1
 80010f8:	81bb      	strh	r3, [r7, #12]

	if( but_array == NULL )
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8090 	beq.w	8001222 <ButtonResponse+0x13a>
		return;

	int i_a = (*cnt_a), i_t = (*cnt_t), i_r = (*cnt_r);
 8001102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
	int i = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
	for( i = 0; i < 15; ++i ) {
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	e00f      	b.n	800113e <ButtonResponse+0x56>
		if( CheckButton(but_array[i], x, y) )
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	89ba      	ldrh	r2, [r7, #12]
 800112a:	89f9      	ldrh	r1, [r7, #14]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe7d 	bl	8000e2c <CheckButton>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <ButtonResponse+0x5e>
	for( i = 0; i < 15; ++i ) {
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3301      	adds	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	2b0e      	cmp	r3, #14
 8001142:	ddec      	ble.n	800111e <ButtonResponse+0x36>
 8001144:	e000      	b.n	8001148 <ButtonResponse+0x60>
			break;
 8001146:	bf00      	nop
	}

	if( i < 10 && i >= 0 ) {
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b09      	cmp	r3, #9
 800114c:	dc20      	bgt.n	8001190 <ButtonResponse+0xa8>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db1d      	blt.n	8001190 <ButtonResponse+0xa8>
		if(i_a < ASCII_SIZE - 1) {
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b02      	cmp	r3, #2
 8001158:	dc0b      	bgt.n	8001172 <ButtonResponse+0x8a>
			ASCII_line[i_a] = nums_sym[i];
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4932      	ldr	r1, [pc, #200]	; (800122c <ButtonResponse+0x144>)
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	440a      	add	r2, r1
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
			++i_a;
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	3301      	adds	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
		}

		if(i_a == ASCII_SIZE - 1)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d104      	bne.n	8001182 <ButtonResponse+0x9a>
			PreConvert( ASCII_line, CHAR_line, char_flag );
 8001178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800117a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff5e 	bl	800103e <PreConvert>

		ASCII_line[i_a] = '\0';
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e03e      	b.n	800120e <ButtonResponse+0x126>
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	3b0a      	subs	r3, #10
 8001194:	2b04      	cmp	r3, #4
 8001196:	d839      	bhi.n	800120c <ButtonResponse+0x124>
 8001198:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <ButtonResponse+0xb8>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011b5 	.word	0x080011b5
 80011a4:	080011c9 	.word	0x080011c9
 80011a8:	080011d7 	.word	0x080011d7
 80011ac:	080011e5 	.word	0x080011e5
 80011b0:	080011ff 	.word	0x080011ff
	}

	else {
		switch(i) {
			case 10:
				DeleteSymbol(ASCII_line, &i_a);
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4619      	mov	r1, r3
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff78 	bl	80010b0 <DeleteSymbol>
				CHAR_line[0] = '\0';
 80011c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
				break;
 80011c6:	e022      	b.n	800120e <ButtonResponse+0x126>

			case 11:
				DeleteSymbol(TRS_line  , &i_t);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011d0:	f7ff ff6e 	bl	80010b0 <DeleteSymbol>
				break;
 80011d4:	e01b      	b.n	800120e <ButtonResponse+0x126>

			case 12:
				DeleteSymbol(RCV_line  , &i_r);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4619      	mov	r1, r3
 80011dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011de:	f7ff ff67 	bl	80010b0 <DeleteSymbol>
				break;
 80011e2:	e014      	b.n	800120e <ButtonResponse+0x126>

			case 13:
				PrintInTRS( TRS_line, CHAR_line, &i_t, char_flag );
 80011e4:	f107 0214 	add.w	r2, r7, #20
 80011e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011ee:	f7ff feee 	bl	8000fce <PrintInTRS>
				ASCII_line[0] = '\0';
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
				i_a = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
				break;
 80011fc:	e007      	b.n	800120e <ButtonResponse+0x126>

			case 14:
				SendData(TRS_line, &i_t);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001206:	f7ff f9e5 	bl	80005d4 <SendData>
				break;
 800120a:	e000      	b.n	800120e <ButtonResponse+0x126>

			default:
				break;
 800120c:	bf00      	nop
		}
	}

	(*cnt_a) = i_a;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001212:	601a      	str	r2, [r3, #0]
	(*cnt_t) = i_t;
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001218:	601a      	str	r2, [r3, #0]
	(*cnt_r) = i_r;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800121e:	601a      	str	r2, [r3, #0]

	return;
 8001220:	e000      	b.n	8001224 <ButtonResponse+0x13c>
		return;
 8001222:	bf00      	nop

}
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	080085c8 	.word	0x080085c8

08001230 <UpdateScreen>:

void UpdateScreen( BUTTON_st **but_array, char *ASCII_line, char *TRS_line, char *RCV_line, char *CHAR_line ) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	603b      	str	r3, [r7, #0]

	DrawWhiteRect(but_array[10]->X + but_array[10]->length + 5, but_array[10]->Y + 10, 65 , 40);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3328      	adds	r3, #40	; 0x28
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	881a      	ldrh	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3328      	adds	r3, #40	; 0x28
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	889b      	ldrh	r3, [r3, #4]
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	3305      	adds	r3, #5
 8001254:	b298      	uxth	r0, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3328      	adds	r3, #40	; 0x28
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	885b      	ldrh	r3, [r3, #2]
 800125e:	330a      	adds	r3, #10
 8001260:	b299      	uxth	r1, r3
 8001262:	2328      	movs	r3, #40	; 0x28
 8001264:	2241      	movs	r2, #65	; 0x41
 8001266:	f7ff fe91 	bl	8000f8c <DrawWhiteRect>
	BSP_LCD_DisplayStringAt(but_array[10]->X + but_array[10]->length + 5, but_array[10]->Y + 10, (uint8_t *) ASCII_line, LEFT_MODE);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3328      	adds	r3, #40	; 0x28
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3328      	adds	r3, #40	; 0x28
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	889b      	ldrh	r3, [r3, #4]
 800127a:	4413      	add	r3, r2
 800127c:	b29b      	uxth	r3, r3
 800127e:	3305      	adds	r3, #5
 8001280:	b298      	uxth	r0, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3328      	adds	r3, #40	; 0x28
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	885b      	ldrh	r3, [r3, #2]
 800128a:	330a      	adds	r3, #10
 800128c:	b299      	uxth	r1, r3
 800128e:	2303      	movs	r3, #3
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	f005 ffc1 	bl	8007218 <BSP_LCD_DisplayStringAt>

	DrawWhiteRect(but_array[11]->X + but_array[11]->length + 5, but_array[11]->Y + 10, 280 , 40);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	332c      	adds	r3, #44	; 0x2c
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	881a      	ldrh	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	332c      	adds	r3, #44	; 0x2c
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3305      	adds	r3, #5
 80012ac:	b298      	uxth	r0, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	332c      	adds	r3, #44	; 0x2c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	330a      	adds	r3, #10
 80012b8:	b299      	uxth	r1, r3
 80012ba:	2328      	movs	r3, #40	; 0x28
 80012bc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80012c0:	f7ff fe64 	bl	8000f8c <DrawWhiteRect>
	BSP_LCD_DisplayStringAt(but_array[11]->X + but_array[11]->length + 5, but_array[11]->Y + 10, (uint8_t *) TRS_line, LEFT_MODE);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	332c      	adds	r3, #44	; 0x2c
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	881a      	ldrh	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	332c      	adds	r3, #44	; 0x2c
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	889b      	ldrh	r3, [r3, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3305      	adds	r3, #5
 80012da:	b298      	uxth	r0, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	332c      	adds	r3, #44	; 0x2c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	885b      	ldrh	r3, [r3, #2]
 80012e4:	330a      	adds	r3, #10
 80012e6:	b299      	uxth	r1, r3
 80012e8:	2303      	movs	r3, #3
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	f005 ff94 	bl	8007218 <BSP_LCD_DisplayStringAt>

	DrawWhiteRect(but_array[12]->X + but_array[12]->length + 5, but_array[12]->Y + 5, 280 , 40);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3330      	adds	r3, #48	; 0x30
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3330      	adds	r3, #48	; 0x30
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	4413      	add	r3, r2
 8001302:	b29b      	uxth	r3, r3
 8001304:	3305      	adds	r3, #5
 8001306:	b298      	uxth	r0, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3330      	adds	r3, #48	; 0x30
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	885b      	ldrh	r3, [r3, #2]
 8001310:	3305      	adds	r3, #5
 8001312:	b299      	uxth	r1, r3
 8001314:	2328      	movs	r3, #40	; 0x28
 8001316:	f44f 728c 	mov.w	r2, #280	; 0x118
 800131a:	f7ff fe37 	bl	8000f8c <DrawWhiteRect>
	BSP_LCD_DisplayStringAt(but_array[12]->X + but_array[12]->length + 5, but_array[12]->Y + 5, (uint8_t *) RCV_line, LEFT_MODE);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3330      	adds	r3, #48	; 0x30
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	881a      	ldrh	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3330      	adds	r3, #48	; 0x30
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3305      	adds	r3, #5
 8001334:	b298      	uxth	r0, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3330      	adds	r3, #48	; 0x30
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	3305      	adds	r3, #5
 8001340:	b299      	uxth	r1, r3
 8001342:	2303      	movs	r3, #3
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	f005 ff67 	bl	8007218 <BSP_LCD_DisplayStringAt>

	DrawWhiteRect(290, 30, 60, 25);
 800134a:	2319      	movs	r3, #25
 800134c:	223c      	movs	r2, #60	; 0x3c
 800134e:	211e      	movs	r1, #30
 8001350:	f44f 7091 	mov.w	r0, #290	; 0x122
 8001354:	f7ff fe1a 	bl	8000f8c <DrawWhiteRect>
	BSP_LCD_DisplayStringAt(290, 30, (uint8_t *) CHAR_line, LEFT_MODE);
 8001358:	2303      	movs	r3, #3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	211e      	movs	r1, #30
 800135e:	f44f 7091 	mov.w	r0, #290	; 0x122
 8001362:	f005 ff59 	bl	8007218 <BSP_LCD_DisplayStringAt>

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <UpdateRCV>:

void UpdateRCV ( char *RCV_line ) {
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	DrawWhiteRect(85, 125, 280 , 40);
 8001376:	2328      	movs	r3, #40	; 0x28
 8001378:	f44f 728c 	mov.w	r2, #280	; 0x118
 800137c:	217d      	movs	r1, #125	; 0x7d
 800137e:	2055      	movs	r0, #85	; 0x55
 8001380:	f7ff fe04 	bl	8000f8c <DrawWhiteRect>
	BSP_LCD_DisplayStringAt(85, 125, (uint8_t *) RCV_line, LEFT_MODE);
 8001384:	2303      	movs	r3, #3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	217d      	movs	r1, #125	; 0x7d
 800138a:	2055      	movs	r0, #85	; 0x55
 800138c:	f005 ff44 	bl	8007218 <BSP_LCD_DisplayStringAt>

}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_MspInit+0x50>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_MspInit+0x50>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_MspInit+0x50>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_MspInit+0x50>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_MspInit+0x50>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x50>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2005      	movs	r0, #5
 80013d4:	f000 fad7 	bl	8001986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013d8:	2005      	movs	r0, #5
 80013da:	f000 faf0 	bl	80019be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_CRC_MspInit+0x38>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10b      	bne.n	8001416 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_CRC_MspInit+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_CRC_MspInit+0x3c>)
 8001404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_CRC_MspInit+0x3c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023000 	.word	0x40023000
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_DMA2D_MspInit+0x38>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d10b      	bne.n	8001456 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_DMA2D_MspInit+0x3c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <HAL_DMA2D_MspInit+0x3c>)
 8001444:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_DMA2D_MspInit+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	4002b000 	.word	0x4002b000
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_UART_MspInit+0xc4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d14c      	bne.n	8001528 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800148e:	4b29      	ldr	r3, [pc, #164]	; (8001534 <HAL_UART_MspInit+0xc8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a28      	ldr	r2, [pc, #160]	; (8001534 <HAL_UART_MspInit+0xc8>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_UART_MspInit+0xc8>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_UART_MspInit+0xc8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_UART_MspInit+0xc8>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_UART_MspInit+0xc8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_UART_MspInit+0xc8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <HAL_UART_MspInit+0xc8>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_UART_MspInit+0xc8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e6:	2307      	movs	r3, #7
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <HAL_UART_MspInit+0xcc>)
 80014f2:	f001 f845 	bl	8002580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001508:	2307      	movs	r3, #7
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	480a      	ldr	r0, [pc, #40]	; (800153c <HAL_UART_MspInit+0xd0>)
 8001514:	f001 f834 	bl	8002580 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2025      	movs	r0, #37	; 0x25
 800151e:	f000 fa32 	bl	8001986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001522:	2025      	movs	r0, #37	; 0x25
 8001524:	f000 fa4b 	bl	80019be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40011000 	.word	0x40011000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400
 800153c:	40020000 	.word	0x40020000

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f000 f8dc 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <USART1_IRQHandler+0x10>)
 80015aa:	f003 fd73 	bl	8005094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000318 	.word	0x20000318

080015b8 <LTDC_IRQHandler>:

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <LTDC_IRQHandler+0x10>)
 80015be:	f002 f841 	bl	8003644 <HAL_LTDC_IRQHandler>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200003f0 	.word	0x200003f0

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f006 fef6 	bl	80083ec <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20050000 	.word	0x20050000
 800162c:	00000400 	.word	0x00000400
 8001630:	200000f0 	.word	0x200000f0
 8001634:	200004e0 	.word	0x200004e0

08001638 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f006 feb5 	bl	80083f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7fe fff5 	bl	800067c <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80016a0:	0800a0bc 	.word	0x0800a0bc
  ldr r2, =_sbss
 80016a4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80016a8:	200004dc 	.word	0x200004dc

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_Init+0x34>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_Init+0x34>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x34>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x34>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f94f 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fe5e 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f967 	bl	80019da <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f92f 	bl	8001986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000028 	.word	0x20000028
 8001740:	20000030 	.word	0x20000030
 8001744:	2000002c 	.word	0x2000002c

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000030 	.word	0x20000030
 800176c:	200003ec 	.word	0x200003ec

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	200003ec 	.word	0x200003ec

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff ffee 	bl	8001770 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_Delay+0x44>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffde 	bl	8001770 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000030 	.word	0x20000030

080017d0 <__NVIC_SetPriorityGrouping>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <__NVIC_SetPriorityGrouping+0x40>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x40>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00
 8001814:	05fa0000 	.word	0x05fa0000

08001818 <__NVIC_GetPriorityGrouping>:
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_EnableIRQ>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4907      	ldr	r1, [pc, #28]	; (800186c <__NVIC_EnableIRQ+0x38>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193c:	d301      	bcc.n	8001942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193e:	2301      	movs	r3, #1
 8001940:	e00f      	b.n	8001962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <SysTick_Config+0x40>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194a:	210f      	movs	r1, #15
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f7ff ff8e 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <SysTick_Config+0x40>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <SysTick_Config+0x40>)
 800195c:	2207      	movs	r2, #7
 800195e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff29 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001998:	f7ff ff3e 	bl	8001818 <__NVIC_GetPriorityGrouping>
 800199c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ff8e 	bl	80018c4 <NVIC_EncodePriority>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff31 	bl	8001834 <__NVIC_EnableIRQ>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ffa2 	bl	800192c <SysTick_Config>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e054      	b.n	8001ab0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7f5b      	ldrb	r3, [r3, #29]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fce8 	bl	80013ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	791b      	ldrb	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10c      	bne.n	8001a44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <HAL_CRC_Init+0xc4>)
 8001a30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0218 	bic.w	r2, r2, #24
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	e00c      	b.n	8001a5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f834 	bl	8001abc <HAL_CRCEx_Polynomial_Set>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e028      	b.n	8001ab0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	795b      	ldrb	r3, [r3, #5]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	e004      	b.n	8001a7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6912      	ldr	r2, [r2, #16]
 8001a7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	04c11db7 	.word	0x04c11db7

08001abc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001acc:	231f      	movs	r3, #31
 8001ace:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001ad0:	bf00      	nop
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	613a      	str	r2, [r7, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <HAL_CRCEx_Polynomial_Set+0x34>
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_CRCEx_Polynomial_Set+0x16>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b18      	cmp	r3, #24
 8001af4:	d846      	bhi.n	8001b84 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001af6:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <HAL_CRCEx_Polynomial_Set+0x40>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b8b 	.word	0x08001b8b
 8001b00:	08001b85 	.word	0x08001b85
 8001b04:	08001b85 	.word	0x08001b85
 8001b08:	08001b85 	.word	0x08001b85
 8001b0c:	08001b85 	.word	0x08001b85
 8001b10:	08001b85 	.word	0x08001b85
 8001b14:	08001b85 	.word	0x08001b85
 8001b18:	08001b85 	.word	0x08001b85
 8001b1c:	08001b79 	.word	0x08001b79
 8001b20:	08001b85 	.word	0x08001b85
 8001b24:	08001b85 	.word	0x08001b85
 8001b28:	08001b85 	.word	0x08001b85
 8001b2c:	08001b85 	.word	0x08001b85
 8001b30:	08001b85 	.word	0x08001b85
 8001b34:	08001b85 	.word	0x08001b85
 8001b38:	08001b85 	.word	0x08001b85
 8001b3c:	08001b6d 	.word	0x08001b6d
 8001b40:	08001b85 	.word	0x08001b85
 8001b44:	08001b85 	.word	0x08001b85
 8001b48:	08001b85 	.word	0x08001b85
 8001b4c:	08001b85 	.word	0x08001b85
 8001b50:	08001b85 	.word	0x08001b85
 8001b54:	08001b85 	.word	0x08001b85
 8001b58:	08001b85 	.word	0x08001b85
 8001b5c:	08001b61 	.word	0x08001b61
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d913      	bls.n	8001b8e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b6a:	e010      	b.n	8001b8e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b07      	cmp	r3, #7
 8001b70:	d90f      	bls.n	8001b92 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b76:	e00c      	b.n	8001b92 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	d90b      	bls.n	8001b96 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b82:	e008      	b.n	8001b96 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	75fb      	strb	r3, [r7, #23]
      break;
 8001b88:	e006      	b.n	8001b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e004      	b.n	8001b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b8e:	bf00      	nop
 8001b90:	e002      	b.n	8001b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b92:	bf00      	nop
 8001b94:	e000      	b.n	8001b98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b96:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10d      	bne.n	8001bba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 0118 	bic.w	r1, r3, #24
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fdcc 	bl	8001770 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e099      	b.n	8001d18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c04:	e00f      	b.n	8001c26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c06:	f7ff fdb3 	bl	8001770 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d908      	bls.n	8001c26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e078      	b.n	8001d18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e8      	bne.n	8001c06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <HAL_DMA_Init+0x158>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d107      	bne.n	8001c90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f023 0307 	bic.w	r3, r3, #7
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d117      	bne.n	8001cea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f94f 	bl	8001f70 <DMA_CheckFifoParam>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e016      	b.n	8001d18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f906 	bl	8001f04 <DMA_CalcBaseAndBitshift>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	223f      	movs	r2, #63	; 0x3f
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	f010803f 	.word	0xf010803f

08001d24 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e050      	b.n	8001dd8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d101      	bne.n	8001d46 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001d42:	2302      	movs	r3, #2
 8001d44:	e048      	b.n	8001dd8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2221      	movs	r2, #33	; 0x21
 8001d84:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8bc 	bl	8001f04 <DMA_CalcBaseAndBitshift>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	223f      	movs	r2, #63	; 0x3f
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dee:	f7ff fcbf 	bl	8001770 <HAL_GetTick>
 8001df2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d008      	beq.n	8001e12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e052      	b.n	8001eb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0216 	bic.w	r2, r2, #22
 8001e20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d103      	bne.n	8001e42 <HAL_DMA_Abort+0x62>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0208 	bic.w	r2, r2, #8
 8001e50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0201 	bic.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e62:	e013      	b.n	8001e8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e64:	f7ff fc84 	bl	8001770 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d90c      	bls.n	8001e8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2220      	movs	r2, #32
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e015      	b.n	8001eb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1e4      	bne.n	8001e64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	223f      	movs	r2, #63	; 0x3f
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d004      	beq.n	8001ede <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00c      	b.n	8001ef8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3b10      	subs	r3, #16
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <DMA_CalcBaseAndBitshift+0x60>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <DMA_CalcBaseAndBitshift+0x64>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d908      	bls.n	8001f44 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <DMA_CalcBaseAndBitshift+0x68>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	1d1a      	adds	r2, r3, #4
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	659a      	str	r2, [r3, #88]	; 0x58
 8001f42:	e006      	b.n	8001f52 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <DMA_CalcBaseAndBitshift+0x68>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	aaaaaaab 	.word	0xaaaaaaab
 8001f68:	080085ec 	.word	0x080085ec
 8001f6c:	fffffc00 	.word	0xfffffc00

08001f70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d11f      	bne.n	8001fca <DMA_CheckFifoParam+0x5a>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d856      	bhi.n	800203e <DMA_CheckFifoParam+0xce>
 8001f90:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <DMA_CheckFifoParam+0x28>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001fa9 	.word	0x08001fa9
 8001f9c:	08001fbb 	.word	0x08001fbb
 8001fa0:	08001fa9 	.word	0x08001fa9
 8001fa4:	0800203f 	.word	0x0800203f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d046      	beq.n	8002042 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb8:	e043      	b.n	8002042 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fc2:	d140      	bne.n	8002046 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc8:	e03d      	b.n	8002046 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd2:	d121      	bne.n	8002018 <DMA_CheckFifoParam+0xa8>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d837      	bhi.n	800204a <DMA_CheckFifoParam+0xda>
 8001fda:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <DMA_CheckFifoParam+0x70>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	08001ff1 	.word	0x08001ff1
 8001fe4:	08001ff7 	.word	0x08001ff7
 8001fe8:	08001ff1 	.word	0x08001ff1
 8001fec:	08002009 	.word	0x08002009
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff4:	e030      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d025      	beq.n	800204e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002006:	e022      	b.n	800204e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002010:	d11f      	bne.n	8002052 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002016:	e01c      	b.n	8002052 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d903      	bls.n	8002026 <DMA_CheckFifoParam+0xb6>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d003      	beq.n	800202c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002024:	e018      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
      break;
 800202a:	e015      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00e      	beq.n	8002056 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      break;
 800203c:	e00b      	b.n	8002056 <DMA_CheckFifoParam+0xe6>
      break;
 800203e:	bf00      	nop
 8002040:	e00a      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
 8002044:	e008      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 8002046:	bf00      	nop
 8002048:	e006      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e004      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 800204e:	bf00      	nop
 8002050:	e002      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;   
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
    }
  } 
  
  return status; 
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop

08002068 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e039      	b.n	80020ee <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff f9cc 	bl	800142c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	f023 0107 	bic.w	r1, r3, #7
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_DMA2D_Init+0x90>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68d1      	ldr	r1, [r2, #12]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	430b      	orrs	r3, r1
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	ffffc000 	.word	0xffffc000

080020fc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_DMA2D_Start+0x1c>
 8002114:	2302      	movs	r3, #2
 8002116:	e018      	b.n	800214a <HAL_DMA2D_Start+0x4e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f988 	bl	8002448 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d056      	beq.n	800221c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800216e:	f7ff faff 	bl	8001770 <HAL_GetTick>
 8002172:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002174:	e04b      	b.n	800220e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2221      	movs	r2, #33	; 0x21
 80021ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2204      	movs	r2, #4
 80021c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0a5      	b.n	800231c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d01a      	beq.n	800220e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021d8:	f7ff faca 	bl	8001770 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d302      	bcc.n	80021ee <HAL_DMA2D_PollForTransfer+0x9c>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	f043 0220 	orr.w	r2, r3, #32
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2203      	movs	r2, #3
 80021fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e086      	b.n	800231c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ac      	beq.n	8002176 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d061      	beq.n	8002302 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800223e:	f7ff fa97 	bl	8001770 <HAL_GetTick>
 8002242:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002244:	e056      	b.n	80022f4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02e      	beq.n	80022b6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	f043 0204 	orr.w	r2, r3, #4
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	f043 0202 	orr.w	r2, r3, #2
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2229      	movs	r2, #41	; 0x29
 80022a0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e032      	b.n	800231c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d01a      	beq.n	80022f4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7ff fa57 	bl	8001770 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <HAL_DMA2D_PollForTransfer+0x182>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10f      	bne.n	80022f4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2203      	movs	r2, #3
 80022e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e013      	b.n	800231c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0a1      	beq.n	8002246 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2212      	movs	r2, #18
 8002308:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_DMA2D_ConfigLayer+0x20>
 8002340:	2302      	movs	r3, #2
 8002342:	e079      	b.n	8002438 <HAL_DMA2D_ConfigLayer+0x114>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	3318      	adds	r3, #24
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800236e:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_DMA2D_ConfigLayer+0x120>)
 8002370:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b0a      	cmp	r3, #10
 8002378:	d003      	beq.n	8002382 <HAL_DMA2D_ConfigLayer+0x5e>
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b09      	cmp	r3, #9
 8002380:	d107      	bne.n	8002392 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e005      	b.n	800239e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	061b      	lsls	r3, r3, #24
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d120      	bne.n	80023e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	ea02 0103 	and.w	r1, r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b0a      	cmp	r3, #10
 80023cc:	d003      	beq.n	80023d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	d127      	bne.n	8002426 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
 80023e4:	e01f      	b.n	8002426 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	ea02 0103 	and.w	r1, r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b0a      	cmp	r3, #10
 800240e:	d003      	beq.n	8002418 <HAL_DMA2D_ConfigLayer+0xf4>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b09      	cmp	r3, #9
 8002416:	d106      	bne.n	8002426 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002424:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	ff03000f 	.word	0xff03000f

08002448 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002448:	b480      	push	{r7}
 800244a:	b08b      	sub	sp, #44	; 0x2c
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	041a      	lsls	r2, r3, #16
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	431a      	orrs	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002480:	d174      	bne.n	800256c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002488:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002490:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002498:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d108      	bne.n	80024ba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
 80024b8:	e053      	b.n	8002562 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d106      	bne.n	80024d0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	e048      	b.n	8002562 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d111      	bne.n	80024fc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	0cdb      	lsrs	r3, r3, #19
 80024dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	0a9b      	lsrs	r3, r3, #10
 80024e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	02db      	lsls	r3, r3, #11
 80024f2:	4313      	orrs	r3, r2
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	e032      	b.n	8002562 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d117      	bne.n	8002534 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	0fdb      	lsrs	r3, r3, #31
 8002508:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	0cdb      	lsrs	r3, r3, #19
 800250e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	0adb      	lsrs	r3, r3, #11
 8002514:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	029b      	lsls	r3, r3, #10
 8002524:	431a      	orrs	r2, r3
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	03db      	lsls	r3, r3, #15
 800252a:	4313      	orrs	r3, r2
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
 8002532:	e016      	b.n	8002562 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	0f1b      	lsrs	r3, r3, #28
 8002538:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	0d1b      	lsrs	r3, r3, #20
 800253e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	0b1b      	lsrs	r3, r3, #12
 8002544:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	011a      	lsls	r2, r3, #4
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	431a      	orrs	r2, r3
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	031b      	lsls	r3, r3, #12
 800255a:	4313      	orrs	r3, r2
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800256a:	e003      	b.n	8002574 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	60da      	str	r2, [r3, #12]
}
 8002574:	bf00      	nop
 8002576:	372c      	adds	r7, #44	; 0x2c
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e175      	b.n	800288c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f040 8164 	bne.w	8002886 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d005      	beq.n	80025d6 <HAL_GPIO_Init+0x56>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d130      	bne.n	8002638 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800260c:	2201      	movs	r2, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 0201 	and.w	r2, r3, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b03      	cmp	r3, #3
 8002642:	d017      	beq.n	8002674 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d123      	bne.n	80026c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0203 	and.w	r2, r3, #3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80be 	beq.w	8002886 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_GPIO_Init+0x324>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a65      	ldr	r2, [pc, #404]	; (80028a4 <HAL_GPIO_Init+0x324>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_GPIO_Init+0x324>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002722:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <HAL_GPIO_Init+0x328>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_GPIO_Init+0x32c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d037      	beq.n	80027be <HAL_GPIO_Init+0x23e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a57      	ldr	r2, [pc, #348]	; (80028b0 <HAL_GPIO_Init+0x330>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d031      	beq.n	80027ba <HAL_GPIO_Init+0x23a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a56      	ldr	r2, [pc, #344]	; (80028b4 <HAL_GPIO_Init+0x334>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d02b      	beq.n	80027b6 <HAL_GPIO_Init+0x236>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a55      	ldr	r2, [pc, #340]	; (80028b8 <HAL_GPIO_Init+0x338>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d025      	beq.n	80027b2 <HAL_GPIO_Init+0x232>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a54      	ldr	r2, [pc, #336]	; (80028bc <HAL_GPIO_Init+0x33c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01f      	beq.n	80027ae <HAL_GPIO_Init+0x22e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a53      	ldr	r2, [pc, #332]	; (80028c0 <HAL_GPIO_Init+0x340>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d019      	beq.n	80027aa <HAL_GPIO_Init+0x22a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_GPIO_Init+0x344>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d013      	beq.n	80027a6 <HAL_GPIO_Init+0x226>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a51      	ldr	r2, [pc, #324]	; (80028c8 <HAL_GPIO_Init+0x348>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00d      	beq.n	80027a2 <HAL_GPIO_Init+0x222>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a50      	ldr	r2, [pc, #320]	; (80028cc <HAL_GPIO_Init+0x34c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <HAL_GPIO_Init+0x21e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4f      	ldr	r2, [pc, #316]	; (80028d0 <HAL_GPIO_Init+0x350>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d101      	bne.n	800279a <HAL_GPIO_Init+0x21a>
 8002796:	2309      	movs	r3, #9
 8002798:	e012      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 800279a:	230a      	movs	r3, #10
 800279c:	e010      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 800279e:	2308      	movs	r3, #8
 80027a0:	e00e      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027a2:	2307      	movs	r3, #7
 80027a4:	e00c      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027a6:	2306      	movs	r3, #6
 80027a8:	e00a      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027be:	2300      	movs	r3, #0
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027d0:	4935      	ldr	r1, [pc, #212]	; (80028a8 <HAL_GPIO_Init+0x328>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_GPIO_Init+0x354>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <HAL_GPIO_Init+0x354>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002808:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_GPIO_Init+0x354>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800282c:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <HAL_GPIO_Init+0x354>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002832:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <HAL_GPIO_Init+0x354>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002856:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_GPIO_Init+0x354>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_GPIO_Init+0x354>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_GPIO_Init+0x354>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	f67f ae86 	bls.w	80025a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40013800 	.word	0x40013800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40021400 	.word	0x40021400
 80028c4:	40021800 	.word	0x40021800
 80028c8:	40021c00 	.word	0x40021c00
 80028cc:	40022000 	.word	0x40022000
 80028d0:	40022400 	.word	0x40022400
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028f4:	e003      	b.n	80028fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	619a      	str	r2, [r3, #24]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e07f      	b.n	8002a1e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8a9 	bl	8002a8a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2224      	movs	r2, #36	; 0x24
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800296c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	e006      	b.n	8002994 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002992:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d104      	bne.n	80029a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_I2C_Init+0x11c>)
 80029b2:	430b      	orrs	r3, r1
 80029b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69d9      	ldr	r1, [r3, #28]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	02008000 	.word	0x02008000

08002a2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e021      	b.n	8002a82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2224      	movs	r2, #36	; 0x24
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f821 	bl	8002a9e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	817b      	strh	r3, [r7, #10]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	813b      	strh	r3, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	f040 80f9 	bne.w	8002cce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_I2C_Mem_Write+0x34>
 8002ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0ed      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_I2C_Mem_Write+0x4e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e0e6      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x21c>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b0a:	f7fe fe31 	bl	8001770 <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2319      	movs	r3, #25
 8002b16:	2201      	movs	r2, #1
 8002b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fad1 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0d1      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2221      	movs	r2, #33	; 0x21
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b54:	88f8      	ldrh	r0, [r7, #6]
 8002b56:	893a      	ldrh	r2, [r7, #8]
 8002b58:	8979      	ldrh	r1, [r7, #10]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	4603      	mov	r3, r0
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f9e1 	bl	8002f2c <I2C_RequestMemoryWrite>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0a9      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2bff      	cmp	r3, #255	; 0xff
 8002b84:	d90e      	bls.n	8002ba4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	22ff      	movs	r2, #255	; 0xff
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	8979      	ldrh	r1, [r7, #10]
 8002b94:	2300      	movs	r3, #0
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fc39 	bl	8003414 <I2C_TransferConfig>
 8002ba2:	e00f      	b.n	8002bc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	8979      	ldrh	r1, [r7, #10]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fc28 	bl	8003414 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fabb 	bl	8003144 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e07b      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d034      	beq.n	8002c7c <HAL_I2C_Mem_Write+0x1c8>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d130      	bne.n	8002c7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	2200      	movs	r2, #0
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fa4d 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e04d      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2bff      	cmp	r3, #255	; 0xff
 8002c3c:	d90e      	bls.n	8002c5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	22ff      	movs	r2, #255	; 0xff
 8002c42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	8979      	ldrh	r1, [r7, #10]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fbdd 	bl	8003414 <I2C_TransferConfig>
 8002c5a:	e00f      	b.n	8002c7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	8979      	ldrh	r1, [r7, #10]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fbcc 	bl	8003414 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d19e      	bne.n	8002bc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fa9a 	bl	80031c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e01a      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_I2C_Mem_Write+0x224>)
 8002cae:	400b      	ands	r3, r1
 8002cb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	fe00e800 	.word	0xfe00e800

08002cdc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	817b      	strh	r3, [r7, #10]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	813b      	strh	r3, [r7, #8]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	f040 80fd 	bne.w	8002efe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_I2C_Mem_Read+0x34>
 8002d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0f1      	b.n	8002f00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_I2C_Mem_Read+0x4e>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e0ea      	b.n	8002f00 <HAL_I2C_Mem_Read+0x224>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d32:	f7fe fd1d 	bl	8001770 <HAL_GetTick>
 8002d36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2319      	movs	r3, #25
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f9bd 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0d5      	b.n	8002f00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2222      	movs	r2, #34	; 0x22
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2240      	movs	r2, #64	; 0x40
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d7c:	88f8      	ldrh	r0, [r7, #6]
 8002d7e:	893a      	ldrh	r2, [r7, #8]
 8002d80:	8979      	ldrh	r1, [r7, #10]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f921 	bl	8002fd4 <I2C_RequestMemoryRead>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0ad      	b.n	8002f00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2bff      	cmp	r3, #255	; 0xff
 8002dac:	d90e      	bls.n	8002dcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	22ff      	movs	r2, #255	; 0xff
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	4b52      	ldr	r3, [pc, #328]	; (8002f08 <HAL_I2C_Mem_Read+0x22c>)
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fb25 	bl	8003414 <I2C_TransferConfig>
 8002dca:	e00f      	b.n	8002dec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_I2C_Mem_Read+0x22c>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fb14 	bl	8003414 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	2200      	movs	r2, #0
 8002df4:	2104      	movs	r1, #4
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f964 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07c      	b.n	8002f00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d034      	beq.n	8002eac <HAL_I2C_Mem_Read+0x1d0>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d130      	bne.n	8002eac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	2200      	movs	r2, #0
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f935 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e04d      	b.n	8002f00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2bff      	cmp	r3, #255	; 0xff
 8002e6c:	d90e      	bls.n	8002e8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	22ff      	movs	r2, #255	; 0xff
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	8979      	ldrh	r1, [r7, #10]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fac5 	bl	8003414 <I2C_TransferConfig>
 8002e8a:	e00f      	b.n	8002eac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	8979      	ldrh	r1, [r7, #10]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fab4 	bl	8003414 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d19a      	bne.n	8002dec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f982 	bl	80031c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e01a      	b.n	8002f00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_I2C_Mem_Read+0x230>)
 8002ede:	400b      	ands	r3, r1
 8002ee0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	80002400 	.word	0x80002400
 8002f0c:	fe00e800 	.word	0xfe00e800

08002f10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1e:	b2db      	uxtb	r3, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	817b      	strh	r3, [r7, #10]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	813b      	strh	r3, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	8979      	ldrh	r1, [r7, #10]
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <I2C_RequestMemoryWrite+0xa4>)
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fa5d 	bl	8003414 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	69b9      	ldr	r1, [r7, #24]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f8f0 	bl	8003144 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e02c      	b.n	8002fc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f74:	893b      	ldrh	r3, [r7, #8]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7e:	e015      	b.n	8002fac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f80:	893b      	ldrh	r3, [r7, #8]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	69b9      	ldr	r1, [r7, #24]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f8d6 	bl	8003144 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e012      	b.n	8002fc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa2:	893b      	ldrh	r3, [r7, #8]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f884 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	80002000 	.word	0x80002000

08002fd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	813b      	strh	r3, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	8979      	ldrh	r1, [r7, #10]
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <I2C_RequestMemoryRead+0xa4>)
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fa0a 	bl	8003414 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f89d 	bl	8003144 <I2C_WaitOnTXISFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e02c      	b.n	800306e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	629a      	str	r2, [r3, #40]	; 0x28
 8003024:	e015      	b.n	8003052 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003026:	893b      	ldrh	r3, [r7, #8]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	b29b      	uxth	r3, r3
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	69b9      	ldr	r1, [r7, #24]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f883 	bl	8003144 <I2C_WaitOnTXISFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e012      	b.n	800306e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2200      	movs	r2, #0
 800305a:	2140      	movs	r1, #64	; 0x40
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f831 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	80002000 	.word	0x80002000

0800307c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d103      	bne.n	800309a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d007      	beq.n	80030b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	619a      	str	r2, [r3, #24]
  }
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d4:	e022      	b.n	800311c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d01e      	beq.n	800311c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fb47 	bl	8001770 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d113      	bne.n	800311c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e00f      	b.n	800313c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4013      	ands	r3, r2
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	429a      	cmp	r2, r3
 8003138:	d0cd      	beq.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003150:	e02c      	b.n	80031ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f870 	bl	800323c <I2C_IsErrorOccurred>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e02a      	b.n	80031bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d01e      	beq.n	80031ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316e:	f7fe faff 	bl	8001770 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	d302      	bcc.n	8003184 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d113      	bne.n	80031ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e007      	b.n	80031bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d1cb      	bne.n	8003152 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d0:	e028      	b.n	8003224 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f830 	bl	800323c <I2C_IsErrorOccurred>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e026      	b.n	8003234 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fe fac3 	bl	8001770 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d113      	bne.n	8003224 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b20      	cmp	r3, #32
 8003230:	d1cf      	bne.n	80031d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d075      	beq.n	8003354 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2210      	movs	r2, #16
 800326e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003270:	e056      	b.n	8003320 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d052      	beq.n	8003320 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800327a:	f7fe fa79 	bl	8001770 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	d302      	bcc.n	8003290 <I2C_IsErrorOccurred+0x54>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d147      	bne.n	8003320 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b2:	d12e      	bne.n	8003312 <I2C_IsErrorOccurred+0xd6>
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ba:	d02a      	beq.n	8003312 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d027      	beq.n	8003312 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032d2:	f7fe fa4d 	bl	8001770 <HAL_GetTick>
 80032d6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d8:	e01b      	b.n	8003312 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032da:	f7fe fa49 	bl	8001770 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b19      	cmp	r3, #25
 80032e6:	d914      	bls.n	8003312 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b20      	cmp	r3, #32
 800331e:	d1dc      	bne.n	80032da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d003      	beq.n	8003336 <I2C_IsErrorOccurred+0xfa>
 800332e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003332:	2b00      	cmp	r3, #0
 8003334:	d09d      	beq.n	8003272 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2220      	movs	r2, #32
 8003344:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003376:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f043 0308 	orr.w	r3, r3, #8
 800338e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003398:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80033c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01c      	beq.n	8003404 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7ff fe56 	bl	800307c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <I2C_IsErrorOccurred+0x1d4>)
 80033dc:	400b      	ands	r3, r1
 80033de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003408:	4618      	mov	r0, r3
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	fe00e800 	.word	0xfe00e800

08003414 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	817b      	strh	r3, [r7, #10]
 8003422:	4613      	mov	r3, r2
 8003424:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800342c:	7a7b      	ldrb	r3, [r7, #9]
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003434:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	4313      	orrs	r3, r2
 800343e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003442:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	0d5b      	lsrs	r3, r3, #21
 800344e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <I2C_TransferConfig+0x60>)
 8003454:	430b      	orrs	r3, r1
 8003456:	43db      	mvns	r3, r3
 8003458:	ea02 0103 	and.w	r1, r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	03ff63ff 	.word	0x03ff63ff

08003478 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0c7      	b.n	8003622 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8c2 	bl	8003630 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80034c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6999      	ldr	r1, [r3, #24]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034d8:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4b4e      	ldr	r3, [pc, #312]	; (800362c <HAL_LTDC_Init+0x1b4>)
 80034f4:	400b      	ands	r3, r1
 80034f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68d9      	ldr	r1, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b42      	ldr	r3, [pc, #264]	; (800362c <HAL_LTDC_Init+0x1b4>)
 8003522:	400b      	ands	r3, r1
 8003524:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b37      	ldr	r3, [pc, #220]	; (800362c <HAL_LTDC_Init+0x1b4>)
 8003550:	400b      	ands	r3, r1
 8003552:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6919      	ldr	r1, [r3, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6959      	ldr	r1, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_LTDC_Init+0x1b4>)
 800357e:	400b      	ands	r3, r1
 8003580:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6959      	ldr	r1, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0204 	orr.w	r2, r2, #4
 80035ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0202 	orr.w	r2, r2, #2
 80035fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	f000f800 	.word	0xf000f800

08003630 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d025      	beq.n	80036a6 <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01e      	beq.n	80036a6 <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2204      	movs	r2, #4
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2204      	movs	r2, #4
 8003694:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f87b 	bl	800379c <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d025      	beq.n	8003700 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01e      	beq.n	8003700 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0202 	bic.w	r2, r2, #2
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2202      	movs	r2, #2
 80036d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036e0:	f043 0202 	orr.w	r2, r3, #2
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2204      	movs	r2, #4
 80036ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f84e 	bl	800379c <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01d      	beq.n	800374a <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d016      	beq.n	800374a <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f833 	bl	80037b0 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01d      	beq.n	8003794 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0208 	bic.w	r2, r2, #8
 8003774:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2208      	movs	r2, #8
 800377c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f818 	bl	80037c4 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_LTDC_ConfigLayer+0x1a>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e02c      	b.n	800384c <HAL_LTDC_ConfigLayer+0x74>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2202      	movs	r2, #2
 80037fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2134      	movs	r1, #52	; 0x34
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800381a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800381c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800381e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f81f 	bl	8003870 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bdb0      	pop	{r4, r5, r7, pc}

08003854 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003862:	b2db      	uxtb	r3, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	4413      	add	r3, r2
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	01db      	lsls	r3, r3, #7
 80038a8:	4413      	add	r3, r2
 80038aa:	3384      	adds	r3, #132	; 0x84
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	4611      	mov	r1, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	01d2      	lsls	r2, r2, #7
 80038b8:	440a      	add	r2, r1
 80038ba:	3284      	adds	r2, #132	; 0x84
 80038bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80038c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d2:	4413      	add	r3, r2
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4619      	mov	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	01db      	lsls	r3, r3, #7
 80038e0:	440b      	add	r3, r1
 80038e2:	3384      	adds	r3, #132	; 0x84
 80038e4:	4619      	mov	r1, r3
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fa:	4413      	add	r3, r2
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	01db      	lsls	r3, r3, #7
 800390a:	4413      	add	r3, r2
 800390c:	3384      	adds	r3, #132	; 0x84
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	4611      	mov	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	01d2      	lsls	r2, r2, #7
 800391a:	440a      	add	r2, r1
 800391c:	3284      	adds	r2, #132	; 0x84
 800391e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003922:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003932:	4413      	add	r3, r2
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	01db      	lsls	r3, r3, #7
 8003940:	440b      	add	r3, r1
 8003942:	3384      	adds	r3, #132	; 0x84
 8003944:	4619      	mov	r1, r3
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4313      	orrs	r3, r2
 800394a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	01db      	lsls	r3, r3, #7
 8003956:	4413      	add	r3, r2
 8003958:	3384      	adds	r3, #132	; 0x84
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	4611      	mov	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	01d2      	lsls	r2, r2, #7
 8003966:	440a      	add	r2, r1
 8003968:	3284      	adds	r2, #132	; 0x84
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	01db      	lsls	r3, r3, #7
 800397a:	4413      	add	r3, r2
 800397c:	3384      	adds	r3, #132	; 0x84
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003996:	041b      	lsls	r3, r3, #16
 8003998:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	061b      	lsls	r3, r3, #24
 80039a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	01db      	lsls	r3, r3, #7
 80039ac:	4413      	add	r3, r2
 80039ae:	3384      	adds	r3, #132	; 0x84
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	01db      	lsls	r3, r3, #7
 80039bc:	4413      	add	r3, r2
 80039be:	3384      	adds	r3, #132	; 0x84
 80039c0:	461a      	mov	r2, r3
 80039c2:	2300      	movs	r3, #0
 80039c4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039cc:	461a      	mov	r2, r3
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	01db      	lsls	r3, r3, #7
 80039e0:	440b      	add	r3, r1
 80039e2:	3384      	adds	r3, #132	; 0x84
 80039e4:	4619      	mov	r1, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	01db      	lsls	r3, r3, #7
 80039f6:	4413      	add	r3, r2
 80039f8:	3384      	adds	r3, #132	; 0x84
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	4611      	mov	r1, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	01d2      	lsls	r2, r2, #7
 8003a06:	440a      	add	r2, r1
 8003a08:	3284      	adds	r2, #132	; 0x84
 8003a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	01db      	lsls	r3, r3, #7
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3384      	adds	r3, #132	; 0x84
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	01db      	lsls	r3, r3, #7
 8003a30:	4413      	add	r3, r2
 8003a32:	3384      	adds	r3, #132	; 0x84
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	01db      	lsls	r3, r3, #7
 8003a40:	440b      	add	r3, r1
 8003a42:	3384      	adds	r3, #132	; 0x84
 8003a44:	4619      	mov	r1, r3
 8003a46:	4b58      	ldr	r3, [pc, #352]	; (8003ba8 <LTDC_SetConfig+0x338>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	6809      	ldr	r1, [r1, #0]
 8003a58:	4608      	mov	r0, r1
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	01c9      	lsls	r1, r1, #7
 8003a5e:	4401      	add	r1, r0
 8003a60:	3184      	adds	r1, #132	; 0x84
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	01db      	lsls	r3, r3, #7
 8003a70:	4413      	add	r3, r2
 8003a72:	3384      	adds	r3, #132	; 0x84
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	01db      	lsls	r3, r3, #7
 8003a80:	4413      	add	r3, r2
 8003a82:	3384      	adds	r3, #132	; 0x84
 8003a84:	461a      	mov	r2, r3
 8003a86:	2300      	movs	r3, #0
 8003a88:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	01db      	lsls	r3, r3, #7
 8003a94:	4413      	add	r3, r2
 8003a96:	3384      	adds	r3, #132	; 0x84
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	e01b      	b.n	8003ae6 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d102      	bne.n	8003abc <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	e014      	b.n	8003ae6 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d00b      	beq.n	8003adc <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d007      	beq.n	8003adc <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d003      	beq.n	8003adc <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003ad8:	2b07      	cmp	r3, #7
 8003ada:	d102      	bne.n	8003ae2 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8003adc:	2302      	movs	r3, #2
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	e001      	b.n	8003ae6 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	01db      	lsls	r3, r3, #7
 8003af0:	4413      	add	r3, r2
 8003af2:	3384      	adds	r3, #132	; 0x84
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	4611      	mov	r1, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	01d2      	lsls	r2, r2, #7
 8003b00:	440a      	add	r2, r1
 8003b02:	3284      	adds	r2, #132	; 0x84
 8003b04:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003b08:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	041a      	lsls	r2, r3, #16
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	1acb      	subs	r3, r1, r3
 8003b20:	69f9      	ldr	r1, [r7, #28]
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	3303      	adds	r3, #3
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	6809      	ldr	r1, [r1, #0]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	01c9      	lsls	r1, r1, #7
 8003b32:	4401      	add	r1, r0
 8003b34:	3184      	adds	r1, #132	; 0x84
 8003b36:	4313      	orrs	r3, r2
 8003b38:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	01db      	lsls	r3, r3, #7
 8003b44:	4413      	add	r3, r2
 8003b46:	3384      	adds	r3, #132	; 0x84
 8003b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	01db      	lsls	r3, r3, #7
 8003b54:	440b      	add	r3, r1
 8003b56:	3384      	adds	r3, #132	; 0x84
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <LTDC_SetConfig+0x33c>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	01db      	lsls	r3, r3, #7
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3384      	adds	r3, #132	; 0x84
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	01db      	lsls	r3, r3, #7
 8003b80:	4413      	add	r3, r2
 8003b82:	3384      	adds	r3, #132	; 0x84
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	01d2      	lsls	r2, r2, #7
 8003b90:	440a      	add	r2, r1
 8003b92:	3284      	adds	r2, #132	; 0x84
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6013      	str	r3, [r2, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	3724      	adds	r7, #36	; 0x24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	fffff8f8 	.word	0xfffff8f8
 8003bac:	fffff800 	.word	0xfffff800

08003bb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bde:	f7fd fdc7 	bl	8001770 <HAL_GetTick>
 8003be2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003be4:	e009      	b.n	8003bfa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003be6:	f7fd fdc3 	bl	8001770 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bf4:	d901      	bls.n	8003bfa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e022      	b.n	8003c40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c06:	d1ee      	bne.n	8003be6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c08:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0f      	ldr	r2, [pc, #60]	; (8003c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c14:	f7fd fdac 	bl	8001770 <HAL_GetTick>
 8003c18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c1a:	e009      	b.n	8003c30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c1c:	f7fd fda8 	bl	8001770 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c2a:	d901      	bls.n	8003c30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e007      	b.n	8003c40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c3c:	d1ee      	bne.n	8003c1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40007000 	.word	0x40007000

08003c50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e291      	b.n	800418a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8087 	beq.w	8003d82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c74:	4b96      	ldr	r3, [pc, #600]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d00c      	beq.n	8003c9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c80:	4b93      	ldr	r3, [pc, #588]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d112      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x62>
 8003c8c:	4b90      	ldr	r3, [pc, #576]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c98:	d10b      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9a:	4b8d      	ldr	r3, [pc, #564]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d06c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x130>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d168      	bne.n	8003d80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e26b      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cba:	d106      	bne.n	8003cca <HAL_RCC_OscConfig+0x7a>
 8003cbc:	4b84      	ldr	r3, [pc, #528]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a83      	ldr	r2, [pc, #524]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	e02e      	b.n	8003d28 <HAL_RCC_OscConfig+0xd8>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x9c>
 8003cd2:	4b7f      	ldr	r3, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7e      	ldr	r2, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b7c      	ldr	r3, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7b      	ldr	r2, [pc, #492]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e01d      	b.n	8003d28 <HAL_RCC_OscConfig+0xd8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0xc0>
 8003cf6:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a75      	ldr	r2, [pc, #468]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	4b73      	ldr	r3, [pc, #460]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a72      	ldr	r2, [pc, #456]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCC_OscConfig+0xd8>
 8003d10:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a6e      	ldr	r2, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6b      	ldr	r2, [pc, #428]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d013      	beq.n	8003d58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fd fd1e 	bl	8001770 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fd fd1a 	bl	8001770 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e21f      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0xe8>
 8003d56:	e014      	b.n	8003d82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fd fd0a 	bl	8001770 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d60:	f7fd fd06 	bl	8001770 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e20b      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d72:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x110>
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d069      	beq.n	8003e62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d8e:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9a:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d11c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x190>
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d116      	bne.n	8003de0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_RCC_OscConfig+0x17a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e1df      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	e040      	b.n	8003e62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d023      	beq.n	8003e30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de8:	4b39      	ldr	r3, [pc, #228]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a38      	ldr	r2, [pc, #224]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd fcbc 	bl	8001770 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfc:	f7fd fcb8 	bl	8001770 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1bd      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0e:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4929      	ldr	r1, [pc, #164]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]
 8003e2e:	e018      	b.n	8003e62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fc98 	bl	8001770 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fd fc94 	bl	8001770 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e199      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d038      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d019      	beq.n	8003eaa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fd fc75 	bl	8001770 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fc71 	bl	8001770 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e176      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x23a>
 8003ea8:	e01a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fc5b 	bl	8001770 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebe:	f7fd fc57 	bl	8001770 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d903      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e15c      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
 8003ed0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	4b91      	ldr	r3, [pc, #580]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ee      	bne.n	8003ebe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80a4 	beq.w	8004036 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b8b      	ldr	r3, [pc, #556]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	4b88      	ldr	r3, [pc, #544]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4a87      	ldr	r2, [pc, #540]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6413      	str	r3, [r2, #64]	; 0x40
 8003f06:	4b85      	ldr	r3, [pc, #532]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f16:	4b82      	ldr	r3, [pc, #520]	; (8004120 <HAL_RCC_OscConfig+0x4d0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d118      	bne.n	8003f54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f22:	4b7f      	ldr	r3, [pc, #508]	; (8004120 <HAL_RCC_OscConfig+0x4d0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7e      	ldr	r2, [pc, #504]	; (8004120 <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fc1f 	bl	8001770 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fd fc1b 	bl	8001770 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e120      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f48:	4b75      	ldr	r3, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x4d0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x31a>
 8003f5c:	4b6f      	ldr	r3, [pc, #444]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a6e      	ldr	r2, [pc, #440]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	e02d      	b.n	8003fc6 <HAL_RCC_OscConfig+0x376>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x33c>
 8003f72:	4b6a      	ldr	r3, [pc, #424]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a69      	ldr	r2, [pc, #420]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7e:	4b67      	ldr	r3, [pc, #412]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a66      	ldr	r2, [pc, #408]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8a:	e01c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x376>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d10c      	bne.n	8003fae <HAL_RCC_OscConfig+0x35e>
 8003f94:	4b61      	ldr	r3, [pc, #388]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	4a60      	ldr	r2, [pc, #384]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	f043 0304 	orr.w	r3, r3, #4
 8003f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa0:	4b5e      	ldr	r3, [pc, #376]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a5d      	ldr	r2, [pc, #372]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
 8003fac:	e00b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x376>
 8003fae:	4b5b      	ldr	r3, [pc, #364]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a5a      	ldr	r2, [pc, #360]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fba:	4b58      	ldr	r3, [pc, #352]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a57      	ldr	r2, [pc, #348]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d015      	beq.n	8003ffa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fce:	f7fd fbcf 	bl	8001770 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fd fbcb 	bl	8001770 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0ce      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x386>
 8003ff8:	e014      	b.n	8004024 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fbb9 	bl	8001770 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fd fbb5 	bl	8001770 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0b8      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004018:	4b40      	ldr	r3, [pc, #256]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ee      	bne.n	8004002 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d105      	bne.n	8004036 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4b3c      	ldr	r3, [pc, #240]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	4a3b      	ldr	r2, [pc, #236]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80a4 	beq.w	8004188 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d06b      	beq.n	8004124 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d149      	bne.n	80040e8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a30      	ldr	r2, [pc, #192]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 800405a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800405e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd fb86 	bl	8001770 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fd fb82 	bl	8001770 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e087      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	3b01      	subs	r3, #1
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	4313      	orrs	r3, r2
 80040ac:	4a1b      	ldr	r2, [pc, #108]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 80040ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040b2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a18      	ldr	r2, [pc, #96]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd fb56 	bl	8001770 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd fb52 	bl	8001770 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e057      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x478>
 80040e6:	e04f      	b.n	8004188 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fb3c 	bl	8001770 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd fb38 	bl	8001770 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e03d      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_OscConfig+0x4cc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x4ac>
 800411a:	e035      	b.n	8004188 <HAL_RCC_OscConfig+0x538>
 800411c:	40023800 	.word	0x40023800
 8004120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x544>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d028      	beq.n	8004184 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d121      	bne.n	8004184 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d11a      	bne.n	8004184 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800415a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800415c:	4293      	cmp	r3, r2
 800415e:	d111      	bne.n	8004184 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800

08004198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0d0      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b0:	4b6a      	ldr	r3, [pc, #424]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d910      	bls.n	80041e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b67      	ldr	r3, [pc, #412]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 020f 	bic.w	r2, r3, #15
 80041c6:	4965      	ldr	r1, [pc, #404]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0b8      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f8:	4b59      	ldr	r3, [pc, #356]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a58      	ldr	r2, [pc, #352]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004202:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a52      	ldr	r2, [pc, #328]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800421a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	494d      	ldr	r1, [pc, #308]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d040      	beq.n	80042bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d115      	bne.n	800427a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e07f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d107      	bne.n	800426a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e073      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426a:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e06b      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800427a:	4b39      	ldr	r3, [pc, #228]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f023 0203 	bic.w	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4936      	ldr	r1, [pc, #216]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	4313      	orrs	r3, r2
 800428a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428c:	f7fd fa70 	bl	8001770 <HAL_GetTick>
 8004290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004292:	e00a      	b.n	80042aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004294:	f7fd fa6c 	bl	8001770 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e053      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 020c 	and.w	r2, r3, #12
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d1eb      	bne.n	8004294 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d210      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 020f 	bic.w	r2, r3, #15
 80042d2:	4922      	ldr	r1, [pc, #136]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e032      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4916      	ldr	r1, [pc, #88]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	490e      	ldr	r1, [pc, #56]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800432a:	f000 f821 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 800432e:	4602      	mov	r2, r0
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	490a      	ldr	r1, [pc, #40]	; (8004364 <HAL_RCC_ClockConfig+0x1cc>)
 800433c:	5ccb      	ldrb	r3, [r1, r3]
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_RCC_ClockConfig+0x1d0>)
 8004344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_ClockConfig+0x1d4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fd f9cc 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023c00 	.word	0x40023c00
 8004360:	40023800 	.word	0x40023800
 8004364:	080085d4 	.word	0x080085d4
 8004368:	20000028 	.word	0x20000028
 800436c:	2000002c 	.word	0x2000002c

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	b5b0      	push	{r4, r5, r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004376:	2100      	movs	r1, #0
 8004378:	6079      	str	r1, [r7, #4]
 800437a:	2100      	movs	r1, #0
 800437c:	60f9      	str	r1, [r7, #12]
 800437e:	2100      	movs	r1, #0
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004382:	2100      	movs	r1, #0
 8004384:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004386:	4952      	ldr	r1, [pc, #328]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004388:	6889      	ldr	r1, [r1, #8]
 800438a:	f001 010c 	and.w	r1, r1, #12
 800438e:	2908      	cmp	r1, #8
 8004390:	d00d      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0x3e>
 8004392:	2908      	cmp	r1, #8
 8004394:	f200 8094 	bhi.w	80044c0 <HAL_RCC_GetSysClockFreq+0x150>
 8004398:	2900      	cmp	r1, #0
 800439a:	d002      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x32>
 800439c:	2904      	cmp	r1, #4
 800439e:	d003      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x38>
 80043a0:	e08e      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a2:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80043a4:	60bb      	str	r3, [r7, #8]
      break;
 80043a6:	e08e      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043a8:	4b4b      	ldr	r3, [pc, #300]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80043aa:	60bb      	str	r3, [r7, #8]
      break;
 80043ac:	e08b      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ae:	4948      	ldr	r1, [pc, #288]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80043b0:	6849      	ldr	r1, [r1, #4]
 80043b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80043b6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043b8:	4945      	ldr	r1, [pc, #276]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ba:	6849      	ldr	r1, [r1, #4]
 80043bc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d024      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c4:	4942      	ldr	r1, [pc, #264]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80043c6:	6849      	ldr	r1, [r1, #4]
 80043c8:	0989      	lsrs	r1, r1, #6
 80043ca:	4608      	mov	r0, r1
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80043d4:	f04f 0500 	mov.w	r5, #0
 80043d8:	ea00 0204 	and.w	r2, r0, r4
 80043dc:	ea01 0305 	and.w	r3, r1, r5
 80043e0:	493d      	ldr	r1, [pc, #244]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80043e2:	fb01 f003 	mul.w	r0, r1, r3
 80043e6:	2100      	movs	r1, #0
 80043e8:	fb01 f102 	mul.w	r1, r1, r2
 80043ec:	1844      	adds	r4, r0, r1
 80043ee:	493a      	ldr	r1, [pc, #232]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80043f0:	fba2 0101 	umull	r0, r1, r2, r1
 80043f4:	1863      	adds	r3, r4, r1
 80043f6:	4619      	mov	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	f7fb ff02 	bl	8000208 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e04a      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440e:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	461a      	mov	r2, r3
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	ea02 0400 	and.w	r4, r2, r0
 8004426:	ea03 0501 	and.w	r5, r3, r1
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	014b      	lsls	r3, r1, #5
 8004438:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800443c:	0142      	lsls	r2, r0, #5
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	1b00      	subs	r0, r0, r4
 8004444:	eb61 0105 	sbc.w	r1, r1, r5
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	018b      	lsls	r3, r1, #6
 8004452:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004456:	0182      	lsls	r2, r0, #6
 8004458:	1a12      	subs	r2, r2, r0
 800445a:	eb63 0301 	sbc.w	r3, r3, r1
 800445e:	f04f 0000 	mov.w	r0, #0
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	00d9      	lsls	r1, r3, #3
 8004468:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800446c:	00d0      	lsls	r0, r2, #3
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	1912      	adds	r2, r2, r4
 8004474:	eb45 0303 	adc.w	r3, r5, r3
 8004478:	f04f 0000 	mov.w	r0, #0
 800447c:	f04f 0100 	mov.w	r1, #0
 8004480:	0299      	lsls	r1, r3, #10
 8004482:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004486:	0290      	lsls	r0, r2, #10
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	461a      	mov	r2, r3
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	f7fb feb6 	bl	8000208 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4613      	mov	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	3301      	adds	r3, #1
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	60bb      	str	r3, [r7, #8]
      break;
 80044be:	e002      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80044c2:	60bb      	str	r3, [r7, #8]
      break;
 80044c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044c6:	68bb      	ldr	r3, [r7, #8]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bdb0      	pop	{r4, r5, r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	00f42400 	.word	0x00f42400
 80044d8:	017d7840 	.word	0x017d7840

080044dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000028 	.word	0x20000028

080044f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044f8:	f7ff fff0 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	0a9b      	lsrs	r3, r3, #10
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4903      	ldr	r1, [pc, #12]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40023800 	.word	0x40023800
 8004518:	080085e4 	.word	0x080085e4

0800451c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004520:	f7ff ffdc 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0b5b      	lsrs	r3, r3, #13
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4903      	ldr	r1, [pc, #12]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40023800 	.word	0x40023800
 8004540:	080085e4 	.word	0x080085e4

08004544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d012      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800456c:	4b69      	ldr	r3, [pc, #420]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4a68      	ldr	r2, [pc, #416]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004576:	6093      	str	r3, [r2, #8]
 8004578:	4b66      	ldr	r3, [pc, #408]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	4964      	ldr	r1, [pc, #400]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d017      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800459e:	4b5d      	ldr	r3, [pc, #372]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ac:	4959      	ldr	r1, [pc, #356]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045bc:	d101      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045be:	2301      	movs	r3, #1
 80045c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d017      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045da:	4b4e      	ldr	r3, [pc, #312]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	494a      	ldr	r1, [pc, #296]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f8:	d101      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004606:	2301      	movs	r3, #1
 8004608:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 808b 	beq.w	800473e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004628:	4b3a      	ldr	r3, [pc, #232]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	4a39      	ldr	r2, [pc, #228]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004632:	6413      	str	r3, [r2, #64]	; 0x40
 8004634:	4b37      	ldr	r3, [pc, #220]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a34      	ldr	r2, [pc, #208]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464c:	f7fd f890 	bl	8001770 <HAL_GetTick>
 8004650:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fd f88c 	bl	8001770 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	; 0x64
 8004660:	d901      	bls.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e357      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004666:	4b2c      	ldr	r3, [pc, #176]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004672:	4b28      	ldr	r3, [pc, #160]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d035      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	429a      	cmp	r2, r3
 800468e:	d02e      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004698:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800469a:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a1d      	ldr	r2, [pc, #116]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a1a      	ldr	r2, [pc, #104]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046b8:	4b16      	ldr	r3, [pc, #88]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d114      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd f854 	bl	8001770 <HAL_GetTick>
 80046c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fd f850 	bl	8001770 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e319      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ee      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fa:	d111      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800470a:	400b      	ands	r3, r1
 800470c:	4901      	ldr	r1, [pc, #4]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
 8004712:	e00b      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004714:	40023800 	.word	0x40023800
 8004718:	40007000 	.word	0x40007000
 800471c:	0ffffcff 	.word	0x0ffffcff
 8004720:	4bb1      	ldr	r3, [pc, #708]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4ab0      	ldr	r2, [pc, #704]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004726:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800472a:	6093      	str	r3, [r2, #8]
 800472c:	4bae      	ldr	r3, [pc, #696]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800472e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	49ab      	ldr	r1, [pc, #684]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b00      	cmp	r3, #0
 8004748:	d010      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800474a:	4ba7      	ldr	r3, [pc, #668]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004750:	4aa5      	ldr	r2, [pc, #660]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800475a:	4ba3      	ldr	r3, [pc, #652]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800475c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	49a0      	ldr	r1, [pc, #640]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004778:	4b9b      	ldr	r3, [pc, #620]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004786:	4998      	ldr	r1, [pc, #608]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800479a:	4b93      	ldr	r3, [pc, #588]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a8:	498f      	ldr	r1, [pc, #572]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047bc:	4b8a      	ldr	r3, [pc, #552]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ca:	4987      	ldr	r1, [pc, #540]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047de:	4b82      	ldr	r3, [pc, #520]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	497e      	ldr	r1, [pc, #504]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004800:	4b79      	ldr	r3, [pc, #484]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	4976      	ldr	r1, [pc, #472]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004822:	4b71      	ldr	r3, [pc, #452]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	f023 020c 	bic.w	r2, r3, #12
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004830:	496d      	ldr	r1, [pc, #436]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004844:	4b68      	ldr	r3, [pc, #416]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004852:	4965      	ldr	r1, [pc, #404]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004866:	4b60      	ldr	r3, [pc, #384]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004874:	495c      	ldr	r1, [pc, #368]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004888:	4b57      	ldr	r3, [pc, #348]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	4954      	ldr	r1, [pc, #336]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048aa:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b8:	494b      	ldr	r1, [pc, #300]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048cc:	4b46      	ldr	r3, [pc, #280]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	4943      	ldr	r1, [pc, #268]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048ee:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fc:	493a      	ldr	r1, [pc, #232]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491e:	4932      	ldr	r1, [pc, #200]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d011      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004932:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004938:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004940:	4929      	ldr	r1, [pc, #164]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800494c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004950:	d101      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004952:	2301      	movs	r3, #1
 8004954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004962:	2301      	movs	r3, #1
 8004964:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004980:	4919      	ldr	r1, [pc, #100]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a4:	4910      	ldr	r1, [pc, #64]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d006      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80d9 	beq.w	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049cc:	f7fc fed0 	bl	8001770 <HAL_GetTick>
 80049d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d2:	e00b      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049d4:	f7fc fecc 	bl	8001770 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	; 0x64
 80049e0:	d904      	bls.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e197      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ec:	4b6c      	ldr	r3, [pc, #432]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ed      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d021      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11d      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a0c:	4b64      	ldr	r3, [pc, #400]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a1a:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a20:	0e1b      	lsrs	r3, r3, #24
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	019a      	lsls	r2, r3, #6
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	041b      	lsls	r3, r3, #16
 8004a32:	431a      	orrs	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	071b      	lsls	r3, r3, #28
 8004a40:	4957      	ldr	r1, [pc, #348]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d004      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d02e      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a72:	d129      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a74:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7a:	0c1b      	lsrs	r3, r3, #16
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a82:	4b47      	ldr	r3, [pc, #284]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a88:	0f1b      	lsrs	r3, r3, #28
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	019a      	lsls	r2, r3, #6
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	071b      	lsls	r3, r3, #28
 8004aa8:	493d      	ldr	r1, [pc, #244]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ab0:	4b3b      	ldr	r3, [pc, #236]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab6:	f023 021f 	bic.w	r2, r3, #31
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	4937      	ldr	r1, [pc, #220]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01d      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ad4:	4b32      	ldr	r3, [pc, #200]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ada:	0e1b      	lsrs	r3, r3, #24
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae2:	4b2f      	ldr	r3, [pc, #188]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae8:	0f1b      	lsrs	r3, r3, #28
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	019a      	lsls	r2, r3, #6
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	041b      	lsls	r3, r3, #16
 8004afc:	431a      	orrs	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	071b      	lsls	r3, r3, #28
 8004b08:	4925      	ldr	r1, [pc, #148]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d011      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	019a      	lsls	r2, r3, #6
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	071b      	lsls	r3, r3, #28
 8004b38:	4919      	ldr	r1, [pc, #100]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4c:	f7fc fe10 	bl	8001770 <HAL_GetTick>
 8004b50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b54:	f7fc fe0c 	bl	8001770 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0d7      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	f040 80cd 	bne.w	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b86:	f7fc fdf3 	bl	8001770 <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b8e:	f7fc fdef 	bl	8001770 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b64      	cmp	r3, #100	; 0x64
 8004b9a:	d903      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0ba      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ba4:	4b5e      	ldr	r3, [pc, #376]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb0:	d0ed      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d02e      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d12a      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bda:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004be8:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	0f1b      	lsrs	r3, r3, #28
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	019a      	lsls	r2, r3, #6
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	061b      	lsls	r3, r3, #24
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	071b      	lsls	r3, r3, #28
 8004c0e:	4944      	ldr	r1, [pc, #272]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c16:	4b42      	ldr	r3, [pc, #264]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	3b01      	subs	r3, #1
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	493d      	ldr	r1, [pc, #244]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d022      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c44:	d11d      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c54:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	0f1b      	lsrs	r3, r3, #28
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	019a      	lsls	r2, r3, #6
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	071b      	lsls	r3, r3, #28
 8004c7a:	4929      	ldr	r1, [pc, #164]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d028      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c9c:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	019a      	lsls	r2, r3, #6
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	061b      	lsls	r3, r3, #24
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	4917      	ldr	r1, [pc, #92]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4911      	ldr	r1, [pc, #68]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cec:	f7fc fd40 	bl	8001770 <HAL_GetTick>
 8004cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cf4:	f7fc fd3c 	bl	8001770 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e007      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d1ef      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e025      	b.n	8004d84 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f81d 	bl	8004d8c <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f001 fb45 	bl	80063f4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	461a      	mov	r2, r3
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	f001 fbaf 	bl	80064d8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d101      	bne.n	8004dbc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
 8004dba:	e018      	b.n	8004dee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f001 fc03 	bl	80065d8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d104      	bne.n	8004de4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2205      	movs	r2, #5
 8004dde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004de2:	e003      	b.n	8004dec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d101      	bne.n	8004e10 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e00e      	b.n	8004e2e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 fbfb 	bl	800661a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e040      	b.n	8004eca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fc fb07 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2224      	movs	r2, #36	; 0x24
 8004e62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fbf7 	bl	8005668 <UART_SetConfig>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e022      	b.n	8004eca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fe4d 	bl	8005b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ea0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fed4 	bl	8005c70 <UART_CheckIdleState>
 8004ec8:	4603      	mov	r3, r0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b08a      	sub	sp, #40	; 0x28
 8004ed6:	af02      	add	r7, sp, #8
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	f040 8081 	bne.w	8004fee <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Transmit+0x26>
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e079      	b.n	8004ff0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_UART_Transmit+0x38>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e072      	b.n	8004ff0 <HAL_UART_Transmit+0x11e>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2221      	movs	r2, #33	; 0x21
 8004f1e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f20:	f7fc fc26 	bl	8001770 <HAL_GetTick>
 8004f24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d108      	bne.n	8004f52 <HAL_UART_Transmit+0x80>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	e003      	b.n	8004f5a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f62:	e02c      	b.n	8004fbe <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2180      	movs	r1, #128	; 0x80
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 feb1 	bl	8005cd6 <UART_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e038      	b.n	8004ff0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	3302      	adds	r3, #2
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e007      	b.n	8004fac <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	781a      	ldrb	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1cc      	bne.n	8004f64 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2140      	movs	r1, #64	; 0x40
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fe7e 	bl	8005cd6 <UART_WaitOnFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e005      	b.n	8004ff0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e000      	b.n	8004ff0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004fee:	2302      	movs	r3, #2
  }
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800500a:	2b20      	cmp	r3, #32
 800500c:	d13d      	bne.n	800508a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_UART_Receive_IT+0x22>
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e036      	b.n	800508c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_UART_Receive_IT+0x34>
 8005028:	2302      	movs	r3, #2
 800502a:	e02f      	b.n	800508c <HAL_UART_Receive_IT+0x94>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d018      	beq.n	800507a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	613b      	str	r3, [r7, #16]
   return(result);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	69f9      	ldr	r1, [r7, #28]
 800506c:	6a3a      	ldr	r2, [r7, #32]
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	61bb      	str	r3, [r7, #24]
   return(result);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e6      	bne.n	8005048 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	461a      	mov	r2, r3
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 feed 	bl	8005e60 <UART_Start_Receive_IT>
 8005086:	4603      	mov	r3, r0
 8005088:	e000      	b.n	800508c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b0ba      	sub	sp, #232	; 0xe8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80050be:	f640 030f 	movw	r3, #2063	; 0x80f
 80050c2:	4013      	ands	r3, r2
 80050c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80050c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d115      	bne.n	80050fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00f      	beq.n	80050fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d009      	beq.n	80050fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 828f 	beq.w	8005610 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
      }
      return;
 80050fa:	e289      	b.n	8005610 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80050fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8117 	beq.w	8005334 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005112:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005116:	4b85      	ldr	r3, [pc, #532]	; (800532c <HAL_UART_IRQHandler+0x298>)
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 810a 	beq.w	8005334 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d011      	beq.n	8005150 <HAL_UART_IRQHandler+0xbc>
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2201      	movs	r2, #1
 800513e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005146:	f043 0201 	orr.w	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d011      	beq.n	8005180 <HAL_UART_IRQHandler+0xec>
 800515c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00b      	beq.n	8005180 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2202      	movs	r2, #2
 800516e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005176:	f043 0204 	orr.w	r2, r3, #4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d011      	beq.n	80051b0 <HAL_UART_IRQHandler+0x11c>
 800518c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00b      	beq.n	80051b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2204      	movs	r2, #4
 800519e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051a6:	f043 0202 	orr.w	r2, r3, #2
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d017      	beq.n	80051ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80051c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2208      	movs	r2, #8
 80051da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e2:	f043 0208 	orr.w	r2, r3, #8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d012      	beq.n	800521e <HAL_UART_IRQHandler+0x18a>
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800520c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 81f5 	beq.w	8005614 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005258:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d005      	beq.n	8005276 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800526a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04f      	beq.n	8005316 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 febc 	bl	8005ff4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d141      	bne.n	800530e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1d9      	bne.n	800528a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d013      	beq.n	8005306 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <HAL_UART_IRQHandler+0x29c>)
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fc fde8 	bl	8001ec0 <HAL_DMA_Abort_IT>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d017      	beq.n	8005326 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005300:	4610      	mov	r0, r2
 8005302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005304:	e00f      	b.n	8005326 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f998 	bl	800563c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	e00b      	b.n	8005326 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f994 	bl	800563c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	e007      	b.n	8005326 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f990 	bl	800563c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005324:	e176      	b.n	8005614 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005326:	bf00      	nop
    return;
 8005328:	e174      	b.n	8005614 <HAL_UART_IRQHandler+0x580>
 800532a:	bf00      	nop
 800532c:	04000120 	.word	0x04000120
 8005330:	080060bb 	.word	0x080060bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005338:	2b01      	cmp	r3, #1
 800533a:	f040 8144 	bne.w	80055c6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 813d 	beq.w	80055c6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800534c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8136 	beq.w	80055c6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2210      	movs	r2, #16
 8005360:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	f040 80b2 	bne.w	80054d6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800537e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 8148 	beq.w	8005618 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800538e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005392:	429a      	cmp	r2, r3
 8005394:	f080 8140 	bcs.w	8005618 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800539e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ac:	f000 8085 	beq.w	80054ba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1da      	bne.n	80053b0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3308      	adds	r3, #8
 8005400:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800540a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800541e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005422:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005426:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e1      	bne.n	80053fa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800545a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800545c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e3      	bne.n	8005436 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548a:	f023 0310 	bic.w	r3, r3, #16
 800548e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800549c:	65bb      	str	r3, [r7, #88]	; 0x58
 800549e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e4      	bne.n	800547a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fc fc93 	bl	8001de0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8be 	bl	8005650 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054d4:	e0a0      	b.n	8005618 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8092 	beq.w	800561c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80054f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 808d 	beq.w	800561c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005516:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005524:	647b      	str	r3, [r7, #68]	; 0x44
 8005526:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800552a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e4      	bne.n	8005502 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	623b      	str	r3, [r7, #32]
   return(result);
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800555c:	633a      	str	r2, [r7, #48]	; 0x30
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e3      	bne.n	8005538 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0310 	bic.w	r3, r3, #16
 8005596:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	617b      	str	r3, [r7, #20]
   return(result);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e4      	bne.n	8005582 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f846 	bl	8005650 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055c4:	e02a      	b.n	800561c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01c      	beq.n	8005620 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
    }
    return;
 80055ee:	e017      	b.n	8005620 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d012      	beq.n	8005622 <HAL_UART_IRQHandler+0x58e>
 80055fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00c      	beq.n	8005622 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fd6c 	bl	80060e6 <UART_EndTransmit_IT>
    return;
 800560e:	e008      	b.n	8005622 <HAL_UART_IRQHandler+0x58e>
      return;
 8005610:	bf00      	nop
 8005612:	e006      	b.n	8005622 <HAL_UART_IRQHandler+0x58e>
    return;
 8005614:	bf00      	nop
 8005616:	e004      	b.n	8005622 <HAL_UART_IRQHandler+0x58e>
      return;
 8005618:	bf00      	nop
 800561a:	e002      	b.n	8005622 <HAL_UART_IRQHandler+0x58e>
      return;
 800561c:	bf00      	nop
 800561e:	e000      	b.n	8005622 <HAL_UART_IRQHandler+0x58e>
    return;
 8005620:	bf00      	nop
  }

}
 8005622:	37e8      	adds	r7, #232	; 0xe8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4ba7      	ldr	r3, [pc, #668]	; (8005930 <UART_SetConfig+0x2c8>)
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	6979      	ldr	r1, [r7, #20]
 800569c:	430b      	orrs	r3, r1
 800569e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a95      	ldr	r2, [pc, #596]	; (8005934 <UART_SetConfig+0x2cc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d120      	bne.n	8005726 <UART_SetConfig+0xbe>
 80056e4:	4b94      	ldr	r3, [pc, #592]	; (8005938 <UART_SetConfig+0x2d0>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d816      	bhi.n	8005720 <UART_SetConfig+0xb8>
 80056f2:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <UART_SetConfig+0x90>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005709 	.word	0x08005709
 80056fc:	08005715 	.word	0x08005715
 8005700:	0800570f 	.word	0x0800570f
 8005704:	0800571b 	.word	0x0800571b
 8005708:	2301      	movs	r3, #1
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e14f      	b.n	80059ae <UART_SetConfig+0x346>
 800570e:	2302      	movs	r3, #2
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e14c      	b.n	80059ae <UART_SetConfig+0x346>
 8005714:	2304      	movs	r3, #4
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e149      	b.n	80059ae <UART_SetConfig+0x346>
 800571a:	2308      	movs	r3, #8
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e146      	b.n	80059ae <UART_SetConfig+0x346>
 8005720:	2310      	movs	r3, #16
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e143      	b.n	80059ae <UART_SetConfig+0x346>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a84      	ldr	r2, [pc, #528]	; (800593c <UART_SetConfig+0x2d4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d132      	bne.n	8005796 <UART_SetConfig+0x12e>
 8005730:	4b81      	ldr	r3, [pc, #516]	; (8005938 <UART_SetConfig+0x2d0>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d828      	bhi.n	8005790 <UART_SetConfig+0x128>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <UART_SetConfig+0xdc>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005779 	.word	0x08005779
 8005748:	08005791 	.word	0x08005791
 800574c:	08005791 	.word	0x08005791
 8005750:	08005791 	.word	0x08005791
 8005754:	08005785 	.word	0x08005785
 8005758:	08005791 	.word	0x08005791
 800575c:	08005791 	.word	0x08005791
 8005760:	08005791 	.word	0x08005791
 8005764:	0800577f 	.word	0x0800577f
 8005768:	08005791 	.word	0x08005791
 800576c:	08005791 	.word	0x08005791
 8005770:	08005791 	.word	0x08005791
 8005774:	0800578b 	.word	0x0800578b
 8005778:	2300      	movs	r3, #0
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e117      	b.n	80059ae <UART_SetConfig+0x346>
 800577e:	2302      	movs	r3, #2
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e114      	b.n	80059ae <UART_SetConfig+0x346>
 8005784:	2304      	movs	r3, #4
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e111      	b.n	80059ae <UART_SetConfig+0x346>
 800578a:	2308      	movs	r3, #8
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e10e      	b.n	80059ae <UART_SetConfig+0x346>
 8005790:	2310      	movs	r3, #16
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e10b      	b.n	80059ae <UART_SetConfig+0x346>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a69      	ldr	r2, [pc, #420]	; (8005940 <UART_SetConfig+0x2d8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d120      	bne.n	80057e2 <UART_SetConfig+0x17a>
 80057a0:	4b65      	ldr	r3, [pc, #404]	; (8005938 <UART_SetConfig+0x2d0>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057aa:	2b30      	cmp	r3, #48	; 0x30
 80057ac:	d013      	beq.n	80057d6 <UART_SetConfig+0x16e>
 80057ae:	2b30      	cmp	r3, #48	; 0x30
 80057b0:	d814      	bhi.n	80057dc <UART_SetConfig+0x174>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d009      	beq.n	80057ca <UART_SetConfig+0x162>
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d810      	bhi.n	80057dc <UART_SetConfig+0x174>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <UART_SetConfig+0x15c>
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d006      	beq.n	80057d0 <UART_SetConfig+0x168>
 80057c2:	e00b      	b.n	80057dc <UART_SetConfig+0x174>
 80057c4:	2300      	movs	r3, #0
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e0f1      	b.n	80059ae <UART_SetConfig+0x346>
 80057ca:	2302      	movs	r3, #2
 80057cc:	77fb      	strb	r3, [r7, #31]
 80057ce:	e0ee      	b.n	80059ae <UART_SetConfig+0x346>
 80057d0:	2304      	movs	r3, #4
 80057d2:	77fb      	strb	r3, [r7, #31]
 80057d4:	e0eb      	b.n	80059ae <UART_SetConfig+0x346>
 80057d6:	2308      	movs	r3, #8
 80057d8:	77fb      	strb	r3, [r7, #31]
 80057da:	e0e8      	b.n	80059ae <UART_SetConfig+0x346>
 80057dc:	2310      	movs	r3, #16
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	e0e5      	b.n	80059ae <UART_SetConfig+0x346>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a57      	ldr	r2, [pc, #348]	; (8005944 <UART_SetConfig+0x2dc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d120      	bne.n	800582e <UART_SetConfig+0x1c6>
 80057ec:	4b52      	ldr	r3, [pc, #328]	; (8005938 <UART_SetConfig+0x2d0>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057f6:	2bc0      	cmp	r3, #192	; 0xc0
 80057f8:	d013      	beq.n	8005822 <UART_SetConfig+0x1ba>
 80057fa:	2bc0      	cmp	r3, #192	; 0xc0
 80057fc:	d814      	bhi.n	8005828 <UART_SetConfig+0x1c0>
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d009      	beq.n	8005816 <UART_SetConfig+0x1ae>
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d810      	bhi.n	8005828 <UART_SetConfig+0x1c0>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <UART_SetConfig+0x1a8>
 800580a:	2b40      	cmp	r3, #64	; 0x40
 800580c:	d006      	beq.n	800581c <UART_SetConfig+0x1b4>
 800580e:	e00b      	b.n	8005828 <UART_SetConfig+0x1c0>
 8005810:	2300      	movs	r3, #0
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e0cb      	b.n	80059ae <UART_SetConfig+0x346>
 8005816:	2302      	movs	r3, #2
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e0c8      	b.n	80059ae <UART_SetConfig+0x346>
 800581c:	2304      	movs	r3, #4
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e0c5      	b.n	80059ae <UART_SetConfig+0x346>
 8005822:	2308      	movs	r3, #8
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e0c2      	b.n	80059ae <UART_SetConfig+0x346>
 8005828:	2310      	movs	r3, #16
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e0bf      	b.n	80059ae <UART_SetConfig+0x346>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a45      	ldr	r2, [pc, #276]	; (8005948 <UART_SetConfig+0x2e0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d125      	bne.n	8005884 <UART_SetConfig+0x21c>
 8005838:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <UART_SetConfig+0x2d0>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005846:	d017      	beq.n	8005878 <UART_SetConfig+0x210>
 8005848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800584c:	d817      	bhi.n	800587e <UART_SetConfig+0x216>
 800584e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005852:	d00b      	beq.n	800586c <UART_SetConfig+0x204>
 8005854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005858:	d811      	bhi.n	800587e <UART_SetConfig+0x216>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <UART_SetConfig+0x1fe>
 800585e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005862:	d006      	beq.n	8005872 <UART_SetConfig+0x20a>
 8005864:	e00b      	b.n	800587e <UART_SetConfig+0x216>
 8005866:	2300      	movs	r3, #0
 8005868:	77fb      	strb	r3, [r7, #31]
 800586a:	e0a0      	b.n	80059ae <UART_SetConfig+0x346>
 800586c:	2302      	movs	r3, #2
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e09d      	b.n	80059ae <UART_SetConfig+0x346>
 8005872:	2304      	movs	r3, #4
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e09a      	b.n	80059ae <UART_SetConfig+0x346>
 8005878:	2308      	movs	r3, #8
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e097      	b.n	80059ae <UART_SetConfig+0x346>
 800587e:	2310      	movs	r3, #16
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e094      	b.n	80059ae <UART_SetConfig+0x346>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a30      	ldr	r2, [pc, #192]	; (800594c <UART_SetConfig+0x2e4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d125      	bne.n	80058da <UART_SetConfig+0x272>
 800588e:	4b2a      	ldr	r3, [pc, #168]	; (8005938 <UART_SetConfig+0x2d0>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005898:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800589c:	d017      	beq.n	80058ce <UART_SetConfig+0x266>
 800589e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058a2:	d817      	bhi.n	80058d4 <UART_SetConfig+0x26c>
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a8:	d00b      	beq.n	80058c2 <UART_SetConfig+0x25a>
 80058aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ae:	d811      	bhi.n	80058d4 <UART_SetConfig+0x26c>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <UART_SetConfig+0x254>
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b8:	d006      	beq.n	80058c8 <UART_SetConfig+0x260>
 80058ba:	e00b      	b.n	80058d4 <UART_SetConfig+0x26c>
 80058bc:	2301      	movs	r3, #1
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e075      	b.n	80059ae <UART_SetConfig+0x346>
 80058c2:	2302      	movs	r3, #2
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e072      	b.n	80059ae <UART_SetConfig+0x346>
 80058c8:	2304      	movs	r3, #4
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e06f      	b.n	80059ae <UART_SetConfig+0x346>
 80058ce:	2308      	movs	r3, #8
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e06c      	b.n	80059ae <UART_SetConfig+0x346>
 80058d4:	2310      	movs	r3, #16
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e069      	b.n	80059ae <UART_SetConfig+0x346>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <UART_SetConfig+0x2e8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d137      	bne.n	8005954 <UART_SetConfig+0x2ec>
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <UART_SetConfig+0x2d0>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058f2:	d017      	beq.n	8005924 <UART_SetConfig+0x2bc>
 80058f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058f8:	d817      	bhi.n	800592a <UART_SetConfig+0x2c2>
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fe:	d00b      	beq.n	8005918 <UART_SetConfig+0x2b0>
 8005900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005904:	d811      	bhi.n	800592a <UART_SetConfig+0x2c2>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <UART_SetConfig+0x2aa>
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590e:	d006      	beq.n	800591e <UART_SetConfig+0x2b6>
 8005910:	e00b      	b.n	800592a <UART_SetConfig+0x2c2>
 8005912:	2300      	movs	r3, #0
 8005914:	77fb      	strb	r3, [r7, #31]
 8005916:	e04a      	b.n	80059ae <UART_SetConfig+0x346>
 8005918:	2302      	movs	r3, #2
 800591a:	77fb      	strb	r3, [r7, #31]
 800591c:	e047      	b.n	80059ae <UART_SetConfig+0x346>
 800591e:	2304      	movs	r3, #4
 8005920:	77fb      	strb	r3, [r7, #31]
 8005922:	e044      	b.n	80059ae <UART_SetConfig+0x346>
 8005924:	2308      	movs	r3, #8
 8005926:	77fb      	strb	r3, [r7, #31]
 8005928:	e041      	b.n	80059ae <UART_SetConfig+0x346>
 800592a:	2310      	movs	r3, #16
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e03e      	b.n	80059ae <UART_SetConfig+0x346>
 8005930:	efff69f3 	.word	0xefff69f3
 8005934:	40011000 	.word	0x40011000
 8005938:	40023800 	.word	0x40023800
 800593c:	40004400 	.word	0x40004400
 8005940:	40004800 	.word	0x40004800
 8005944:	40004c00 	.word	0x40004c00
 8005948:	40005000 	.word	0x40005000
 800594c:	40011400 	.word	0x40011400
 8005950:	40007800 	.word	0x40007800
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a71      	ldr	r2, [pc, #452]	; (8005b20 <UART_SetConfig+0x4b8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d125      	bne.n	80059aa <UART_SetConfig+0x342>
 800595e:	4b71      	ldr	r3, [pc, #452]	; (8005b24 <UART_SetConfig+0x4bc>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005968:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800596c:	d017      	beq.n	800599e <UART_SetConfig+0x336>
 800596e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005972:	d817      	bhi.n	80059a4 <UART_SetConfig+0x33c>
 8005974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005978:	d00b      	beq.n	8005992 <UART_SetConfig+0x32a>
 800597a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597e:	d811      	bhi.n	80059a4 <UART_SetConfig+0x33c>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <UART_SetConfig+0x324>
 8005984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005988:	d006      	beq.n	8005998 <UART_SetConfig+0x330>
 800598a:	e00b      	b.n	80059a4 <UART_SetConfig+0x33c>
 800598c:	2300      	movs	r3, #0
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e00d      	b.n	80059ae <UART_SetConfig+0x346>
 8005992:	2302      	movs	r3, #2
 8005994:	77fb      	strb	r3, [r7, #31]
 8005996:	e00a      	b.n	80059ae <UART_SetConfig+0x346>
 8005998:	2304      	movs	r3, #4
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e007      	b.n	80059ae <UART_SetConfig+0x346>
 800599e:	2308      	movs	r3, #8
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e004      	b.n	80059ae <UART_SetConfig+0x346>
 80059a4:	2310      	movs	r3, #16
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e001      	b.n	80059ae <UART_SetConfig+0x346>
 80059aa:	2310      	movs	r3, #16
 80059ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b6:	d15a      	bne.n	8005a6e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80059b8:	7ffb      	ldrb	r3, [r7, #31]
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d827      	bhi.n	8005a0e <UART_SetConfig+0x3a6>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0x35c>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	08005a0f 	.word	0x08005a0f
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a0f 	.word	0x08005a0f
 80059e4:	08005a07 	.word	0x08005a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fe fd84 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 80059ec:	61b8      	str	r0, [r7, #24]
        break;
 80059ee:	e013      	b.n	8005a18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f0:	f7fe fd94 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 80059f4:	61b8      	str	r0, [r7, #24]
        break;
 80059f6:	e00f      	b.n	8005a18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b4b      	ldr	r3, [pc, #300]	; (8005b28 <UART_SetConfig+0x4c0>)
 80059fa:	61bb      	str	r3, [r7, #24]
        break;
 80059fc:	e00c      	b.n	8005a18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7fe fcb7 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8005a02:	61b8      	str	r0, [r7, #24]
        break;
 8005a04:	e008      	b.n	8005a18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0a:	61bb      	str	r3, [r7, #24]
        break;
 8005a0c:	e004      	b.n	8005a18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	77bb      	strb	r3, [r7, #30]
        break;
 8005a16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d074      	beq.n	8005b08 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	005a      	lsls	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	441a      	add	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d916      	bls.n	8005a68 <UART_SetConfig+0x400>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d212      	bcs.n	8005a68 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f023 030f 	bic.w	r3, r3, #15
 8005a4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	89fb      	ldrh	r3, [r7, #14]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	89fa      	ldrh	r2, [r7, #14]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e04f      	b.n	8005b08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	77bb      	strb	r3, [r7, #30]
 8005a6c:	e04c      	b.n	8005b08 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a6e:	7ffb      	ldrb	r3, [r7, #31]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d828      	bhi.n	8005ac6 <UART_SetConfig+0x45e>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <UART_SetConfig+0x414>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005aa1 	.word	0x08005aa1
 8005a80:	08005aa9 	.word	0x08005aa9
 8005a84:	08005ab1 	.word	0x08005ab1
 8005a88:	08005ac7 	.word	0x08005ac7
 8005a8c:	08005ab7 	.word	0x08005ab7
 8005a90:	08005ac7 	.word	0x08005ac7
 8005a94:	08005ac7 	.word	0x08005ac7
 8005a98:	08005ac7 	.word	0x08005ac7
 8005a9c:	08005abf 	.word	0x08005abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa0:	f7fe fd28 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 8005aa4:	61b8      	str	r0, [r7, #24]
        break;
 8005aa6:	e013      	b.n	8005ad0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa8:	f7fe fd38 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8005aac:	61b8      	str	r0, [r7, #24]
        break;
 8005aae:	e00f      	b.n	8005ad0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <UART_SetConfig+0x4c0>)
 8005ab2:	61bb      	str	r3, [r7, #24]
        break;
 8005ab4:	e00c      	b.n	8005ad0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab6:	f7fe fc5b 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8005aba:	61b8      	str	r0, [r7, #24]
        break;
 8005abc:	e008      	b.n	8005ad0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac2:	61bb      	str	r3, [r7, #24]
        break;
 8005ac4:	e004      	b.n	8005ad0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	77bb      	strb	r3, [r7, #30]
        break;
 8005ace:	bf00      	nop
    }

    if (pclk != 0U)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d018      	beq.n	8005b08 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	085a      	lsrs	r2, r3, #1
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	441a      	add	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b0f      	cmp	r3, #15
 8005aee:	d909      	bls.n	8005b04 <UART_SetConfig+0x49c>
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af6:	d205      	bcs.n	8005b04 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	e001      	b.n	8005b08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b14:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40007c00 	.word	0x40007c00
 8005b24:	40023800 	.word	0x40023800
 8005b28:	00f42400 	.word	0x00f42400

08005b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2a:	d10a      	bne.n	8005c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c80:	f7fb fd76 	bl	8001770 <HAL_GetTick>
 8005c84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d10e      	bne.n	8005cb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f817 	bl	8005cd6 <UART_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e00d      	b.n	8005cce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b09c      	sub	sp, #112	; 0x70
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce6:	e0a5      	b.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cee:	f000 80a1 	beq.w	8005e34 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fb fd3d 	bl	8001770 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d13e      	bne.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e6      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	663b      	str	r3, [r7, #96]	; 0x60
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3308      	adds	r3, #8
 8005d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e5      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e067      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d04f      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da2:	d147      	bne.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e6      	bne.n	8005dae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3308      	adds	r3, #8
 8005de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e00:	623a      	str	r2, [r7, #32]
 8005e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e5      	bne.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e010      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	f43f af4a 	beq.w	8005ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3770      	adds	r7, #112	; 0x70
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b097      	sub	sp, #92	; 0x5c
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e92:	d10e      	bne.n	8005eb2 <UART_Start_Receive_IT+0x52>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <UART_Start_Receive_IT+0x48>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ea6:	e02d      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	22ff      	movs	r2, #255	; 0xff
 8005eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb0:	e028      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10d      	bne.n	8005ed6 <UART_Start_Receive_IT+0x76>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <UART_Start_Receive_IT+0x6c>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	22ff      	movs	r2, #255	; 0xff
 8005ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eca:	e01b      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	227f      	movs	r2, #127	; 0x7f
 8005ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ed4:	e016      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ede:	d10d      	bne.n	8005efc <UART_Start_Receive_IT+0x9c>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <UART_Start_Receive_IT+0x92>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	227f      	movs	r2, #127	; 0x7f
 8005eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ef0:	e008      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	223f      	movs	r2, #63	; 0x3f
 8005ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005efa:	e003      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2222      	movs	r2, #34	; 0x22
 8005f10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	657b      	str	r3, [r7, #84]	; 0x54
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f32:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e5      	bne.n	8005f12 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4e:	d107      	bne.n	8005f60 <UART_Start_Receive_IT+0x100>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a24      	ldr	r2, [pc, #144]	; (8005fec <UART_Start_Receive_IT+0x18c>)
 8005f5c:	665a      	str	r2, [r3, #100]	; 0x64
 8005f5e:	e002      	b.n	8005f66 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a23      	ldr	r2, [pc, #140]	; (8005ff0 <UART_Start_Receive_IT+0x190>)
 8005f64:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d019      	beq.n	8005faa <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
 8005f96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e6      	bne.n	8005f76 <UART_Start_Receive_IT+0x116>
 8005fa8:	e018      	b.n	8005fdc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f043 0320 	orr.w	r3, r3, #32
 8005fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	6a3a      	ldr	r2, [r7, #32]
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e6      	bne.n	8005faa <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	375c      	adds	r7, #92	; 0x5c
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	08006297 	.word	0x08006297
 8005ff0:	0800613b 	.word	0x0800613b

08005ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b095      	sub	sp, #84	; 0x54
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601a:	643b      	str	r3, [r7, #64]	; 0x40
 800601c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e6      	bne.n	8005ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	61fb      	str	r3, [r7, #28]
   return(result);
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	64bb      	str	r3, [r7, #72]	; 0x48
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800604e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006066:	2b01      	cmp	r3, #1
 8006068:	d118      	bne.n	800609c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	60bb      	str	r3, [r7, #8]
   return(result);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f023 0310 	bic.w	r3, r3, #16
 800607e:	647b      	str	r3, [r7, #68]	; 0x44
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6979      	ldr	r1, [r7, #20]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	613b      	str	r3, [r7, #16]
   return(result);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	665a      	str	r2, [r3, #100]	; 0x64
}
 80060ae:	bf00      	nop
 80060b0:	3754      	adds	r7, #84	; 0x54
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff faaf 	bl	800563c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b088      	sub	sp, #32
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6979      	ldr	r1, [r7, #20]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	613b      	str	r3, [r7, #16]
   return(result);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e6      	bne.n	80060ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fa7b 	bl	8005628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006132:	bf00      	nop
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b096      	sub	sp, #88	; 0x58
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006148:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006150:	2b22      	cmp	r3, #34	; 0x22
 8006152:	f040 8094 	bne.w	800627e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006160:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006164:	b2d9      	uxtb	r1, r3
 8006166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800616a:	b2da      	uxtb	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	400a      	ands	r2, r1
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d177      	bne.n	800628e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b2:	653b      	str	r3, [r7, #80]	; 0x50
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061bc:	647b      	str	r3, [r7, #68]	; 0x44
 80061be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e6      	bne.n	800619e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3308      	adds	r3, #8
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	623b      	str	r3, [r7, #32]
   return(result);
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	f023 0301 	bic.w	r3, r3, #1
 80061e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f0:	633a      	str	r2, [r7, #48]	; 0x30
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e5      	bne.n	80061d0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006214:	2b01      	cmp	r3, #1
 8006216:	d12e      	bne.n	8006276 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	60fb      	str	r3, [r7, #12]
   return(result);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0310 	bic.w	r3, r3, #16
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69b9      	ldr	r1, [r7, #24]
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	617b      	str	r3, [r7, #20]
   return(result);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	2b10      	cmp	r3, #16
 800625c:	d103      	bne.n	8006266 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2210      	movs	r2, #16
 8006264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff f9ee 	bl	8005650 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006274:	e00b      	b.n	800628e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fa fbc6 	bl	8000a08 <HAL_UART_RxCpltCallback>
}
 800627c:	e007      	b.n	800628e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0208 	orr.w	r2, r2, #8
 800628c:	619a      	str	r2, [r3, #24]
}
 800628e:	bf00      	nop
 8006290:	3758      	adds	r7, #88	; 0x58
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b096      	sub	sp, #88	; 0x58
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ac:	2b22      	cmp	r3, #34	; 0x22
 80062ae:	f040 8094 	bne.w	80063da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80062c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80062c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062ca:	4013      	ands	r3, r2
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d6:	1c9a      	adds	r2, r3, #2
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d177      	bne.n	80063ea <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800630e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006318:	643b      	str	r3, [r7, #64]	; 0x40
 800631a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800631e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e6      	bne.n	80062fa <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	61fb      	str	r3, [r7, #28]
   return(result);
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	64bb      	str	r3, [r7, #72]	; 0x48
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3308      	adds	r3, #8
 800634a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e5      	bne.n	800632c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006370:	2b01      	cmp	r3, #1
 8006372:	d12e      	bne.n	80063d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	60bb      	str	r3, [r7, #8]
   return(result);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f023 0310 	bic.w	r3, r3, #16
 800638e:	647b      	str	r3, [r7, #68]	; 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6979      	ldr	r1, [r7, #20]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	613b      	str	r3, [r7, #16]
   return(result);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e6      	bne.n	800637a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d103      	bne.n	80063c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2210      	movs	r2, #16
 80063c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff f940 	bl	8005650 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063d0:	e00b      	b.n	80063ea <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fa fb18 	bl	8000a08 <HAL_UART_RxCpltCallback>
}
 80063d8:	e007      	b.n	80063ea <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0208 	orr.w	r2, r2, #8
 80063e8:	619a      	str	r2, [r3, #24]
}
 80063ea:	bf00      	nop
 80063ec:	3758      	adds	r7, #88	; 0x58
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d027      	beq.n	800645e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <FMC_SDRAM_Init+0xe0>)
 8006418:	4013      	ands	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006424:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800642a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006430:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006436:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800643c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006442:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006448:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800644e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e032      	b.n	80064c4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800646a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006474:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800647a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <FMC_SDRAM_Init+0xe0>)
 800648c:	4013      	ands	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006498:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800649e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80064a4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80064aa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80064b0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	ffff8000 	.word	0xffff8000

080064d8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d02e      	beq.n	8006550 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80064fe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	3b01      	subs	r3, #1
 800650c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800650e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	3b01      	subs	r3, #1
 8006516:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006518:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	3b01      	subs	r3, #1
 8006520:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006522:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	3b01      	subs	r3, #1
 800652a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800652c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	3b01      	subs	r3, #1
 8006534:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006536:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	3b01      	subs	r3, #1
 800653e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006540:	4313      	orrs	r3, r2
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	609a      	str	r2, [r3, #8]
 800654e:	e039      	b.n	80065c4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <FMC_SDRAM_Timing_Init+0xfc>)
 800655a:	4013      	ands	r3, r2
 800655c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	3b01      	subs	r3, #1
 8006564:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	3b01      	subs	r3, #1
 800656c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800656e:	4313      	orrs	r3, r2
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006582:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	3b01      	subs	r3, #1
 8006590:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006592:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	3b01      	subs	r3, #1
 800659a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800659c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80065a6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80065b0:	4313      	orrs	r3, r2
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	ff0f0fff 	.word	0xff0f0fff

080065d8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80065f0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80065fa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800664a:	20c8      	movs	r0, #200	; 0xc8
 800664c:	f000 fc32 	bl	8006eb4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8006650:	f000 fa7a 	bl	8006b48 <ft5336_I2C_InitializeIfRequired>
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	4603      	mov	r3, r0
 800667a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8006684:	2300      	movs	r3, #0
 8006686:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8006688:	f000 fa5e 	bl	8006b48 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800668c:	2300      	movs	r3, #0
 800668e:	73fb      	strb	r3, [r7, #15]
 8006690:	e010      	b.n	80066b4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	21a8      	movs	r1, #168	; 0xa8
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fbed 	bl	8006e78 <TS_IO_Read>
 800669e:	4603      	mov	r3, r0
 80066a0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80066a2:	7b7b      	ldrb	r3, [r7, #13]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b51      	cmp	r3, #81	; 0x51
 80066a8:	d101      	bne.n	80066ae <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80066aa:	2301      	movs	r3, #1
 80066ac:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	3301      	adds	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d802      	bhi.n	80066c0 <ft5336_ReadID+0x4e>
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0e8      	beq.n	8006692 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80066c0:	7b7b      	ldrb	r3, [r7, #13]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	b29b      	uxth	r3, r3
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	4603      	mov	r3, r0
 80066d6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fa44 	bl	8006b68 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f932 	bl	800694c <ft5336_TS_DisableIT>
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80066fe:	88fb      	ldrh	r3, [r7, #6]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2102      	movs	r1, #2
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fbb7 	bl	8006e78 <TS_IO_Read>
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	b2db      	uxtb	r3, r3
 8006718:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b05      	cmp	r3, #5
 8006720:	d901      	bls.n	8006726 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	b2da      	uxtb	r2, r3
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <ft5336_TS_DetectTouch+0x50>)
 800672c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800672e:	4b04      	ldr	r3, [pc, #16]	; (8006740 <ft5336_TS_DetectTouch+0x50>)
 8006730:	2200      	movs	r2, #0
 8006732:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	b2db      	uxtb	r3, r3
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	200000f4 	.word	0x200000f4

08006744 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8006766:	4b6d      	ldr	r3, [pc, #436]	; (800691c <ft5336_TS_GetXY+0x1d8>)
 8006768:	789a      	ldrb	r2, [r3, #2]
 800676a:	4b6c      	ldr	r3, [pc, #432]	; (800691c <ft5336_TS_GetXY+0x1d8>)
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	429a      	cmp	r2, r3
 8006770:	f080 80cf 	bcs.w	8006912 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8006774:	4b69      	ldr	r3, [pc, #420]	; (800691c <ft5336_TS_GetXY+0x1d8>)
 8006776:	789b      	ldrb	r3, [r3, #2]
 8006778:	2b09      	cmp	r3, #9
 800677a:	d871      	bhi.n	8006860 <ft5336_TS_GetXY+0x11c>
 800677c:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <ft5336_TS_GetXY+0x40>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	080067ad 	.word	0x080067ad
 8006788:	080067bf 	.word	0x080067bf
 800678c:	080067d1 	.word	0x080067d1
 8006790:	080067e3 	.word	0x080067e3
 8006794:	080067f5 	.word	0x080067f5
 8006798:	08006807 	.word	0x08006807
 800679c:	08006819 	.word	0x08006819
 80067a0:	0800682b 	.word	0x0800682b
 80067a4:	0800683d 	.word	0x0800683d
 80067a8:	0800684f 	.word	0x0800684f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80067ac:	2304      	movs	r3, #4
 80067ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80067b0:	2303      	movs	r3, #3
 80067b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80067b4:	2306      	movs	r3, #6
 80067b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80067b8:	2305      	movs	r3, #5
 80067ba:	753b      	strb	r3, [r7, #20]
      break;
 80067bc:	e051      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80067be:	230a      	movs	r3, #10
 80067c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80067c2:	2309      	movs	r3, #9
 80067c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80067c6:	230c      	movs	r3, #12
 80067c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80067ca:	230b      	movs	r3, #11
 80067cc:	753b      	strb	r3, [r7, #20]
      break;
 80067ce:	e048      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80067d0:	2310      	movs	r3, #16
 80067d2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80067d4:	230f      	movs	r3, #15
 80067d6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80067d8:	2312      	movs	r3, #18
 80067da:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80067dc:	2311      	movs	r3, #17
 80067de:	753b      	strb	r3, [r7, #20]
      break;
 80067e0:	e03f      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80067e2:	2316      	movs	r3, #22
 80067e4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80067e6:	2315      	movs	r3, #21
 80067e8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80067ea:	2318      	movs	r3, #24
 80067ec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80067ee:	2317      	movs	r3, #23
 80067f0:	753b      	strb	r3, [r7, #20]
      break;
 80067f2:	e036      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80067f4:	231c      	movs	r3, #28
 80067f6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80067f8:	231b      	movs	r3, #27
 80067fa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80067fc:	231e      	movs	r3, #30
 80067fe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8006800:	231d      	movs	r3, #29
 8006802:	753b      	strb	r3, [r7, #20]
      break;
 8006804:	e02d      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8006806:	2322      	movs	r3, #34	; 0x22
 8006808:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800680a:	2321      	movs	r3, #33	; 0x21
 800680c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800680e:	2324      	movs	r3, #36	; 0x24
 8006810:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8006812:	2323      	movs	r3, #35	; 0x23
 8006814:	753b      	strb	r3, [r7, #20]
      break;
 8006816:	e024      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8006818:	2328      	movs	r3, #40	; 0x28
 800681a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800681c:	2327      	movs	r3, #39	; 0x27
 800681e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8006820:	232a      	movs	r3, #42	; 0x2a
 8006822:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8006824:	2329      	movs	r3, #41	; 0x29
 8006826:	753b      	strb	r3, [r7, #20]
      break;
 8006828:	e01b      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800682a:	232e      	movs	r3, #46	; 0x2e
 800682c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800682e:	232d      	movs	r3, #45	; 0x2d
 8006830:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8006832:	2330      	movs	r3, #48	; 0x30
 8006834:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8006836:	232f      	movs	r3, #47	; 0x2f
 8006838:	753b      	strb	r3, [r7, #20]
      break;
 800683a:	e012      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800683c:	2334      	movs	r3, #52	; 0x34
 800683e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8006840:	2333      	movs	r3, #51	; 0x33
 8006842:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8006844:	2336      	movs	r3, #54	; 0x36
 8006846:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8006848:	2335      	movs	r3, #53	; 0x35
 800684a:	753b      	strb	r3, [r7, #20]
      break;
 800684c:	e009      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800684e:	233a      	movs	r3, #58	; 0x3a
 8006850:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8006852:	2339      	movs	r3, #57	; 0x39
 8006854:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8006856:	233c      	movs	r3, #60	; 0x3c
 8006858:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800685a:	233b      	movs	r3, #59	; 0x3b
 800685c:	753b      	strb	r3, [r7, #20]
      break;
 800685e:	e000      	b.n	8006862 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8006860:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8006862:	89fb      	ldrh	r3, [r7, #14]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	7dfa      	ldrb	r2, [r7, #23]
 8006868:	4611      	mov	r1, r2
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fb04 	bl	8006e78 <TS_IO_Read>
 8006870:	4603      	mov	r3, r0
 8006872:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006874:	7cfb      	ldrb	r3, [r7, #19]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	b29a      	uxth	r2, r3
 800687a:	4b29      	ldr	r3, [pc, #164]	; (8006920 <ft5336_TS_GetXY+0x1dc>)
 800687c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	7dba      	ldrb	r2, [r7, #22]
 8006884:	4611      	mov	r1, r2
 8006886:	4618      	mov	r0, r3
 8006888:	f000 faf6 	bl	8006e78 <TS_IO_Read>
 800688c:	4603      	mov	r3, r0
 800688e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006890:	7cfb      	ldrb	r3, [r7, #19]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800689a:	b21a      	sxth	r2, r3
 800689c:	4b20      	ldr	r3, [pc, #128]	; (8006920 <ft5336_TS_GetXY+0x1dc>)
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b21b      	sxth	r3, r3
 80068a2:	4313      	orrs	r3, r2
 80068a4:	b21b      	sxth	r3, r3
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <ft5336_TS_GetXY+0x1dc>)
 80068aa:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80068ac:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <ft5336_TS_GetXY+0x1dc>)
 80068ae:	881a      	ldrh	r2, [r3, #0]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	7d7a      	ldrb	r2, [r7, #21]
 80068ba:	4611      	mov	r1, r2
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fadb 	bl	8006e78 <TS_IO_Read>
 80068c2:	4603      	mov	r3, r0
 80068c4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80068c6:	7cfb      	ldrb	r3, [r7, #19]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	4b14      	ldr	r3, [pc, #80]	; (8006920 <ft5336_TS_GetXY+0x1dc>)
 80068ce:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80068d0:	89fb      	ldrh	r3, [r7, #14]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	7d3a      	ldrb	r2, [r7, #20]
 80068d6:	4611      	mov	r1, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 facd 	bl	8006e78 <TS_IO_Read>
 80068de:	4603      	mov	r3, r0
 80068e0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80068e2:	7cfb      	ldrb	r3, [r7, #19]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068ec:	b21a      	sxth	r2, r3
 80068ee:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <ft5336_TS_GetXY+0x1dc>)
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b21b      	sxth	r3, r3
 80068f4:	4313      	orrs	r3, r2
 80068f6:	b21b      	sxth	r3, r3
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <ft5336_TS_GetXY+0x1dc>)
 80068fc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80068fe:	4b08      	ldr	r3, [pc, #32]	; (8006920 <ft5336_TS_GetXY+0x1dc>)
 8006900:	881a      	ldrh	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <ft5336_TS_GetXY+0x1d8>)
 8006908:	789b      	ldrb	r3, [r3, #2]
 800690a:	3301      	adds	r3, #1
 800690c:	b2da      	uxtb	r2, r3
 800690e:	4b03      	ldr	r3, [pc, #12]	; (800691c <ft5336_TS_GetXY+0x1d8>)
 8006910:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8006912:	bf00      	nop
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	200000f4 	.word	0x200000f4
 8006920:	200000f8 	.word	0x200000f8

08006924 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	7bfa      	ldrb	r2, [r7, #15]
 800693c:	21a4      	movs	r1, #164	; 0xa4
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fa80 	bl	8006e44 <TS_IO_Write>
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	7bfa      	ldrb	r2, [r7, #15]
 8006964:	21a4      	movs	r1, #164	; 0xa4
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fa6c 	bl	8006e44 <TS_IO_Write>
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	4603      	mov	r3, r0
 80069aa:	6039      	str	r1, [r7, #0]
 80069ac:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2101      	movs	r1, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fa5d 	bl	8006e78 <TS_IO_Read>
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	601a      	str	r2, [r3, #0]
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4603      	mov	r3, r0
 80069e2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80069f4:	4b4d      	ldr	r3, [pc, #308]	; (8006b2c <ft5336_TS_GetTouchInfo+0x158>)
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	461a      	mov	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4293      	cmp	r3, r2
 80069fe:	f080 8090 	bcs.w	8006b22 <ft5336_TS_GetTouchInfo+0x14e>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d85d      	bhi.n	8006ac4 <ft5336_TS_GetTouchInfo+0xf0>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <ft5336_TS_GetTouchInfo+0x3c>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a47 	.word	0x08006a47
 8006a18:	08006a55 	.word	0x08006a55
 8006a1c:	08006a63 	.word	0x08006a63
 8006a20:	08006a71 	.word	0x08006a71
 8006a24:	08006a7f 	.word	0x08006a7f
 8006a28:	08006a8d 	.word	0x08006a8d
 8006a2c:	08006a9b 	.word	0x08006a9b
 8006a30:	08006aa9 	.word	0x08006aa9
 8006a34:	08006ab7 	.word	0x08006ab7
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8006a3c:	2307      	movs	r3, #7
 8006a3e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8006a40:	2308      	movs	r3, #8
 8006a42:	757b      	strb	r3, [r7, #21]
      break;
 8006a44:	e03f      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8006a46:	2309      	movs	r3, #9
 8006a48:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8006a4a:	230d      	movs	r3, #13
 8006a4c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8006a4e:	230e      	movs	r3, #14
 8006a50:	757b      	strb	r3, [r7, #21]
      break;
 8006a52:	e038      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8006a54:	230f      	movs	r3, #15
 8006a56:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8006a58:	2313      	movs	r3, #19
 8006a5a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8006a5c:	2314      	movs	r3, #20
 8006a5e:	757b      	strb	r3, [r7, #21]
      break;
 8006a60:	e031      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8006a62:	2315      	movs	r3, #21
 8006a64:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8006a66:	2319      	movs	r3, #25
 8006a68:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8006a6a:	231a      	movs	r3, #26
 8006a6c:	757b      	strb	r3, [r7, #21]
      break;
 8006a6e:	e02a      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8006a70:	231b      	movs	r3, #27
 8006a72:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8006a74:	231f      	movs	r3, #31
 8006a76:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8006a78:	2320      	movs	r3, #32
 8006a7a:	757b      	strb	r3, [r7, #21]
      break;
 8006a7c:	e023      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8006a7e:	2321      	movs	r3, #33	; 0x21
 8006a80:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8006a82:	2325      	movs	r3, #37	; 0x25
 8006a84:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8006a86:	2326      	movs	r3, #38	; 0x26
 8006a88:	757b      	strb	r3, [r7, #21]
      break;
 8006a8a:	e01c      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8006a8c:	2327      	movs	r3, #39	; 0x27
 8006a8e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8006a90:	232b      	movs	r3, #43	; 0x2b
 8006a92:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8006a94:	232c      	movs	r3, #44	; 0x2c
 8006a96:	757b      	strb	r3, [r7, #21]
      break;
 8006a98:	e015      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8006a9a:	232d      	movs	r3, #45	; 0x2d
 8006a9c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8006a9e:	2331      	movs	r3, #49	; 0x31
 8006aa0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8006aa2:	2332      	movs	r3, #50	; 0x32
 8006aa4:	757b      	strb	r3, [r7, #21]
      break;
 8006aa6:	e00e      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8006aa8:	2333      	movs	r3, #51	; 0x33
 8006aaa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8006aac:	2337      	movs	r3, #55	; 0x37
 8006aae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8006ab0:	2338      	movs	r3, #56	; 0x38
 8006ab2:	757b      	strb	r3, [r7, #21]
      break;
 8006ab4:	e007      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8006ab6:	2339      	movs	r3, #57	; 0x39
 8006ab8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8006aba:	233d      	movs	r3, #61	; 0x3d
 8006abc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8006abe:	233e      	movs	r3, #62	; 0x3e
 8006ac0:	757b      	strb	r3, [r7, #21]
      break;
 8006ac2:	e000      	b.n	8006ac6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8006ac4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006ac6:	89fb      	ldrh	r3, [r7, #14]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	7dfa      	ldrb	r2, [r7, #23]
 8006acc:	4611      	mov	r1, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f9d2 	bl	8006e78 <TS_IO_Read>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8006ad8:	7d3b      	ldrb	r3, [r7, #20]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	119b      	asrs	r3, r3, #6
 8006ade:	f003 0203 	and.w	r2, r3, #3
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006ae6:	89fb      	ldrh	r3, [r7, #14]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	7dba      	ldrb	r2, [r7, #22]
 8006aec:	4611      	mov	r1, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f9c2 	bl	8006e78 <TS_IO_Read>
 8006af4:	4603      	mov	r3, r0
 8006af6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8006af8:	7d3b      	ldrb	r3, [r7, #20]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8006b02:	89fb      	ldrh	r3, [r7, #14]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	7d7a      	ldrb	r2, [r7, #21]
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f9b4 	bl	8006e78 <TS_IO_Read>
 8006b10:	4603      	mov	r3, r0
 8006b12:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8006b14:	7d3b      	ldrb	r3, [r7, #20]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	111b      	asrs	r3, r3, #4
 8006b1a:	f003 0204 	and.w	r2, r3, #4
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8006b22:	bf00      	nop
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200000f4 	.word	0x200000f4

08006b30 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8006b34:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	200000f4 	.word	0x200000f4

08006b48 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8006b4c:	f7ff fff0 	bl	8006b30 <ft5336_Get_I2C_InitializedStatus>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8006b56:	f000 f96b 	bl	8006e30 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8006b5a:	4b02      	ldr	r3, [pc, #8]	; (8006b64 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
  }
}
 8006b60:	bf00      	nop
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	200000f4 	.word	0x200000f4

08006b68 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8006b76:	68fb      	ldr	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08c      	sub	sp, #48	; 0x30
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a51      	ldr	r2, [pc, #324]	; (8006cd4 <I2Cx_MspInit+0x150>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d14d      	bne.n	8006c30 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b94:	4b50      	ldr	r3, [pc, #320]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	4a4f      	ldr	r2, [pc, #316]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba0:	4b4d      	ldr	r3, [pc, #308]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006bb0:	2312      	movs	r3, #18
 8006bb2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006bc0:	f107 031c 	add.w	r3, r7, #28
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4845      	ldr	r0, [pc, #276]	; (8006cdc <I2Cx_MspInit+0x158>)
 8006bc8:	f7fb fcda 	bl	8002580 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006bd2:	f107 031c 	add.w	r3, r7, #28
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4840      	ldr	r0, [pc, #256]	; (8006cdc <I2Cx_MspInit+0x158>)
 8006bda:	f7fb fcd1 	bl	8002580 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006bde:	4b3e      	ldr	r3, [pc, #248]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	4a3d      	ldr	r2, [pc, #244]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006be8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bea:	4b3b      	ldr	r3, [pc, #236]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006bf6:	4b38      	ldr	r3, [pc, #224]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	4a37      	ldr	r2, [pc, #220]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006bfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c00:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006c02:	4b35      	ldr	r3, [pc, #212]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	4a34      	ldr	r2, [pc, #208]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c0c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006c0e:	2200      	movs	r2, #0
 8006c10:	210f      	movs	r1, #15
 8006c12:	2048      	movs	r0, #72	; 0x48
 8006c14:	f7fa feb7 	bl	8001986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8006c18:	2048      	movs	r0, #72	; 0x48
 8006c1a:	f7fa fed0 	bl	80019be <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	210f      	movs	r1, #15
 8006c22:	2049      	movs	r0, #73	; 0x49
 8006c24:	f7fa feaf 	bl	8001986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8006c28:	2049      	movs	r0, #73	; 0x49
 8006c2a:	f7fa fec8 	bl	80019be <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8006c2e:	e04d      	b.n	8006ccc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006c30:	4b29      	ldr	r3, [pc, #164]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	4a28      	ldr	r2, [pc, #160]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c36:	f043 0302 	orr.w	r3, r3, #2
 8006c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8006c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c4c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006c4e:	2312      	movs	r3, #18
 8006c50:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006c56:	2302      	movs	r3, #2
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8006c5a:	2304      	movs	r3, #4
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006c5e:	f107 031c 	add.w	r3, r7, #28
 8006c62:	4619      	mov	r1, r3
 8006c64:	481e      	ldr	r0, [pc, #120]	; (8006ce0 <I2Cx_MspInit+0x15c>)
 8006c66:	f7fb fc8b 	bl	8002580 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8006c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006c70:	f107 031c 	add.w	r3, r7, #28
 8006c74:	4619      	mov	r1, r3
 8006c76:	481a      	ldr	r0, [pc, #104]	; (8006ce0 <I2Cx_MspInit+0x15c>)
 8006c78:	f7fb fc82 	bl	8002580 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8006c7c:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c86:	6413      	str	r3, [r2, #64]	; 0x40
 8006c88:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8006c94:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	4a0f      	ldr	r2, [pc, #60]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c9e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	4a0c      	ldr	r2, [pc, #48]	; (8006cd8 <I2Cx_MspInit+0x154>)
 8006ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006caa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8006cac:	2200      	movs	r2, #0
 8006cae:	210f      	movs	r1, #15
 8006cb0:	201f      	movs	r0, #31
 8006cb2:	f7fa fe68 	bl	8001986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8006cb6:	201f      	movs	r0, #31
 8006cb8:	f7fa fe81 	bl	80019be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	210f      	movs	r1, #15
 8006cc0:	2020      	movs	r0, #32
 8006cc2:	f7fa fe60 	bl	8001986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8006cc6:	2020      	movs	r0, #32
 8006cc8:	f7fa fe79 	bl	80019be <HAL_NVIC_EnableIRQ>
}
 8006ccc:	bf00      	nop
 8006cce:	3730      	adds	r7, #48	; 0x30
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	200000fc 	.word	0x200000fc
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	40021c00 	.word	0x40021c00
 8006ce0:	40020400 	.word	0x40020400

08006ce4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fc f90f 	bl	8002f10 <HAL_I2C_GetState>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d125      	bne.n	8006d44 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a14      	ldr	r2, [pc, #80]	; (8006d4c <I2Cx_Init+0x68>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d103      	bne.n	8006d08 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a13      	ldr	r2, [pc, #76]	; (8006d50 <I2Cx_Init+0x6c>)
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e002      	b.n	8006d0e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <I2Cx_Init+0x70>)
 8006d0c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a11      	ldr	r2, [pc, #68]	; (8006d58 <I2Cx_Init+0x74>)
 8006d12:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff ff23 	bl	8006b84 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fb fde4 	bl	800290c <HAL_I2C_Init>
  }
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	200000fc 	.word	0x200000fc
 8006d50:	40005c00 	.word	0x40005c00
 8006d54:	40005400 	.word	0x40005400
 8006d58:	40912732 	.word	0x40912732

08006d5c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08a      	sub	sp, #40	; 0x28
 8006d60:	af04      	add	r7, sp, #16
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	4608      	mov	r0, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	72fb      	strb	r3, [r7, #11]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	813b      	strh	r3, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	b299      	uxth	r1, r3
 8006d7e:	88f8      	ldrh	r0, [r7, #6]
 8006d80:	893a      	ldrh	r2, [r7, #8]
 8006d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d86:	9302      	str	r3, [sp, #8]
 8006d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4603      	mov	r3, r0
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7fb ffa2 	bl	8002cdc <HAL_I2C_Mem_Read>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	4619      	mov	r1, r3
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f832 	bl	8006e10 <I2Cx_Error>
  }
  return status;    
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b08a      	sub	sp, #40	; 0x28
 8006dba:	af04      	add	r7, sp, #16
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	72fb      	strb	r3, [r7, #11]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	813b      	strh	r3, [r7, #8]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	b299      	uxth	r1, r3
 8006dd8:	88f8      	ldrh	r0, [r7, #6]
 8006dda:	893a      	ldrh	r2, [r7, #8]
 8006ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006de0:	9302      	str	r3, [sp, #8]
 8006de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	4603      	mov	r3, r0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7fb fe61 	bl	8002ab4 <HAL_I2C_Mem_Write>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f805 	bl	8006e10 <I2Cx_Error>
  }
  return status;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7fb fe05 	bl	8002a2c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff ff5e 	bl	8006ce4 <I2Cx_Init>
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8006e34:	4802      	ldr	r0, [pc, #8]	; (8006e40 <TS_IO_Init+0x10>)
 8006e36:	f7ff ff55 	bl	8006ce4 <I2Cx_Init>
}
 8006e3a:	bf00      	nop
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200000fc 	.word	0x200000fc

08006e44 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	71bb      	strb	r3, [r7, #6]
 8006e52:	4613      	mov	r3, r2
 8006e54:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006e56:	79bb      	ldrb	r3, [r7, #6]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	79f9      	ldrb	r1, [r7, #7]
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	1d7b      	adds	r3, r7, #5
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	2301      	movs	r3, #1
 8006e66:	4803      	ldr	r0, [pc, #12]	; (8006e74 <TS_IO_Write+0x30>)
 8006e68:	f7ff ffa5 	bl	8006db6 <I2Cx_WriteMultiple>
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	200000fc 	.word	0x200000fc

08006e78 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	4603      	mov	r3, r0
 8006e80:	460a      	mov	r2, r1
 8006e82:	71fb      	strb	r3, [r7, #7]
 8006e84:	4613      	mov	r3, r2
 8006e86:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006e8c:	79bb      	ldrb	r3, [r7, #6]
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	79f9      	ldrb	r1, [r7, #7]
 8006e92:	2301      	movs	r3, #1
 8006e94:	9301      	str	r3, [sp, #4]
 8006e96:	f107 030f 	add.w	r3, r7, #15
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4804      	ldr	r0, [pc, #16]	; (8006eb0 <TS_IO_Read+0x38>)
 8006ea0:	f7ff ff5c 	bl	8006d5c <I2Cx_ReadMultiple>

  return read_value;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	200000fc 	.word	0x200000fc

08006eb4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7fa fc63 	bl	8001788 <HAL_Delay>
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006ed0:	4b31      	ldr	r3, [pc, #196]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006ed2:	2228      	movs	r2, #40	; 0x28
 8006ed4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006ed6:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006ed8:	2209      	movs	r2, #9
 8006eda:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006edc:	4b2e      	ldr	r3, [pc, #184]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006ede:	2235      	movs	r2, #53	; 0x35
 8006ee0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006ee2:	4b2d      	ldr	r3, [pc, #180]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006ee4:	220b      	movs	r2, #11
 8006ee6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006ee8:	4b2b      	ldr	r3, [pc, #172]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006eea:	f240 121b 	movw	r2, #283	; 0x11b
 8006eee:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006ef0:	4b29      	ldr	r3, [pc, #164]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006ef2:	f240 2215 	movw	r2, #533	; 0x215
 8006ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006ef8:	4b27      	ldr	r3, [pc, #156]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006efa:	f240 121d 	movw	r2, #285	; 0x11d
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006f00:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f02:	f240 2235 	movw	r2, #565	; 0x235
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4823      	ldr	r0, [pc, #140]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f0c:	f000 fcf8 	bl	8007900 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006f10:	4b21      	ldr	r3, [pc, #132]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006f18:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f1a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006f1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006f20:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006f28:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006f30:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006f38:	4b17      	ldr	r3, [pc, #92]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006f3e:	4b16      	ldr	r3, [pc, #88]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006f44:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006f4a:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8006f50:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f52:	4a12      	ldr	r2, [pc, #72]	; (8006f9c <BSP_LCD_Init+0xd0>)
 8006f54:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006f56:	4810      	ldr	r0, [pc, #64]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f58:	f7fc fc7c 	bl	8003854 <HAL_LTDC_GetState>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d103      	bne.n	8006f6a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006f62:	2100      	movs	r1, #0
 8006f64:	480c      	ldr	r0, [pc, #48]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f66:	f000 fbf1 	bl	800774c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8006f6a:	480b      	ldr	r0, [pc, #44]	; (8006f98 <BSP_LCD_Init+0xcc>)
 8006f6c:	f7fc fa84 	bl	8003478 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006f70:	2201      	movs	r2, #1
 8006f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f76:	480a      	ldr	r0, [pc, #40]	; (8006fa0 <BSP_LCD_Init+0xd4>)
 8006f78:	f7fb fcae 	bl	80028d8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	2108      	movs	r1, #8
 8006f80:	4808      	ldr	r0, [pc, #32]	; (8006fa4 <BSP_LCD_Init+0xd8>)
 8006f82:	f7fb fca9 	bl	80028d8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8006f86:	f000 fddb 	bl	8007b40 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006f8a:	4807      	ldr	r0, [pc, #28]	; (8006fa8 <BSP_LCD_Init+0xdc>)
 8006f8c:	f000 f8be 	bl	800710c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	200003f0 	.word	0x200003f0
 8006f9c:	40016800 	.word	0x40016800
 8006fa0:	40022000 	.word	0x40022000
 8006fa4:	40022800 	.word	0x40022800
 8006fa8:	20000034 	.word	0x20000034

08006fac <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <BSP_LCD_GetXSize+0x20>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a06      	ldr	r2, [pc, #24]	; (8006fd0 <BSP_LCD_GetXSize+0x24>)
 8006fb6:	2134      	movs	r1, #52	; 0x34
 8006fb8:	fb01 f303 	mul.w	r3, r1, r3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3360      	adds	r3, #96	; 0x60
 8006fc0:	681b      	ldr	r3, [r3, #0]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20000188 	.word	0x20000188
 8006fd0:	200003f0 	.word	0x200003f0

08006fd4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006fd8:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <BSP_LCD_GetYSize+0x20>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a06      	ldr	r2, [pc, #24]	; (8006ff8 <BSP_LCD_GetYSize+0x24>)
 8006fde:	2134      	movs	r1, #52	; 0x34
 8006fe0:	fb01 f303 	mul.w	r3, r1, r3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3364      	adds	r3, #100	; 0x64
 8006fe8:	681b      	ldr	r3, [r3, #0]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	20000188 	.word	0x20000188
 8006ff8:	200003f0 	.word	0x200003f0

08006ffc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b090      	sub	sp, #64	; 0x40
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800700c:	f7ff ffce 	bl	8006fac <BSP_LCD_GetXSize>
 8007010:	4603      	mov	r3, r0
 8007012:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8007018:	f7ff ffdc 	bl	8006fd4 <BSP_LCD_GetYSize>
 800701c:	4603      	mov	r3, r0
 800701e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007020:	2300      	movs	r3, #0
 8007022:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8007028:	23ff      	movs	r3, #255	; 0xff
 800702a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800702c:	2300      	movs	r3, #0
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007042:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007048:	2307      	movs	r3, #7
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800704c:	f7ff ffae 	bl	8006fac <BSP_LCD_GetXSize>
 8007050:	4603      	mov	r3, r0
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8007054:	f7ff ffbe 	bl	8006fd4 <BSP_LCD_GetYSize>
 8007058:	4603      	mov	r3, r0
 800705a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	f107 030c 	add.w	r3, r7, #12
 8007062:	4619      	mov	r1, r3
 8007064:	4812      	ldr	r0, [pc, #72]	; (80070b0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8007066:	f7fc fbb7 	bl	80037d8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	4911      	ldr	r1, [pc, #68]	; (80070b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 800706e:	4613      	mov	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	3304      	adds	r3, #4
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	490c      	ldr	r1, [pc, #48]	; (80070b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8007084:	4613      	mov	r3, r2
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	3308      	adds	r3, #8
 8007090:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8007092:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8007094:	88fa      	ldrh	r2, [r7, #6]
 8007096:	4907      	ldr	r1, [pc, #28]	; (80070b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8007098:	4613      	mov	r3, r2
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80070a6:	601a      	str	r2, [r3, #0]
}
 80070a8:	bf00      	nop
 80070aa:	3740      	adds	r7, #64	; 0x40
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	200003f0 	.word	0x200003f0
 80070b4:	2000018c 	.word	0x2000018c
 80070b8:	20000034 	.word	0x20000034

080070bc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80070c4:	4a04      	ldr	r2, [pc, #16]	; (80070d8 <BSP_LCD_SelectLayer+0x1c>)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6013      	str	r3, [r2, #0]
} 
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	20000188 	.word	0x20000188

080070dc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80070e4:	4b07      	ldr	r3, [pc, #28]	; (8007104 <BSP_LCD_SetTextColor+0x28>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	4907      	ldr	r1, [pc, #28]	; (8007108 <BSP_LCD_SetTextColor+0x2c>)
 80070ea:	4613      	mov	r3, r2
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000188 	.word	0x20000188
 8007108:	2000018c 	.word	0x2000018c

0800710c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8007114:	4b08      	ldr	r3, [pc, #32]	; (8007138 <BSP_LCD_SetFont+0x2c>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	4908      	ldr	r1, [pc, #32]	; (800713c <BSP_LCD_SetFont+0x30>)
 800711a:	4613      	mov	r3, r2
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	3308      	adds	r3, #8
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000188 	.word	0x20000188
 800713c:	2000018c 	.word	0x2000018c

08007140 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8007140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007142:	b085      	sub	sp, #20
 8007144:	af02      	add	r7, sp, #8
 8007146:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <BSP_LCD_Clear+0x48>)
 800714a:	681c      	ldr	r4, [r3, #0]
 800714c:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <BSP_LCD_Clear+0x48>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0e      	ldr	r2, [pc, #56]	; (800718c <BSP_LCD_Clear+0x4c>)
 8007152:	2134      	movs	r1, #52	; 0x34
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	4413      	add	r3, r2
 800715a:	335c      	adds	r3, #92	; 0x5c
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	461e      	mov	r6, r3
 8007160:	f7ff ff24 	bl	8006fac <BSP_LCD_GetXSize>
 8007164:	4605      	mov	r5, r0
 8007166:	f7ff ff35 	bl	8006fd4 <BSP_LCD_GetYSize>
 800716a:	4602      	mov	r2, r0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	2300      	movs	r3, #0
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	462a      	mov	r2, r5
 8007178:	4631      	mov	r1, r6
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fc94 	bl	8007aa8 <LL_FillBuffer>
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007188:	20000188 	.word	0x20000188
 800718c:	200003f0 	.word	0x200003f0

08007190 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8007190:	b590      	push	{r4, r7, lr}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	80fb      	strh	r3, [r7, #6]
 800719a:	460b      	mov	r3, r1
 800719c:	80bb      	strh	r3, [r7, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80071a2:	4b1b      	ldr	r3, [pc, #108]	; (8007210 <BSP_LCD_DisplayChar+0x80>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	491b      	ldr	r1, [pc, #108]	; (8007214 <BSP_LCD_DisplayChar+0x84>)
 80071a8:	4613      	mov	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	3308      	adds	r3, #8
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6819      	ldr	r1, [r3, #0]
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80071be:	4b14      	ldr	r3, [pc, #80]	; (8007210 <BSP_LCD_DisplayChar+0x80>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4c14      	ldr	r4, [pc, #80]	; (8007214 <BSP_LCD_DisplayChar+0x84>)
 80071c4:	4613      	mov	r3, r2
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4423      	add	r3, r4
 80071ce:	3308      	adds	r3, #8
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80071d4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80071d8:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <BSP_LCD_DisplayChar+0x80>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	4c0d      	ldr	r4, [pc, #52]	; (8007214 <BSP_LCD_DisplayChar+0x84>)
 80071de:	4613      	mov	r3, r2
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4423      	add	r3, r4
 80071e8:	3308      	adds	r3, #8
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	889b      	ldrh	r3, [r3, #4]
 80071ee:	3307      	adds	r3, #7
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da00      	bge.n	80071f6 <BSP_LCD_DisplayChar+0x66>
 80071f4:	3307      	adds	r3, #7
 80071f6:	10db      	asrs	r3, r3, #3
 80071f8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80071fc:	18ca      	adds	r2, r1, r3
 80071fe:	88b9      	ldrh	r1, [r7, #4]
 8007200:	88fb      	ldrh	r3, [r7, #6]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fb98 	bl	8007938 <DrawChar>
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bd90      	pop	{r4, r7, pc}
 8007210:	20000188 	.word	0x20000188
 8007214:	2000018c 	.word	0x2000018c

08007218 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8007218:	b5b0      	push	{r4, r5, r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	60ba      	str	r2, [r7, #8]
 8007220:	461a      	mov	r2, r3
 8007222:	4603      	mov	r3, r0
 8007224:	81fb      	strh	r3, [r7, #14]
 8007226:	460b      	mov	r3, r1
 8007228:	81bb      	strh	r3, [r7, #12]
 800722a:	4613      	mov	r3, r2
 800722c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800722e:	2301      	movs	r3, #1
 8007230:	83fb      	strh	r3, [r7, #30]
 8007232:	2300      	movs	r3, #0
 8007234:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8007236:	2300      	movs	r3, #0
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	2300      	movs	r3, #0
 800723c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8007242:	e002      	b.n	800724a <BSP_LCD_DisplayStringAt+0x32>
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	3301      	adds	r3, #1
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	617a      	str	r2, [r7, #20]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f6      	bne.n	8007244 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8007256:	f7ff fea9 	bl	8006fac <BSP_LCD_GetXSize>
 800725a:	4601      	mov	r1, r0
 800725c:	4b50      	ldr	r3, [pc, #320]	; (80073a0 <BSP_LCD_DisplayStringAt+0x188>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4850      	ldr	r0, [pc, #320]	; (80073a4 <BSP_LCD_DisplayStringAt+0x18c>)
 8007262:	4613      	mov	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4403      	add	r3, r0
 800726c:	3308      	adds	r3, #8
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	889b      	ldrh	r3, [r3, #4]
 8007272:	fbb1 f3f3 	udiv	r3, r1, r3
 8007276:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	2b03      	cmp	r3, #3
 800727c:	d01c      	beq.n	80072b8 <BSP_LCD_DisplayStringAt+0xa0>
 800727e:	2b03      	cmp	r3, #3
 8007280:	dc33      	bgt.n	80072ea <BSP_LCD_DisplayStringAt+0xd2>
 8007282:	2b01      	cmp	r3, #1
 8007284:	d002      	beq.n	800728c <BSP_LCD_DisplayStringAt+0x74>
 8007286:	2b02      	cmp	r3, #2
 8007288:	d019      	beq.n	80072be <BSP_LCD_DisplayStringAt+0xa6>
 800728a:	e02e      	b.n	80072ea <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	1ad1      	subs	r1, r2, r3
 8007292:	4b43      	ldr	r3, [pc, #268]	; (80073a0 <BSP_LCD_DisplayStringAt+0x188>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4843      	ldr	r0, [pc, #268]	; (80073a4 <BSP_LCD_DisplayStringAt+0x18c>)
 8007298:	4613      	mov	r3, r2
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4403      	add	r3, r0
 80072a2:	3308      	adds	r3, #8
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	889b      	ldrh	r3, [r3, #4]
 80072a8:	fb03 f301 	mul.w	r3, r3, r1
 80072ac:	085b      	lsrs	r3, r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	89fb      	ldrh	r3, [r7, #14]
 80072b2:	4413      	add	r3, r2
 80072b4:	83fb      	strh	r3, [r7, #30]
      break;
 80072b6:	e01b      	b.n	80072f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80072b8:	89fb      	ldrh	r3, [r7, #14]
 80072ba:	83fb      	strh	r3, [r7, #30]
      break;
 80072bc:	e018      	b.n	80072f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	b299      	uxth	r1, r3
 80072c6:	4b36      	ldr	r3, [pc, #216]	; (80073a0 <BSP_LCD_DisplayStringAt+0x188>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	4836      	ldr	r0, [pc, #216]	; (80073a4 <BSP_LCD_DisplayStringAt+0x18c>)
 80072cc:	4613      	mov	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4403      	add	r3, r0
 80072d6:	3308      	adds	r3, #8
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	889b      	ldrh	r3, [r3, #4]
 80072dc:	fb11 f303 	smulbb	r3, r1, r3
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	89fb      	ldrh	r3, [r7, #14]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	83fb      	strh	r3, [r7, #30]
      break;
 80072e8:	e002      	b.n	80072f0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80072ea:	89fb      	ldrh	r3, [r7, #14]
 80072ec:	83fb      	strh	r3, [r7, #30]
      break;
 80072ee:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80072f0:	8bfb      	ldrh	r3, [r7, #30]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <BSP_LCD_DisplayStringAt+0xe6>
 80072f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	da1d      	bge.n	800733a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80072fe:	2301      	movs	r3, #1
 8007300:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8007302:	e01a      	b.n	800733a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	89b9      	ldrh	r1, [r7, #12]
 800730a:	8bfb      	ldrh	r3, [r7, #30]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff ff3f 	bl	8007190 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8007312:	4b23      	ldr	r3, [pc, #140]	; (80073a0 <BSP_LCD_DisplayStringAt+0x188>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4923      	ldr	r1, [pc, #140]	; (80073a4 <BSP_LCD_DisplayStringAt+0x18c>)
 8007318:	4613      	mov	r3, r2
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	3308      	adds	r3, #8
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	889a      	ldrh	r2, [r3, #4]
 8007328:	8bfb      	ldrh	r3, [r7, #30]
 800732a:	4413      	add	r3, r2
 800732c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	3301      	adds	r3, #1
 8007332:	60bb      	str	r3, [r7, #8]
    i++;
 8007334:	8bbb      	ldrh	r3, [r7, #28]
 8007336:	3301      	adds	r3, #1
 8007338:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	bf14      	ite	ne
 8007342:	2301      	movne	r3, #1
 8007344:	2300      	moveq	r3, #0
 8007346:	b2dc      	uxtb	r4, r3
 8007348:	f7ff fe30 	bl	8006fac <BSP_LCD_GetXSize>
 800734c:	8bb9      	ldrh	r1, [r7, #28]
 800734e:	4b14      	ldr	r3, [pc, #80]	; (80073a0 <BSP_LCD_DisplayStringAt+0x188>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4d14      	ldr	r5, [pc, #80]	; (80073a4 <BSP_LCD_DisplayStringAt+0x18c>)
 8007354:	4613      	mov	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	442b      	add	r3, r5
 800735e:	3308      	adds	r3, #8
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	889b      	ldrh	r3, [r3, #4]
 8007364:	fb03 f301 	mul.w	r3, r3, r1
 8007368:	1ac3      	subs	r3, r0, r3
 800736a:	b299      	uxth	r1, r3
 800736c:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <BSP_LCD_DisplayStringAt+0x188>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	480c      	ldr	r0, [pc, #48]	; (80073a4 <BSP_LCD_DisplayStringAt+0x18c>)
 8007372:	4613      	mov	r3, r2
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4403      	add	r3, r0
 800737c:	3308      	adds	r3, #8
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	889b      	ldrh	r3, [r3, #4]
 8007382:	4299      	cmp	r1, r3
 8007384:	bf2c      	ite	cs
 8007386:	2301      	movcs	r3, #1
 8007388:	2300      	movcc	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	4023      	ands	r3, r4
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1b7      	bne.n	8007304 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bdb0      	pop	{r4, r5, r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000188 	.word	0x20000188
 80073a4:	2000018c 	.word	0x2000018c

080073a8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80073a8:	b5b0      	push	{r4, r5, r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	4603      	mov	r3, r0
 80073b0:	80fb      	strh	r3, [r7, #6]
 80073b2:	460b      	mov	r3, r1
 80073b4:	80bb      	strh	r3, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80073be:	4b26      	ldr	r3, [pc, #152]	; (8007458 <BSP_LCD_DrawHLine+0xb0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a26      	ldr	r2, [pc, #152]	; (800745c <BSP_LCD_DrawHLine+0xb4>)
 80073c4:	2134      	movs	r1, #52	; 0x34
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	3348      	adds	r3, #72	; 0x48
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d114      	bne.n	80073fe <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80073d4:	4b20      	ldr	r3, [pc, #128]	; (8007458 <BSP_LCD_DrawHLine+0xb0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a20      	ldr	r2, [pc, #128]	; (800745c <BSP_LCD_DrawHLine+0xb4>)
 80073da:	2134      	movs	r1, #52	; 0x34
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	335c      	adds	r3, #92	; 0x5c
 80073e4:	681c      	ldr	r4, [r3, #0]
 80073e6:	f7ff fde1 	bl	8006fac <BSP_LCD_GetXSize>
 80073ea:	4602      	mov	r2, r0
 80073ec:	88bb      	ldrh	r3, [r7, #4]
 80073ee:	fb03 f202 	mul.w	r2, r3, r2
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	4413      	add	r3, r2
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	4423      	add	r3, r4
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e013      	b.n	8007426 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80073fe:	4b16      	ldr	r3, [pc, #88]	; (8007458 <BSP_LCD_DrawHLine+0xb0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a16      	ldr	r2, [pc, #88]	; (800745c <BSP_LCD_DrawHLine+0xb4>)
 8007404:	2134      	movs	r1, #52	; 0x34
 8007406:	fb01 f303 	mul.w	r3, r1, r3
 800740a:	4413      	add	r3, r2
 800740c:	335c      	adds	r3, #92	; 0x5c
 800740e:	681c      	ldr	r4, [r3, #0]
 8007410:	f7ff fdcc 	bl	8006fac <BSP_LCD_GetXSize>
 8007414:	4602      	mov	r2, r0
 8007416:	88bb      	ldrh	r3, [r7, #4]
 8007418:	fb03 f202 	mul.w	r2, r3, r2
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4423      	add	r3, r4
 8007424:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <BSP_LCD_DrawHLine+0xb0>)
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	887c      	ldrh	r4, [r7, #2]
 800742e:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <BSP_LCD_DrawHLine+0xb0>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4d0b      	ldr	r5, [pc, #44]	; (8007460 <BSP_LCD_DrawHLine+0xb8>)
 8007434:	4613      	mov	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	442b      	add	r3, r5
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	2300      	movs	r3, #0
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	2301      	movs	r3, #1
 8007448:	4622      	mov	r2, r4
 800744a:	f000 fb2d 	bl	8007aa8 <LL_FillBuffer>
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bdb0      	pop	{r4, r5, r7, pc}
 8007456:	bf00      	nop
 8007458:	20000188 	.word	0x20000188
 800745c:	200003f0 	.word	0x200003f0
 8007460:	2000018c 	.word	0x2000018c

08007464 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007466:	b087      	sub	sp, #28
 8007468:	af02      	add	r7, sp, #8
 800746a:	4603      	mov	r3, r0
 800746c:	80fb      	strh	r3, [r7, #6]
 800746e:	460b      	mov	r3, r1
 8007470:	80bb      	strh	r3, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800747a:	4b28      	ldr	r3, [pc, #160]	; (800751c <BSP_LCD_DrawVLine+0xb8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a28      	ldr	r2, [pc, #160]	; (8007520 <BSP_LCD_DrawVLine+0xbc>)
 8007480:	2134      	movs	r1, #52	; 0x34
 8007482:	fb01 f303 	mul.w	r3, r1, r3
 8007486:	4413      	add	r3, r2
 8007488:	3348      	adds	r3, #72	; 0x48
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d114      	bne.n	80074ba <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007490:	4b22      	ldr	r3, [pc, #136]	; (800751c <BSP_LCD_DrawVLine+0xb8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a22      	ldr	r2, [pc, #136]	; (8007520 <BSP_LCD_DrawVLine+0xbc>)
 8007496:	2134      	movs	r1, #52	; 0x34
 8007498:	fb01 f303 	mul.w	r3, r1, r3
 800749c:	4413      	add	r3, r2
 800749e:	335c      	adds	r3, #92	; 0x5c
 80074a0:	681c      	ldr	r4, [r3, #0]
 80074a2:	f7ff fd83 	bl	8006fac <BSP_LCD_GetXSize>
 80074a6:	4602      	mov	r2, r0
 80074a8:	88bb      	ldrh	r3, [r7, #4]
 80074aa:	fb03 f202 	mul.w	r2, r3, r2
 80074ae:	88fb      	ldrh	r3, [r7, #6]
 80074b0:	4413      	add	r3, r2
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	4423      	add	r3, r4
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	e013      	b.n	80074e2 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80074ba:	4b18      	ldr	r3, [pc, #96]	; (800751c <BSP_LCD_DrawVLine+0xb8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a18      	ldr	r2, [pc, #96]	; (8007520 <BSP_LCD_DrawVLine+0xbc>)
 80074c0:	2134      	movs	r1, #52	; 0x34
 80074c2:	fb01 f303 	mul.w	r3, r1, r3
 80074c6:	4413      	add	r3, r2
 80074c8:	335c      	adds	r3, #92	; 0x5c
 80074ca:	681c      	ldr	r4, [r3, #0]
 80074cc:	f7ff fd6e 	bl	8006fac <BSP_LCD_GetXSize>
 80074d0:	4602      	mov	r2, r0
 80074d2:	88bb      	ldrh	r3, [r7, #4]
 80074d4:	fb03 f202 	mul.w	r2, r3, r2
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4423      	add	r3, r4
 80074e0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80074e2:	4b0e      	ldr	r3, [pc, #56]	; (800751c <BSP_LCD_DrawVLine+0xb8>)
 80074e4:	681c      	ldr	r4, [r3, #0]
 80074e6:	68fd      	ldr	r5, [r7, #12]
 80074e8:	887e      	ldrh	r6, [r7, #2]
 80074ea:	f7ff fd5f 	bl	8006fac <BSP_LCD_GetXSize>
 80074ee:	4603      	mov	r3, r0
 80074f0:	1e59      	subs	r1, r3, #1
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <BSP_LCD_DrawVLine+0xb8>)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	480b      	ldr	r0, [pc, #44]	; (8007524 <BSP_LCD_DrawVLine+0xc0>)
 80074f8:	4613      	mov	r3, r2
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4403      	add	r3, r0
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	9100      	str	r1, [sp, #0]
 8007508:	4633      	mov	r3, r6
 800750a:	2201      	movs	r2, #1
 800750c:	4629      	mov	r1, r5
 800750e:	4620      	mov	r0, r4
 8007510:	f000 faca 	bl	8007aa8 <LL_FillBuffer>
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751c:	20000188 	.word	0x20000188
 8007520:	200003f0 	.word	0x200003f0
 8007524:	2000018c 	.word	0x2000018c

08007528 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007528:	b590      	push	{r4, r7, lr}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	4611      	mov	r1, r2
 8007534:	461a      	mov	r2, r3
 8007536:	4623      	mov	r3, r4
 8007538:	80fb      	strh	r3, [r7, #6]
 800753a:	4603      	mov	r3, r0
 800753c:	80bb      	strh	r3, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	807b      	strh	r3, [r7, #2]
 8007542:	4613      	mov	r3, r2
 8007544:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8007546:	887a      	ldrh	r2, [r7, #2]
 8007548:	88b9      	ldrh	r1, [r7, #4]
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff ff2b 	bl	80073a8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8007552:	88ba      	ldrh	r2, [r7, #4]
 8007554:	883b      	ldrh	r3, [r7, #0]
 8007556:	4413      	add	r3, r2
 8007558:	b299      	uxth	r1, r3
 800755a:	887a      	ldrh	r2, [r7, #2]
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff ff22 	bl	80073a8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8007564:	883a      	ldrh	r2, [r7, #0]
 8007566:	88b9      	ldrh	r1, [r7, #4]
 8007568:	88fb      	ldrh	r3, [r7, #6]
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff ff7a 	bl	8007464 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8007570:	88fa      	ldrh	r2, [r7, #6]
 8007572:	887b      	ldrh	r3, [r7, #2]
 8007574:	4413      	add	r3, r2
 8007576:	b29b      	uxth	r3, r3
 8007578:	883a      	ldrh	r2, [r7, #0]
 800757a:	88b9      	ldrh	r1, [r7, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff ff71 	bl	8007464 <BSP_LCD_DrawVLine>
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	bd90      	pop	{r4, r7, pc}
	...

0800758c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800758c:	b5b0      	push	{r4, r5, r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	603a      	str	r2, [r7, #0]
 8007596:	80fb      	strh	r3, [r7, #6]
 8007598:	460b      	mov	r3, r1
 800759a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800759c:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <BSP_LCD_DrawPixel+0x88>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1d      	ldr	r2, [pc, #116]	; (8007618 <BSP_LCD_DrawPixel+0x8c>)
 80075a2:	2134      	movs	r1, #52	; 0x34
 80075a4:	fb01 f303 	mul.w	r3, r1, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	3348      	adds	r3, #72	; 0x48
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d116      	bne.n	80075e0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80075b2:	4b18      	ldr	r3, [pc, #96]	; (8007614 <BSP_LCD_DrawPixel+0x88>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <BSP_LCD_DrawPixel+0x8c>)
 80075b8:	2134      	movs	r1, #52	; 0x34
 80075ba:	fb01 f303 	mul.w	r3, r1, r3
 80075be:	4413      	add	r3, r2
 80075c0:	335c      	adds	r3, #92	; 0x5c
 80075c2:	681c      	ldr	r4, [r3, #0]
 80075c4:	88bd      	ldrh	r5, [r7, #4]
 80075c6:	f7ff fcf1 	bl	8006fac <BSP_LCD_GetXSize>
 80075ca:	4603      	mov	r3, r0
 80075cc:	fb03 f205 	mul.w	r2, r3, r5
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	4413      	add	r3, r2
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	4423      	add	r3, r4
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	b292      	uxth	r2, r2
 80075dc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80075de:	e015      	b.n	800760c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80075e0:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <BSP_LCD_DrawPixel+0x88>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <BSP_LCD_DrawPixel+0x8c>)
 80075e6:	2134      	movs	r1, #52	; 0x34
 80075e8:	fb01 f303 	mul.w	r3, r1, r3
 80075ec:	4413      	add	r3, r2
 80075ee:	335c      	adds	r3, #92	; 0x5c
 80075f0:	681c      	ldr	r4, [r3, #0]
 80075f2:	88bd      	ldrh	r5, [r7, #4]
 80075f4:	f7ff fcda 	bl	8006fac <BSP_LCD_GetXSize>
 80075f8:	4603      	mov	r3, r0
 80075fa:	fb03 f205 	mul.w	r2, r3, r5
 80075fe:	88fb      	ldrh	r3, [r7, #6]
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4423      	add	r3, r4
 8007606:	461a      	mov	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6013      	str	r3, [r2, #0]
}
 800760c:	bf00      	nop
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bdb0      	pop	{r4, r5, r7, pc}
 8007614:	20000188 	.word	0x20000188
 8007618:	200003f0 	.word	0x200003f0

0800761c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800761c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af02      	add	r7, sp, #8
 8007624:	4604      	mov	r4, r0
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	461a      	mov	r2, r3
 800762c:	4623      	mov	r3, r4
 800762e:	80fb      	strh	r3, [r7, #6]
 8007630:	4603      	mov	r3, r0
 8007632:	80bb      	strh	r3, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	807b      	strh	r3, [r7, #2]
 8007638:	4613      	mov	r3, r2
 800763a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007640:	4b30      	ldr	r3, [pc, #192]	; (8007704 <BSP_LCD_FillRect+0xe8>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4930      	ldr	r1, [pc, #192]	; (8007708 <BSP_LCD_FillRect+0xec>)
 8007646:	4613      	mov	r3, r2
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fd42 	bl	80070dc <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007658:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <BSP_LCD_FillRect+0xe8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a2b      	ldr	r2, [pc, #172]	; (800770c <BSP_LCD_FillRect+0xf0>)
 800765e:	2134      	movs	r1, #52	; 0x34
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	4413      	add	r3, r2
 8007666:	3348      	adds	r3, #72	; 0x48
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d114      	bne.n	8007698 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800766e:	4b25      	ldr	r3, [pc, #148]	; (8007704 <BSP_LCD_FillRect+0xe8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a26      	ldr	r2, [pc, #152]	; (800770c <BSP_LCD_FillRect+0xf0>)
 8007674:	2134      	movs	r1, #52	; 0x34
 8007676:	fb01 f303 	mul.w	r3, r1, r3
 800767a:	4413      	add	r3, r2
 800767c:	335c      	adds	r3, #92	; 0x5c
 800767e:	681c      	ldr	r4, [r3, #0]
 8007680:	f7ff fc94 	bl	8006fac <BSP_LCD_GetXSize>
 8007684:	4602      	mov	r2, r0
 8007686:	88bb      	ldrh	r3, [r7, #4]
 8007688:	fb03 f202 	mul.w	r2, r3, r2
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	4413      	add	r3, r2
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	4423      	add	r3, r4
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e013      	b.n	80076c0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007698:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <BSP_LCD_FillRect+0xe8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <BSP_LCD_FillRect+0xf0>)
 800769e:	2134      	movs	r1, #52	; 0x34
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	4413      	add	r3, r2
 80076a6:	335c      	adds	r3, #92	; 0x5c
 80076a8:	681c      	ldr	r4, [r3, #0]
 80076aa:	f7ff fc7f 	bl	8006fac <BSP_LCD_GetXSize>
 80076ae:	4602      	mov	r2, r0
 80076b0:	88bb      	ldrh	r3, [r7, #4]
 80076b2:	fb03 f202 	mul.w	r2, r3, r2
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4423      	add	r3, r4
 80076be:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80076c0:	4b10      	ldr	r3, [pc, #64]	; (8007704 <BSP_LCD_FillRect+0xe8>)
 80076c2:	681c      	ldr	r4, [r3, #0]
 80076c4:	68fd      	ldr	r5, [r7, #12]
 80076c6:	887e      	ldrh	r6, [r7, #2]
 80076c8:	f8b7 8000 	ldrh.w	r8, [r7]
 80076cc:	f7ff fc6e 	bl	8006fac <BSP_LCD_GetXSize>
 80076d0:	4602      	mov	r2, r0
 80076d2:	887b      	ldrh	r3, [r7, #2]
 80076d4:	1ad1      	subs	r1, r2, r3
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <BSP_LCD_FillRect+0xe8>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	480b      	ldr	r0, [pc, #44]	; (8007708 <BSP_LCD_FillRect+0xec>)
 80076dc:	4613      	mov	r3, r2
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4403      	add	r3, r0
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	9100      	str	r1, [sp, #0]
 80076ec:	4643      	mov	r3, r8
 80076ee:	4632      	mov	r2, r6
 80076f0:	4629      	mov	r1, r5
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 f9d8 	bl	8007aa8 <LL_FillBuffer>
}
 80076f8:	bf00      	nop
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007702:	bf00      	nop
 8007704:	20000188 	.word	0x20000188
 8007708:	2000018c 	.word	0x2000018c
 800770c:	200003f0 	.word	0x200003f0

08007710 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <BSP_LCD_DisplayOn+0x30>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <BSP_LCD_DisplayOn+0x30>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8007724:	2201      	movs	r2, #1
 8007726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800772a:	4806      	ldr	r0, [pc, #24]	; (8007744 <BSP_LCD_DisplayOn+0x34>)
 800772c:	f7fb f8d4 	bl	80028d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8007730:	2201      	movs	r2, #1
 8007732:	2108      	movs	r1, #8
 8007734:	4804      	ldr	r0, [pc, #16]	; (8007748 <BSP_LCD_DisplayOn+0x38>)
 8007736:	f7fb f8cf 	bl	80028d8 <HAL_GPIO_WritePin>
}
 800773a:	bf00      	nop
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	200003f0 	.word	0x200003f0
 8007744:	40022000 	.word	0x40022000
 8007748:	40022800 	.word	0x40022800

0800774c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b090      	sub	sp, #64	; 0x40
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8007756:	4b64      	ldr	r3, [pc, #400]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775a:	4a63      	ldr	r2, [pc, #396]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 800775c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007760:	6453      	str	r3, [r2, #68]	; 0x44
 8007762:	4b61      	ldr	r3, [pc, #388]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800776e:	4b5e      	ldr	r3, [pc, #376]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	4a5d      	ldr	r2, [pc, #372]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007778:	6313      	str	r3, [r2, #48]	; 0x30
 800777a:	4b5b      	ldr	r3, [pc, #364]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007786:	4b58      	ldr	r3, [pc, #352]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	4a57      	ldr	r2, [pc, #348]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 800778c:	f043 0310 	orr.w	r3, r3, #16
 8007790:	6313      	str	r3, [r2, #48]	; 0x30
 8007792:	4b55      	ldr	r3, [pc, #340]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800779e:	4b52      	ldr	r3, [pc, #328]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	4a51      	ldr	r2, [pc, #324]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a8:	6313      	str	r3, [r2, #48]	; 0x30
 80077aa:	4b4f      	ldr	r3, [pc, #316]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b2:	61fb      	str	r3, [r7, #28]
 80077b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80077b6:	4b4c      	ldr	r3, [pc, #304]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	4a4b      	ldr	r2, [pc, #300]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c0:	6313      	str	r3, [r2, #48]	; 0x30
 80077c2:	4b49      	ldr	r3, [pc, #292]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80077ce:	4b46      	ldr	r3, [pc, #280]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	4a45      	ldr	r2, [pc, #276]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077d8:	6313      	str	r3, [r2, #48]	; 0x30
 80077da:	4b43      	ldr	r3, [pc, #268]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80077e6:	4b40      	ldr	r3, [pc, #256]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	4a3f      	ldr	r2, [pc, #252]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077f0:	6313      	str	r3, [r2, #48]	; 0x30
 80077f2:	4b3d      	ldr	r3, [pc, #244]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 80077f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80077fe:	4b3a      	ldr	r3, [pc, #232]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	4a39      	ldr	r2, [pc, #228]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007808:	6313      	str	r3, [r2, #48]	; 0x30
 800780a:	4b37      	ldr	r3, [pc, #220]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8007816:	4b34      	ldr	r3, [pc, #208]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	4a33      	ldr	r2, [pc, #204]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 800781c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007820:	6313      	str	r3, [r2, #48]	; 0x30
 8007822:	4b31      	ldr	r3, [pc, #196]	; (80078e8 <BSP_LCD_MspInit+0x19c>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800782a:	60bb      	str	r3, [r7, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800782e:	2310      	movs	r3, #16
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007832:	2302      	movs	r3, #2
 8007834:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007836:	2300      	movs	r3, #0
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800783a:	2302      	movs	r3, #2
 800783c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800783e:	230e      	movs	r3, #14
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007846:	4619      	mov	r1, r3
 8007848:	4828      	ldr	r0, [pc, #160]	; (80078ec <BSP_LCD_MspInit+0x1a0>)
 800784a:	f7fa fe99 	bl	8002580 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800784e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007852:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007854:	2302      	movs	r3, #2
 8007856:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8007858:	2309      	movs	r3, #9
 800785a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800785c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007860:	4619      	mov	r1, r3
 8007862:	4823      	ldr	r0, [pc, #140]	; (80078f0 <BSP_LCD_MspInit+0x1a4>)
 8007864:	f7fa fe8c 	bl	8002580 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8007868:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800786e:	2302      	movs	r3, #2
 8007870:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007872:	230e      	movs	r3, #14
 8007874:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800787a:	4619      	mov	r1, r3
 800787c:	481d      	ldr	r0, [pc, #116]	; (80078f4 <BSP_LCD_MspInit+0x1a8>)
 800787e:	f7fa fe7f 	bl	8002580 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8007882:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007888:	2302      	movs	r3, #2
 800788a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800788c:	230e      	movs	r3, #14
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8007890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007894:	4619      	mov	r1, r3
 8007896:	4818      	ldr	r0, [pc, #96]	; (80078f8 <BSP_LCD_MspInit+0x1ac>)
 8007898:	f7fa fe72 	bl	8002580 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800789c:	23f7      	movs	r3, #247	; 0xf7
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80078a0:	2302      	movs	r3, #2
 80078a2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80078a4:	230e      	movs	r3, #14
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80078a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078ac:	4619      	mov	r1, r3
 80078ae:	4813      	ldr	r0, [pc, #76]	; (80078fc <BSP_LCD_MspInit+0x1b0>)
 80078b0:	f7fa fe66 	bl	8002580 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80078b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80078ba:	2301      	movs	r3, #1
 80078bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80078be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078c2:	4619      	mov	r1, r3
 80078c4:	480b      	ldr	r0, [pc, #44]	; (80078f4 <BSP_LCD_MspInit+0x1a8>)
 80078c6:	f7fa fe5b 	bl	8002580 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80078ca:	2308      	movs	r3, #8
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80078ce:	2301      	movs	r3, #1
 80078d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80078d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078d6:	4619      	mov	r1, r3
 80078d8:	4808      	ldr	r0, [pc, #32]	; (80078fc <BSP_LCD_MspInit+0x1b0>)
 80078da:	f7fa fe51 	bl	8002580 <HAL_GPIO_Init>
}
 80078de:	bf00      	nop
 80078e0:	3740      	adds	r7, #64	; 0x40
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40023800 	.word	0x40023800
 80078ec:	40021000 	.word	0x40021000
 80078f0:	40021800 	.word	0x40021800
 80078f4:	40022000 	.word	0x40022000
 80078f8:	40022400 	.word	0x40022400
 80078fc:	40022800 	.word	0x40022800

08007900 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800790a:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <BSP_LCD_ClockConfig+0x34>)
 800790c:	2208      	movs	r2, #8
 800790e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8007910:	4b08      	ldr	r3, [pc, #32]	; (8007934 <BSP_LCD_ClockConfig+0x34>)
 8007912:	22c0      	movs	r2, #192	; 0xc0
 8007914:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <BSP_LCD_ClockConfig+0x34>)
 8007918:	2205      	movs	r2, #5
 800791a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <BSP_LCD_ClockConfig+0x34>)
 800791e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007922:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8007924:	4803      	ldr	r0, [pc, #12]	; (8007934 <BSP_LCD_ClockConfig+0x34>)
 8007926:	f7fc fe0d 	bl	8004544 <HAL_RCCEx_PeriphCLKConfig>
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200001a4 	.word	0x200001a4

08007938 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	603a      	str	r2, [r7, #0]
 8007942:	80fb      	strh	r3, [r7, #6]
 8007944:	460b      	mov	r3, r1
 8007946:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
 800794c:	2300      	movs	r3, #0
 800794e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8007950:	4b53      	ldr	r3, [pc, #332]	; (8007aa0 <DrawChar+0x168>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	4953      	ldr	r1, [pc, #332]	; (8007aa4 <DrawChar+0x16c>)
 8007956:	4613      	mov	r3, r2
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	3308      	adds	r3, #8
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	88db      	ldrh	r3, [r3, #6]
 8007966:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8007968:	4b4d      	ldr	r3, [pc, #308]	; (8007aa0 <DrawChar+0x168>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	494d      	ldr	r1, [pc, #308]	; (8007aa4 <DrawChar+0x16c>)
 800796e:	4613      	mov	r3, r2
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	440b      	add	r3, r1
 8007978:	3308      	adds	r3, #8
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	889b      	ldrh	r3, [r3, #4]
 800797e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8007980:	8a3b      	ldrh	r3, [r7, #16]
 8007982:	3307      	adds	r3, #7
 8007984:	2b00      	cmp	r3, #0
 8007986:	da00      	bge.n	800798a <DrawChar+0x52>
 8007988:	3307      	adds	r3, #7
 800798a:	10db      	asrs	r3, r3, #3
 800798c:	b2db      	uxtb	r3, r3
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	b2da      	uxtb	r2, r3
 8007992:	8a3b      	ldrh	r3, [r7, #16]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800799a:	2300      	movs	r3, #0
 800799c:	61fb      	str	r3, [r7, #28]
 800799e:	e076      	b.n	8007a8e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80079a0:	8a3b      	ldrh	r3, [r7, #16]
 80079a2:	3307      	adds	r3, #7
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da00      	bge.n	80079aa <DrawChar+0x72>
 80079a8:	3307      	adds	r3, #7
 80079aa:	10db      	asrs	r3, r3, #3
 80079ac:	461a      	mov	r2, r3
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	fb03 f302 	mul.w	r3, r3, r2
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	4413      	add	r3, r2
 80079b8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80079ba:	8a3b      	ldrh	r3, [r7, #16]
 80079bc:	3307      	adds	r3, #7
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da00      	bge.n	80079c4 <DrawChar+0x8c>
 80079c2:	3307      	adds	r3, #7
 80079c4:	10db      	asrs	r3, r3, #3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d002      	beq.n	80079d0 <DrawChar+0x98>
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d004      	beq.n	80079d8 <DrawChar+0xa0>
 80079ce:	e00c      	b.n	80079ea <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	617b      	str	r3, [r7, #20]
      break;
 80079d6:	e016      	b.n	8007a06 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	3201      	adds	r2, #1
 80079e2:	7812      	ldrb	r2, [r2, #0]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]
      break;
 80079e8:	e00d      	b.n	8007a06 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	041a      	lsls	r2, r3, #16
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	3301      	adds	r3, #1
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	021b      	lsls	r3, r3, #8
 80079f8:	4313      	orrs	r3, r2
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	3202      	adds	r2, #2
 80079fe:	7812      	ldrb	r2, [r2, #0]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]
      break;
 8007a04:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8007a06:	2300      	movs	r3, #0
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	e036      	b.n	8007a7a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8007a0c:	8a3a      	ldrh	r2, [r7, #16]
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	1ad2      	subs	r2, r2, r3
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	4413      	add	r3, r2
 8007a16:	3b01      	subs	r3, #1
 8007a18:	2201      	movs	r2, #1
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	461a      	mov	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	88fb      	ldrh	r3, [r7, #6]
 8007a2e:	4413      	add	r3, r2
 8007a30:	b298      	uxth	r0, r3
 8007a32:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <DrawChar+0x168>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	491b      	ldr	r1, [pc, #108]	; (8007aa4 <DrawChar+0x16c>)
 8007a38:	4613      	mov	r3, r2
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	88bb      	ldrh	r3, [r7, #4]
 8007a46:	4619      	mov	r1, r3
 8007a48:	f7ff fda0 	bl	800758c <BSP_LCD_DrawPixel>
 8007a4c:	e012      	b.n	8007a74 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	4413      	add	r3, r2
 8007a56:	b298      	uxth	r0, r3
 8007a58:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <DrawChar+0x168>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	4911      	ldr	r1, [pc, #68]	; (8007aa4 <DrawChar+0x16c>)
 8007a5e:	4613      	mov	r3, r2
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	3304      	adds	r3, #4
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	88bb      	ldrh	r3, [r7, #4]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f7ff fd8c 	bl	800758c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	3301      	adds	r3, #1
 8007a78:	61bb      	str	r3, [r7, #24]
 8007a7a:	8a3b      	ldrh	r3, [r7, #16]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d3c4      	bcc.n	8007a0c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8007a82:	88bb      	ldrh	r3, [r7, #4]
 8007a84:	3301      	adds	r3, #1
 8007a86:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	8a7b      	ldrh	r3, [r7, #18]
 8007a90:	69fa      	ldr	r2, [r7, #28]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d384      	bcc.n	80079a0 <DrawChar+0x68>
  }
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000188 	.word	0x20000188
 8007aa4:	2000018c 	.word	0x2000018c

08007aa8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8007ab6:	4b1e      	ldr	r3, [pc, #120]	; (8007b30 <LL_FillBuffer+0x88>)
 8007ab8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007abc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007abe:	4b1d      	ldr	r3, [pc, #116]	; (8007b34 <LL_FillBuffer+0x8c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	; (8007b38 <LL_FillBuffer+0x90>)
 8007ac4:	2134      	movs	r1, #52	; 0x34
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	4413      	add	r3, r2
 8007acc:	3348      	adds	r3, #72	; 0x48
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d103      	bne.n	8007adc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8007ad4:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <LL_FillBuffer+0x88>)
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	609a      	str	r2, [r3, #8]
 8007ada:	e002      	b.n	8007ae2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007adc:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <LL_FillBuffer+0x88>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8007ae2:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <LL_FillBuffer+0x88>)
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8007ae8:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <LL_FillBuffer+0x88>)
 8007aea:	4a14      	ldr	r2, [pc, #80]	; (8007b3c <LL_FillBuffer+0x94>)
 8007aec:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8007aee:	4810      	ldr	r0, [pc, #64]	; (8007b30 <LL_FillBuffer+0x88>)
 8007af0:	f7fa faba 	bl	8002068 <HAL_DMA2D_Init>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d115      	bne.n	8007b26 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	480c      	ldr	r0, [pc, #48]	; (8007b30 <LL_FillBuffer+0x88>)
 8007afe:	f7fa fc11 	bl	8002324 <HAL_DMA2D_ConfigLayer>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10e      	bne.n	8007b26 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69f9      	ldr	r1, [r7, #28]
 8007b12:	4807      	ldr	r0, [pc, #28]	; (8007b30 <LL_FillBuffer+0x88>)
 8007b14:	f7fa faf2 	bl	80020fc <HAL_DMA2D_Start>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d103      	bne.n	8007b26 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8007b1e:	210a      	movs	r1, #10
 8007b20:	4803      	ldr	r0, [pc, #12]	; (8007b30 <LL_FillBuffer+0x88>)
 8007b22:	f7fa fb16 	bl	8002152 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000148 	.word	0x20000148
 8007b34:	20000188 	.word	0x20000188
 8007b38:	200003f0 	.word	0x200003f0
 8007b3c:	4002b000 	.word	0x4002b000

08007b40 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007b44:	4b29      	ldr	r3, [pc, #164]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007b46:	4a2a      	ldr	r2, [pc, #168]	; (8007bf0 <BSP_SDRAM_Init+0xb0>)
 8007b48:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8007b4a:	4b2a      	ldr	r3, [pc, #168]	; (8007bf4 <BSP_SDRAM_Init+0xb4>)
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8007b50:	4b28      	ldr	r3, [pc, #160]	; (8007bf4 <BSP_SDRAM_Init+0xb4>)
 8007b52:	2207      	movs	r2, #7
 8007b54:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8007b56:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <BSP_SDRAM_Init+0xb4>)
 8007b58:	2204      	movs	r2, #4
 8007b5a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8007b5c:	4b25      	ldr	r3, [pc, #148]	; (8007bf4 <BSP_SDRAM_Init+0xb4>)
 8007b5e:	2207      	movs	r2, #7
 8007b60:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <BSP_SDRAM_Init+0xb4>)
 8007b64:	2202      	movs	r2, #2
 8007b66:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8007b68:	4b22      	ldr	r3, [pc, #136]	; (8007bf4 <BSP_SDRAM_Init+0xb4>)
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8007b6e:	4b21      	ldr	r3, [pc, #132]	; (8007bf4 <BSP_SDRAM_Init+0xb4>)
 8007b70:	2202      	movs	r2, #2
 8007b72:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8007b74:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007b80:	4b1a      	ldr	r3, [pc, #104]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007b82:	2204      	movs	r2, #4
 8007b84:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007b86:	4b19      	ldr	r3, [pc, #100]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007b88:	2210      	movs	r2, #16
 8007b8a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007b8c:	4b17      	ldr	r3, [pc, #92]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007b8e:	2240      	movs	r2, #64	; 0x40
 8007b90:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8007b92:	4b16      	ldr	r3, [pc, #88]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b98:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007b9a:	4b14      	ldr	r3, [pc, #80]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8007ba0:	4b12      	ldr	r3, [pc, #72]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ba6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8007ba8:	4b10      	ldr	r3, [pc, #64]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007baa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	480c      	ldr	r0, [pc, #48]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007bba:	f000 f87f 	bl	8007cbc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8007bbe:	490d      	ldr	r1, [pc, #52]	; (8007bf4 <BSP_SDRAM_Init+0xb4>)
 8007bc0:	480a      	ldr	r0, [pc, #40]	; (8007bec <BSP_SDRAM_Init+0xac>)
 8007bc2:	f7fd f8af 	bl	8004d24 <HAL_SDRAM_Init>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <BSP_SDRAM_Init+0xb8>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e002      	b.n	8007bda <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007bd4:	4b08      	ldr	r3, [pc, #32]	; (8007bf8 <BSP_SDRAM_Init+0xb8>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8007bda:	f240 6003 	movw	r0, #1539	; 0x603
 8007bde:	f000 f80d 	bl	8007bfc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <BSP_SDRAM_Init+0xb8>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000498 	.word	0x20000498
 8007bf0:	a0000140 	.word	0xa0000140
 8007bf4:	20000228 	.word	0x20000228
 8007bf8:	20000064 	.word	0x20000064

08007bfc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8007c08:	4b2a      	ldr	r3, [pc, #168]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007c0e:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c10:	2210      	movs	r2, #16
 8007c12:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007c14:	4b27      	ldr	r3, [pc, #156]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007c1a:	4b26      	ldr	r3, [pc, #152]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c24:	4923      	ldr	r1, [pc, #140]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c26:	4824      	ldr	r0, [pc, #144]	; (8007cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007c28:	f7fd f8ba 	bl	8004da0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	f7f9 fdab 	bl	8001788 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8007c32:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c34:	2202      	movs	r2, #2
 8007c36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007c38:	4b1e      	ldr	r3, [pc, #120]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c3a:	2210      	movs	r2, #16
 8007c3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007c3e:	4b1d      	ldr	r3, [pc, #116]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007c44:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8007c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c4e:	4919      	ldr	r1, [pc, #100]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c50:	4819      	ldr	r0, [pc, #100]	; (8007cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007c52:	f7fd f8a5 	bl	8004da0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007c56:	4b17      	ldr	r3, [pc, #92]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c58:	2203      	movs	r2, #3
 8007c5a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007c5c:	4b15      	ldr	r3, [pc, #84]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c5e:	2210      	movs	r2, #16
 8007c60:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c64:	2208      	movs	r2, #8
 8007c66:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007c68:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c72:	4910      	ldr	r1, [pc, #64]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c74:	4810      	ldr	r0, [pc, #64]	; (8007cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007c76:	f7fd f893 	bl	8004da0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8007c7a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8007c7e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8007c80:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c82:	2204      	movs	r2, #4
 8007c84:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c88:	2210      	movs	r2, #16
 8007c8a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4a07      	ldr	r2, [pc, #28]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c96:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c9c:	4905      	ldr	r1, [pc, #20]	; (8007cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007c9e:	4806      	ldr	r0, [pc, #24]	; (8007cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007ca0:	f7fd f87e 	bl	8004da0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4804      	ldr	r0, [pc, #16]	; (8007cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007ca8:	f7fd f8a5 	bl	8004df6 <HAL_SDRAM_ProgramRefreshRate>
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000244 	.word	0x20000244
 8007cb8:	20000498 	.word	0x20000498

08007cbc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b090      	sub	sp, #64	; 0x40
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007cc6:	4b70      	ldr	r3, [pc, #448]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	4a6f      	ldr	r2, [pc, #444]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007ccc:	f043 0301 	orr.w	r3, r3, #1
 8007cd0:	6393      	str	r3, [r2, #56]	; 0x38
 8007cd2:	4b6d      	ldr	r3, [pc, #436]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8007cde:	4b6a      	ldr	r3, [pc, #424]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce2:	4a69      	ldr	r2, [pc, #420]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cea:	4b67      	ldr	r3, [pc, #412]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cf6:	4b64      	ldr	r3, [pc, #400]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	4a63      	ldr	r2, [pc, #396]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007cfc:	f043 0304 	orr.w	r3, r3, #4
 8007d00:	6313      	str	r3, [r2, #48]	; 0x30
 8007d02:	4b61      	ldr	r3, [pc, #388]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	623b      	str	r3, [r7, #32]
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d0e:	4b5e      	ldr	r3, [pc, #376]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	4a5d      	ldr	r2, [pc, #372]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d14:	f043 0308 	orr.w	r3, r3, #8
 8007d18:	6313      	str	r3, [r2, #48]	; 0x30
 8007d1a:	4b5b      	ldr	r3, [pc, #364]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007d26:	4b58      	ldr	r3, [pc, #352]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2a:	4a57      	ldr	r2, [pc, #348]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d2c:	f043 0310 	orr.w	r3, r3, #16
 8007d30:	6313      	str	r3, [r2, #48]	; 0x30
 8007d32:	4b55      	ldr	r3, [pc, #340]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d3e:	4b52      	ldr	r3, [pc, #328]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	4a51      	ldr	r2, [pc, #324]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d44:	f043 0320 	orr.w	r3, r3, #32
 8007d48:	6313      	str	r3, [r2, #48]	; 0x30
 8007d4a:	4b4f      	ldr	r3, [pc, #316]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d56:	4b4c      	ldr	r3, [pc, #304]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	4a4b      	ldr	r2, [pc, #300]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d60:	6313      	str	r3, [r2, #48]	; 0x30
 8007d62:	4b49      	ldr	r3, [pc, #292]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6a:	613b      	str	r3, [r7, #16]
 8007d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d6e:	4b46      	ldr	r3, [pc, #280]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	4a45      	ldr	r2, [pc, #276]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d78:	6313      	str	r3, [r2, #48]	; 0x30
 8007d7a:	4b43      	ldr	r3, [pc, #268]	; (8007e88 <BSP_SDRAM_MspInit+0x1cc>)
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007d86:	2302      	movs	r3, #2
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007d92:	230c      	movs	r3, #12
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8007d96:	2308      	movs	r3, #8
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d9e:	4619      	mov	r1, r3
 8007da0:	483a      	ldr	r0, [pc, #232]	; (8007e8c <BSP_SDRAM_MspInit+0x1d0>)
 8007da2:	f7fa fbed 	bl	8002580 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8007da6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007db0:	4619      	mov	r1, r3
 8007db2:	4837      	ldr	r0, [pc, #220]	; (8007e90 <BSP_SDRAM_MspInit+0x1d4>)
 8007db4:	f7fa fbe4 	bl	8002580 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007db8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4833      	ldr	r0, [pc, #204]	; (8007e94 <BSP_SDRAM_MspInit+0x1d8>)
 8007dc6:	f7fa fbdb 	bl	8002580 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007dca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4830      	ldr	r0, [pc, #192]	; (8007e98 <BSP_SDRAM_MspInit+0x1dc>)
 8007dd8:	f7fa fbd2 	bl	8002580 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007ddc:	f248 1333 	movw	r3, #33075	; 0x8133
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007de6:	4619      	mov	r1, r3
 8007de8:	482c      	ldr	r0, [pc, #176]	; (8007e9c <BSP_SDRAM_MspInit+0x1e0>)
 8007dea:	f7fa fbc9 	bl	8002580 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8007dee:	2328      	movs	r3, #40	; 0x28
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007df6:	4619      	mov	r1, r3
 8007df8:	4829      	ldr	r0, [pc, #164]	; (8007ea0 <BSP_SDRAM_MspInit+0x1e4>)
 8007dfa:	f7fa fbc1 	bl	8002580 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007dfe:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007e04:	4b27      	ldr	r3, [pc, #156]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007e0a:	4b26      	ldr	r3, [pc, #152]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e10:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e18:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007e1a:	4b22      	ldr	r3, [pc, #136]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e20:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007e22:	4b20      	ldr	r3, [pc, #128]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e28:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8007e2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007e30:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e36:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007e38:	4b1a      	ldr	r3, [pc, #104]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007e3e:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e40:	2203      	movs	r2, #3
 8007e42:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007e44:	4b17      	ldr	r3, [pc, #92]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007e4a:	4b16      	ldr	r3, [pc, #88]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007e50:	4b14      	ldr	r3, [pc, #80]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e52:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <BSP_SDRAM_MspInit+0x1ec>)
 8007e54:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a12      	ldr	r2, [pc, #72]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8007e5c:	4a11      	ldr	r2, [pc, #68]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8007e62:	4810      	ldr	r0, [pc, #64]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e64:	f7f9 ff5e 	bl	8001d24 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007e68:	480e      	ldr	r0, [pc, #56]	; (8007ea4 <BSP_SDRAM_MspInit+0x1e8>)
 8007e6a:	f7f9 fead 	bl	8001bc8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007e6e:	2200      	movs	r2, #0
 8007e70:	210f      	movs	r1, #15
 8007e72:	2038      	movs	r0, #56	; 0x38
 8007e74:	f7f9 fd87 	bl	8001986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007e78:	2038      	movs	r0, #56	; 0x38
 8007e7a:	f7f9 fda0 	bl	80019be <HAL_NVIC_EnableIRQ>
}
 8007e7e:	bf00      	nop
 8007e80:	3740      	adds	r7, #64	; 0x40
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	40020800 	.word	0x40020800
 8007e90:	40020c00 	.word	0x40020c00
 8007e94:	40021000 	.word	0x40021000
 8007e98:	40021400 	.word	0x40021400
 8007e9c:	40021800 	.word	0x40021800
 8007ea0:	40021c00 	.word	0x40021c00
 8007ea4:	20000254 	.word	0x20000254
 8007ea8:	40026410 	.word	0x40026410

08007eac <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	460a      	mov	r2, r1
 8007eb6:	80fb      	strh	r3, [r7, #6]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007ec0:	4a14      	ldr	r2, [pc, #80]	; (8007f14 <BSP_TS_Init+0x68>)
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007ec6:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <BSP_TS_Init+0x6c>)
 8007ec8:	88bb      	ldrh	r3, [r7, #4]
 8007eca:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007ecc:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <BSP_TS_Init+0x70>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2070      	movs	r0, #112	; 0x70
 8007ed2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <BSP_TS_Init+0x70>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2070      	movs	r0, #112	; 0x70
 8007eda:	4798      	blx	r3
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b51      	cmp	r3, #81	; 0x51
 8007ee0:	d111      	bne.n	8007f06 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <BSP_TS_Init+0x74>)
 8007ee4:	4a0d      	ldr	r2, [pc, #52]	; (8007f1c <BSP_TS_Init+0x70>)
 8007ee6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007ee8:	4b0e      	ldr	r3, [pc, #56]	; (8007f24 <BSP_TS_Init+0x78>)
 8007eea:	2270      	movs	r2, #112	; 0x70
 8007eec:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <BSP_TS_Init+0x7c>)
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <BSP_TS_Init+0x74>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	4a0a      	ldr	r2, [pc, #40]	; (8007f24 <BSP_TS_Init+0x78>)
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	b292      	uxth	r2, r2
 8007f00:	4610      	mov	r0, r2
 8007f02:	4798      	blx	r3
 8007f04:	e001      	b.n	8007f0a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007f06:	2303      	movs	r3, #3
 8007f08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	200002b8 	.word	0x200002b8
 8007f18:	200002ba 	.word	0x200002ba
 8007f1c:	2000003c 	.word	0x2000003c
 8007f20:	200002b4 	.word	0x200002b4
 8007f24:	200002bd 	.word	0x200002bd
 8007f28:	200002bc 	.word	0x200002bc

08007f2c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b097      	sub	sp, #92	; 0x5c
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8007f46:	4b97      	ldr	r3, [pc, #604]	; (80081a4 <BSP_TS_GetState+0x278>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	4a96      	ldr	r2, [pc, #600]	; (80081a8 <BSP_TS_GetState+0x27c>)
 8007f4e:	7812      	ldrb	r2, [r2, #0]
 8007f50:	b292      	uxth	r2, r2
 8007f52:	4610      	mov	r0, r2
 8007f54:	4798      	blx	r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 81a8 	beq.w	80082b8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f6c:	e197      	b.n	800829e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8007f6e:	4b8d      	ldr	r3, [pc, #564]	; (80081a4 <BSP_TS_GetState+0x278>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	4a8c      	ldr	r2, [pc, #560]	; (80081a8 <BSP_TS_GetState+0x27c>)
 8007f76:	7812      	ldrb	r2, [r2, #0]
 8007f78:	b290      	uxth	r0, r2
 8007f7a:	f107 0120 	add.w	r1, r7, #32
 8007f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f80:	0052      	lsls	r2, r2, #1
 8007f82:	188c      	adds	r4, r1, r2
 8007f84:	f107 0114 	add.w	r1, r7, #20
 8007f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f8a:	0052      	lsls	r2, r2, #1
 8007f8c:	440a      	add	r2, r1
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8007f92:	4b86      	ldr	r3, [pc, #536]	; (80081ac <BSP_TS_GetState+0x280>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d11b      	bne.n	8007fd2 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8007f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007fb0:	440b      	add	r3, r1
 8007fb2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8007fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007fcc:	440b      	add	r3, r1
 8007fce:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8007fd2:	4b76      	ldr	r3, [pc, #472]	; (80081ac <BSP_TS_GetState+0x280>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d010      	beq.n	8008000 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8007fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007fec:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007ffa:	440b      	add	r3, r1
 8007ffc:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8008000:	4b6a      	ldr	r3, [pc, #424]	; (80081ac <BSP_TS_GetState+0x280>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d010      	beq.n	800802e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800800c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008014:	4413      	add	r3, r2
 8008016:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800801a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800801e:	b29a      	uxth	r2, r3
 8008020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008028:	440b      	add	r3, r1
 800802a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800802e:	4b5f      	ldr	r3, [pc, #380]	; (80081ac <BSP_TS_GetState+0x280>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01b      	beq.n	8008072 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800803a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008042:	4413      	add	r3, r2
 8008044:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8008048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008050:	440b      	add	r3, r1
 8008052:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8008056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800805e:	4413      	add	r3, r2
 8008060:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8008064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800806c:	440b      	add	r3, r1
 800806e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8008072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800807a:	4413      	add	r3, r2
 800807c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008080:	4619      	mov	r1, r3
 8008082:	4a4b      	ldr	r2, [pc, #300]	; (80081b0 <BSP_TS_GetState+0x284>)
 8008084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808a:	4299      	cmp	r1, r3
 800808c:	d90e      	bls.n	80080ac <BSP_TS_GetState+0x180>
 800808e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008096:	4413      	add	r3, r2
 8008098:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800809c:	4944      	ldr	r1, [pc, #272]	; (80081b0 <BSP_TS_GetState+0x284>)
 800809e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	e00d      	b.n	80080c8 <BSP_TS_GetState+0x19c>
 80080ac:	4a40      	ldr	r2, [pc, #256]	; (80081b0 <BSP_TS_GetState+0x284>)
 80080ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80080be:	440b      	add	r3, r1
 80080c0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80080cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080d4:	4413      	add	r3, r2
 80080d6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80080da:	4619      	mov	r1, r3
 80080dc:	4a35      	ldr	r2, [pc, #212]	; (80081b4 <BSP_TS_GetState+0x288>)
 80080de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e4:	4299      	cmp	r1, r3
 80080e6:	d90e      	bls.n	8008106 <BSP_TS_GetState+0x1da>
 80080e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080f0:	4413      	add	r3, r2
 80080f2:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80080f6:	492f      	ldr	r1, [pc, #188]	; (80081b4 <BSP_TS_GetState+0x288>)
 80080f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	b29b      	uxth	r3, r3
 8008104:	e00d      	b.n	8008122 <BSP_TS_GetState+0x1f6>
 8008106:	4a2b      	ldr	r2, [pc, #172]	; (80081b4 <BSP_TS_GetState+0x288>)
 8008108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800810a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800810e:	b29a      	uxth	r2, r3
 8008110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008118:	440b      	add	r3, r1
 800811a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	b29b      	uxth	r3, r3
 8008122:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8008126:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800812a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800812e:	4413      	add	r3, r2
 8008130:	2b05      	cmp	r3, #5
 8008132:	dd17      	ble.n	8008164 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8008134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800813c:	4413      	add	r3, r2
 800813e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008142:	4619      	mov	r1, r3
 8008144:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <BSP_TS_GetState+0x284>)
 8008146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008148:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800814c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008154:	4413      	add	r3, r2
 8008156:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800815a:	4619      	mov	r1, r3
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <BSP_TS_GetState+0x288>)
 800815e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8008164:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <BSP_TS_GetState+0x27c>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b70      	cmp	r3, #112	; 0x70
 800816a:	d125      	bne.n	80081b8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800816c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008174:	4413      	add	r3, r2
 8008176:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	4413      	add	r3, r2
 8008182:	460a      	mov	r2, r1
 8008184:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8008186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800818e:	4413      	add	r3, r2
 8008190:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008198:	3304      	adds	r3, #4
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	4413      	add	r3, r2
 800819e:	460a      	mov	r2, r1
 80081a0:	809a      	strh	r2, [r3, #4]
 80081a2:	e02c      	b.n	80081fe <BSP_TS_GetState+0x2d2>
 80081a4:	200002b4 	.word	0x200002b4
 80081a8:	200002bd 	.word	0x200002bd
 80081ac:	200002bc 	.word	0x200002bc
 80081b0:	200002c0 	.word	0x200002c0
 80081b4:	200002d4 	.word	0x200002d4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80081b8:	4b42      	ldr	r3, [pc, #264]	; (80082c4 <BSP_TS_GetState+0x398>)
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	4a42      	ldr	r2, [pc, #264]	; (80082c8 <BSP_TS_GetState+0x39c>)
 80081c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c6:	fb03 f301 	mul.w	r3, r3, r1
 80081ca:	0b1b      	lsrs	r3, r3, #12
 80081cc:	b299      	uxth	r1, r3
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	4413      	add	r3, r2
 80081d6:	460a      	mov	r2, r1
 80081d8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80081da:	4b3c      	ldr	r3, [pc, #240]	; (80082cc <BSP_TS_GetState+0x3a0>)
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	4619      	mov	r1, r3
 80081e0:	4a3b      	ldr	r2, [pc, #236]	; (80082d0 <BSP_TS_GetState+0x3a4>)
 80081e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e8:	fb03 f301 	mul.w	r3, r3, r1
 80081ec:	0b1b      	lsrs	r3, r3, #12
 80081ee:	b299      	uxth	r1, r3
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f4:	3304      	adds	r3, #4
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	4413      	add	r3, r2
 80081fa:	460a      	mov	r2, r1
 80081fc:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80081fe:	4b35      	ldr	r3, [pc, #212]	; (80082d4 <BSP_TS_GetState+0x3a8>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b298      	uxth	r0, r3
 8008204:	f107 010c 	add.w	r1, r7, #12
 8008208:	f107 0210 	add.w	r2, r7, #16
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	460b      	mov	r3, r1
 8008214:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008216:	f7fe fbdd 	bl	80069d4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	b2d9      	uxtb	r1, r3
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008222:	4413      	add	r3, r2
 8008224:	3316      	adds	r3, #22
 8008226:	460a      	mov	r2, r1
 8008228:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	b2d9      	uxtb	r1, r3
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008232:	4413      	add	r3, r2
 8008234:	3320      	adds	r3, #32
 8008236:	460a      	mov	r2, r1
 8008238:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d827      	bhi.n	8008290 <BSP_TS_GetState+0x364>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <BSP_TS_GetState+0x31c>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	08008259 	.word	0x08008259
 800824c:	08008267 	.word	0x08008267
 8008250:	08008275 	.word	0x08008275
 8008254:	08008283 	.word	0x08008283
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825c:	4413      	add	r3, r2
 800825e:	331b      	adds	r3, #27
 8008260:	2201      	movs	r2, #1
 8008262:	701a      	strb	r2, [r3, #0]
          break;
 8008264:	e018      	b.n	8008298 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800826a:	4413      	add	r3, r2
 800826c:	331b      	adds	r3, #27
 800826e:	2202      	movs	r2, #2
 8008270:	701a      	strb	r2, [r3, #0]
          break;
 8008272:	e011      	b.n	8008298 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008278:	4413      	add	r3, r2
 800827a:	331b      	adds	r3, #27
 800827c:	2203      	movs	r2, #3
 800827e:	701a      	strb	r2, [r3, #0]
          break;
 8008280:	e00a      	b.n	8008298 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008286:	4413      	add	r3, r2
 8008288:	331b      	adds	r3, #27
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
          break;
 800828e:	e003      	b.n	8008298 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8008296:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8008298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829a:	3301      	adds	r3, #1
 800829c:	64bb      	str	r3, [r7, #72]	; 0x48
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a6:	4293      	cmp	r3, r2
 80082a8:	f4ff ae61 	bcc.w	8007f6e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f813 	bl	80082d8 <BSP_TS_Get_GestureId>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80082b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3754      	adds	r7, #84	; 0x54
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd90      	pop	{r4, r7, pc}
 80082c4:	200002b8 	.word	0x200002b8
 80082c8:	200002c0 	.word	0x200002c0
 80082cc:	200002ba 	.word	0x200002ba
 80082d0:	200002d4 	.word	0x200002d4
 80082d4:	200002bd 	.word	0x200002bd

080082d8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80082e8:	4b3b      	ldr	r3, [pc, #236]	; (80083d8 <BSP_TS_Get_GestureId+0x100>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f107 0208 	add.w	r2, r7, #8
 80082f2:	4611      	mov	r1, r2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fb54 	bl	80069a2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b49      	cmp	r3, #73	; 0x49
 80082fe:	d05e      	beq.n	80083be <BSP_TS_Get_GestureId+0xe6>
 8008300:	2b49      	cmp	r3, #73	; 0x49
 8008302:	d860      	bhi.n	80083c6 <BSP_TS_Get_GestureId+0xee>
 8008304:	2b1c      	cmp	r3, #28
 8008306:	d83f      	bhi.n	8008388 <BSP_TS_Get_GestureId+0xb0>
 8008308:	2b1c      	cmp	r3, #28
 800830a:	d85c      	bhi.n	80083c6 <BSP_TS_Get_GestureId+0xee>
 800830c:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <BSP_TS_Get_GestureId+0x3c>)
 800830e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008312:	bf00      	nop
 8008314:	0800838f 	.word	0x0800838f
 8008318:	080083c7 	.word	0x080083c7
 800831c:	080083c7 	.word	0x080083c7
 8008320:	080083c7 	.word	0x080083c7
 8008324:	080083c7 	.word	0x080083c7
 8008328:	080083c7 	.word	0x080083c7
 800832c:	080083c7 	.word	0x080083c7
 8008330:	080083c7 	.word	0x080083c7
 8008334:	080083c7 	.word	0x080083c7
 8008338:	080083c7 	.word	0x080083c7
 800833c:	080083c7 	.word	0x080083c7
 8008340:	080083c7 	.word	0x080083c7
 8008344:	080083c7 	.word	0x080083c7
 8008348:	080083c7 	.word	0x080083c7
 800834c:	080083c7 	.word	0x080083c7
 8008350:	080083c7 	.word	0x080083c7
 8008354:	08008397 	.word	0x08008397
 8008358:	080083c7 	.word	0x080083c7
 800835c:	080083c7 	.word	0x080083c7
 8008360:	080083c7 	.word	0x080083c7
 8008364:	0800839f 	.word	0x0800839f
 8008368:	080083c7 	.word	0x080083c7
 800836c:	080083c7 	.word	0x080083c7
 8008370:	080083c7 	.word	0x080083c7
 8008374:	080083a7 	.word	0x080083a7
 8008378:	080083c7 	.word	0x080083c7
 800837c:	080083c7 	.word	0x080083c7
 8008380:	080083c7 	.word	0x080083c7
 8008384:	080083af 	.word	0x080083af
 8008388:	2b40      	cmp	r3, #64	; 0x40
 800838a:	d014      	beq.n	80083b6 <BSP_TS_Get_GestureId+0xde>
 800838c:	e01b      	b.n	80083c6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8008394:	e01a      	b.n	80083cc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800839c:	e016      	b.n	80083cc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80083a4:	e012      	b.n	80083cc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2203      	movs	r2, #3
 80083aa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80083ac:	e00e      	b.n	80083cc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2204      	movs	r2, #4
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80083b4:	e00a      	b.n	80083cc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2205      	movs	r2, #5
 80083ba:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80083bc:	e006      	b.n	80083cc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2206      	movs	r2, #6
 80083c2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80083c4:	e002      	b.n	80083cc <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ca:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200002bd 	.word	0x200002bd

080083dc <calloc>:
 80083dc:	4b02      	ldr	r3, [pc, #8]	; (80083e8 <calloc+0xc>)
 80083de:	460a      	mov	r2, r1
 80083e0:	4601      	mov	r1, r0
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	f000 b834 	b.w	8008450 <_calloc_r>
 80083e8:	20000068 	.word	0x20000068

080083ec <__errno>:
 80083ec:	4b01      	ldr	r3, [pc, #4]	; (80083f4 <__errno+0x8>)
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	20000068 	.word	0x20000068

080083f8 <__libc_init_array>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	4d0d      	ldr	r5, [pc, #52]	; (8008430 <__libc_init_array+0x38>)
 80083fc:	4c0d      	ldr	r4, [pc, #52]	; (8008434 <__libc_init_array+0x3c>)
 80083fe:	1b64      	subs	r4, r4, r5
 8008400:	10a4      	asrs	r4, r4, #2
 8008402:	2600      	movs	r6, #0
 8008404:	42a6      	cmp	r6, r4
 8008406:	d109      	bne.n	800841c <__libc_init_array+0x24>
 8008408:	4d0b      	ldr	r5, [pc, #44]	; (8008438 <__libc_init_array+0x40>)
 800840a:	4c0c      	ldr	r4, [pc, #48]	; (800843c <__libc_init_array+0x44>)
 800840c:	f000 f8a8 	bl	8008560 <_init>
 8008410:	1b64      	subs	r4, r4, r5
 8008412:	10a4      	asrs	r4, r4, #2
 8008414:	2600      	movs	r6, #0
 8008416:	42a6      	cmp	r6, r4
 8008418:	d105      	bne.n	8008426 <__libc_init_array+0x2e>
 800841a:	bd70      	pop	{r4, r5, r6, pc}
 800841c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008420:	4798      	blx	r3
 8008422:	3601      	adds	r6, #1
 8008424:	e7ee      	b.n	8008404 <__libc_init_array+0xc>
 8008426:	f855 3b04 	ldr.w	r3, [r5], #4
 800842a:	4798      	blx	r3
 800842c:	3601      	adds	r6, #1
 800842e:	e7f2      	b.n	8008416 <__libc_init_array+0x1e>
 8008430:	0800a0b4 	.word	0x0800a0b4
 8008434:	0800a0b4 	.word	0x0800a0b4
 8008438:	0800a0b4 	.word	0x0800a0b4
 800843c:	0800a0b8 	.word	0x0800a0b8

08008440 <memset>:
 8008440:	4402      	add	r2, r0
 8008442:	4603      	mov	r3, r0
 8008444:	4293      	cmp	r3, r2
 8008446:	d100      	bne.n	800844a <memset+0xa>
 8008448:	4770      	bx	lr
 800844a:	f803 1b01 	strb.w	r1, [r3], #1
 800844e:	e7f9      	b.n	8008444 <memset+0x4>

08008450 <_calloc_r>:
 8008450:	b513      	push	{r0, r1, r4, lr}
 8008452:	434a      	muls	r2, r1
 8008454:	4611      	mov	r1, r2
 8008456:	9201      	str	r2, [sp, #4]
 8008458:	f000 f80a 	bl	8008470 <_malloc_r>
 800845c:	4604      	mov	r4, r0
 800845e:	b118      	cbz	r0, 8008468 <_calloc_r+0x18>
 8008460:	9a01      	ldr	r2, [sp, #4]
 8008462:	2100      	movs	r1, #0
 8008464:	f7ff ffec 	bl	8008440 <memset>
 8008468:	4620      	mov	r0, r4
 800846a:	b002      	add	sp, #8
 800846c:	bd10      	pop	{r4, pc}
	...

08008470 <_malloc_r>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	1ccd      	adds	r5, r1, #3
 8008474:	f025 0503 	bic.w	r5, r5, #3
 8008478:	3508      	adds	r5, #8
 800847a:	2d0c      	cmp	r5, #12
 800847c:	bf38      	it	cc
 800847e:	250c      	movcc	r5, #12
 8008480:	2d00      	cmp	r5, #0
 8008482:	4606      	mov	r6, r0
 8008484:	db01      	blt.n	800848a <_malloc_r+0x1a>
 8008486:	42a9      	cmp	r1, r5
 8008488:	d903      	bls.n	8008492 <_malloc_r+0x22>
 800848a:	230c      	movs	r3, #12
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	2000      	movs	r0, #0
 8008490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008492:	f000 f857 	bl	8008544 <__malloc_lock>
 8008496:	4921      	ldr	r1, [pc, #132]	; (800851c <_malloc_r+0xac>)
 8008498:	680a      	ldr	r2, [r1, #0]
 800849a:	4614      	mov	r4, r2
 800849c:	b99c      	cbnz	r4, 80084c6 <_malloc_r+0x56>
 800849e:	4f20      	ldr	r7, [pc, #128]	; (8008520 <_malloc_r+0xb0>)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	b923      	cbnz	r3, 80084ae <_malloc_r+0x3e>
 80084a4:	4621      	mov	r1, r4
 80084a6:	4630      	mov	r0, r6
 80084a8:	f000 f83c 	bl	8008524 <_sbrk_r>
 80084ac:	6038      	str	r0, [r7, #0]
 80084ae:	4629      	mov	r1, r5
 80084b0:	4630      	mov	r0, r6
 80084b2:	f000 f837 	bl	8008524 <_sbrk_r>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d123      	bne.n	8008502 <_malloc_r+0x92>
 80084ba:	230c      	movs	r3, #12
 80084bc:	6033      	str	r3, [r6, #0]
 80084be:	4630      	mov	r0, r6
 80084c0:	f000 f846 	bl	8008550 <__malloc_unlock>
 80084c4:	e7e3      	b.n	800848e <_malloc_r+0x1e>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	1b5b      	subs	r3, r3, r5
 80084ca:	d417      	bmi.n	80084fc <_malloc_r+0x8c>
 80084cc:	2b0b      	cmp	r3, #11
 80084ce:	d903      	bls.n	80084d8 <_malloc_r+0x68>
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	441c      	add	r4, r3
 80084d4:	6025      	str	r5, [r4, #0]
 80084d6:	e004      	b.n	80084e2 <_malloc_r+0x72>
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	42a2      	cmp	r2, r4
 80084dc:	bf0c      	ite	eq
 80084de:	600b      	streq	r3, [r1, #0]
 80084e0:	6053      	strne	r3, [r2, #4]
 80084e2:	4630      	mov	r0, r6
 80084e4:	f000 f834 	bl	8008550 <__malloc_unlock>
 80084e8:	f104 000b 	add.w	r0, r4, #11
 80084ec:	1d23      	adds	r3, r4, #4
 80084ee:	f020 0007 	bic.w	r0, r0, #7
 80084f2:	1ac2      	subs	r2, r0, r3
 80084f4:	d0cc      	beq.n	8008490 <_malloc_r+0x20>
 80084f6:	1a1b      	subs	r3, r3, r0
 80084f8:	50a3      	str	r3, [r4, r2]
 80084fa:	e7c9      	b.n	8008490 <_malloc_r+0x20>
 80084fc:	4622      	mov	r2, r4
 80084fe:	6864      	ldr	r4, [r4, #4]
 8008500:	e7cc      	b.n	800849c <_malloc_r+0x2c>
 8008502:	1cc4      	adds	r4, r0, #3
 8008504:	f024 0403 	bic.w	r4, r4, #3
 8008508:	42a0      	cmp	r0, r4
 800850a:	d0e3      	beq.n	80084d4 <_malloc_r+0x64>
 800850c:	1a21      	subs	r1, r4, r0
 800850e:	4630      	mov	r0, r6
 8008510:	f000 f808 	bl	8008524 <_sbrk_r>
 8008514:	3001      	adds	r0, #1
 8008516:	d1dd      	bne.n	80084d4 <_malloc_r+0x64>
 8008518:	e7cf      	b.n	80084ba <_malloc_r+0x4a>
 800851a:	bf00      	nop
 800851c:	200002e8 	.word	0x200002e8
 8008520:	200002ec 	.word	0x200002ec

08008524 <_sbrk_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d06      	ldr	r5, [pc, #24]	; (8008540 <_sbrk_r+0x1c>)
 8008528:	2300      	movs	r3, #0
 800852a:	4604      	mov	r4, r0
 800852c:	4608      	mov	r0, r1
 800852e:	602b      	str	r3, [r5, #0]
 8008530:	f7f9 f84c 	bl	80015cc <_sbrk>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d102      	bne.n	800853e <_sbrk_r+0x1a>
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	b103      	cbz	r3, 800853e <_sbrk_r+0x1a>
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	200004cc 	.word	0x200004cc

08008544 <__malloc_lock>:
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__malloc_lock+0x8>)
 8008546:	f000 b809 	b.w	800855c <__retarget_lock_acquire_recursive>
 800854a:	bf00      	nop
 800854c:	200004d4 	.word	0x200004d4

08008550 <__malloc_unlock>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__malloc_unlock+0x8>)
 8008552:	f000 b804 	b.w	800855e <__retarget_lock_release_recursive>
 8008556:	bf00      	nop
 8008558:	200004d4 	.word	0x200004d4

0800855c <__retarget_lock_acquire_recursive>:
 800855c:	4770      	bx	lr

0800855e <__retarget_lock_release_recursive>:
 800855e:	4770      	bx	lr

08008560 <_init>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr

0800856c <_fini>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr
